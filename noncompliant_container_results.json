{"platform":{"name":"openshift","release":"train-openshift: v0.0.1"},"profiles":[{"name":"tests from controls.","sha256":"3b4836bae4db468f5c5adc0cad541763d5dbdd547346911f41be609b439dd7af","title":"tests from controls/","supports":[],"attributes":[{"name":"pg_owner","options":{"value":"postgres"}},{"name":"pg_group","options":{"value":"postgres"}},{"name":"pg_owner_password","options":{"value":"postgres"}},{"name":"pg_dba","options":{"value":"postgres"}},{"name":"pg_dba_password","options":{"value":"postgres"}},{"name":"pg_user","options":{"value":"user"}},{"name":"pg_user_password","options":{"value":"pass"}},{"name":"pg_host","options":{"value":"localhost"}},{"name":"pg_port","options":{"value":"5432"}},{"name":"pg_db","options":{"value":"db"}},{"name":"pg_table","options":{"value":""}},{"name":"login_user","options":{"value":"postgres"}},{"name":"login_host","options":{"value":"postgres"}},{"name":"pg_version","options":{"value":"9.6"}},{"name":"pg_data_dir","options":{"value":"/var/lib/pgsql/data"}},{"name":"pg_conf_file","options":{"value":"/var/lib/pgsql/data/userdata/postgresql.conf"}},{"name":"pg_user_defined_conf","options":{"value":"/var/lib/pgsql/data/userdata/stig-postgresql.conf"}},{"name":"pg_hba_conf_file","options":{"value":"/var/lib/pgsql/data/userdata/pg_hba.conf"}},{"name":"pg_ident_conf_file","options":{"value":"/var/lib/pgsql/data/userdata/pg_ident.conf"}},{"name":"pg_log_dir","options":{"value":"/var/lib/pgsql/data/userdata/pg_log"}},{"name":"pg_shared_dirs","options":{"value":["/var/lib/pgsql/data"]}},{"name":"pg_conf_mode","options":{"value":"0600"}},{"name":"pg_ssl","options":{"value":"on"}},{"name":"pg_log_dest","options":{"value":"syslog"}},{"name":"pg_syslog_facility","options":{"value":["local0"]}},{"name":"pg_syslog_owner","options":{"value":"postgres"}},{"name":"pg_audit_log_dir","options":{"value":"/var/lib/pgsql/data/userdata/pg_log"}},{"name":"pgaudit_log_items","options":{"value":["ddl","role","read","write"]}},{"name":"pgaudit_log_line_items","options":{"value":["%m","%u","%c"]}},{"name":"pg_superusers","options":{"value":["postgres"]}},{"name":"pg_users","options":{"value":[""]}},{"name":"pg_replicas","options":{"value":["192.168.1.3/32"]}},{"name":"approved_ext","options":{"value":[""]}},{"name":"pg_max_connections","options":{"value":"100"}},{"name":"pg_timezone","options":{"value":"UTC"}},{"name":"approved_auth_methods","options":{"value":["gss","sspi","ldap"]}},{"name":"approved_packages","options":{"value":[""]}},{"name":"pgaudit_installation","options":{"value":""}},{"name":"pg_object_granted_privileges","options":{"value":"arwDxt"}},{"name":"pg_object_public_privileges","options":{"value":"r"}},{"name":"pg_object_exceptions","options":{"value":["pg_setting"]}},{"name":"client_min_mesg","options":{"value":"error"}},{"name":"log_line_prefix","options":{"value":["%m","%u","%d","%s"]}}],"groups":[{"id":"V-72983.rb","controls":["V-72983"]},{"id":"V-72869.rb","controls":["V-72869"]},{"id":"V-72865.rb","controls":["V-72865"]},{"id":"V-72867.rb","controls":["V-72867"]},{"id":"V-72871.rb","controls":["V-72871"]},{"id":"V-72877.rb","controls":["V-72877"]},{"id":"V-72873.rb","controls":["V-72873"]},{"id":"V-72875.rb","controls":["V-72875"]},{"id":"V-72891.rb","controls":["V-72891"]},{"id":"V-72883.rb","controls":["V-72883"]},{"id":"V-72855.rb","controls":["V-72855"]},{"id":"V-72887.rb","controls":["V-72887"]},{"id":"V-72889.rb","controls":["V-72889"]},{"id":"V-72845.rb","controls":["V-72845"]},{"id":"V-72901.rb","controls":["V-72901"]},{"id":"V-72895.rb","controls":["V-72895"]},{"id":"V-72897.rb","controls":["V-72897"]},{"id":"V-72899.rb","controls":["V-72899"]},{"id":"V-72903.rb","controls":["V-72903"]},{"id":"V-72905.rb","controls":["V-72907"]},{"id":"V-72977.rb","controls":["V-72977"]},{"id":"V-72909.rb","controls":["V-72909"]},{"id":"V-72913.rb","controls":["V-72913"]},{"id":"V-72915.rb","controls":["V-72915"]},{"id":"V-72863.rb","controls":["V-72863"]},{"id":"V-72919.rb","controls":["V-72919"]},{"id":"V-72921.rb","controls":["V-72921"]},{"id":"V-72923.rb","controls":["V-72923"]},{"id":"V-72925.rb","controls":["V-72925"]},{"id":"V-72927.rb","controls":["V-72927"]},{"id":"V-72929.rb","controls":["V-72929"]},{"id":"V-72931.rb","controls":["V-72931"]},{"id":"V-72933.rb","controls":["V-72933"]},{"id":"V-72939.rb","controls":["V-72939"]},{"id":"V-72941.rb","controls":["V-72941"]},{"id":"V-72945.rb","controls":["V-72945"]},{"id":"V-72947.rb","controls":["V-72947"]},{"id":"V-72949.rb","controls":["V-72949"]},{"id":"V-72893.rb","controls":["V-72893"]},{"id":"V-72953.rb","controls":["V-72953"]},{"id":"V-72955.rb","controls":["V-72955"]},{"id":"V-72957.rb","controls":["V-72957"]},{"id":"V-72959.rb","controls":["V-72959"]},{"id":"V-72961.rb","controls":["V-72961"]},{"id":"V-72963.rb","controls":["V-72963"]},{"id":"V-72965.rb","controls":["V-72965"]},{"id":"V-72969.rb","controls":["V-72969"]},{"id":"V-72971.rb","controls":["V-72971"]},{"id":"V-72973.rb","controls":["V-72973"]},{"id":"V-72975.rb","controls":["V-72975"]},{"id":"V-73039.rb","controls":["V-73039"]},{"id":"V-72979.rb","controls":["V-72979"]},{"id":"V-72981.rb","controls":["V-72981"]},{"id":"V-72997.rb","controls":["V-72997"]},{"id":"V-72861.rb","controls":["V-72861"]},{"id":"V-72987.rb","controls":["V-72987"]},{"id":"V-72989.rb","controls":["V-72989"]},{"id":"V-72991.rb","controls":["V-72991"]},{"id":"V-72993.rb","controls":["V-72993"]},{"id":"V-72995.rb","controls":["V-72995"]},{"id":"V-73013.rb","controls":["V-73013"]},{"id":"V-72999.rb","controls":["V-72999"]},{"id":"V-73001.rb","controls":["V-73001"]},{"id":"V-73003.rb","controls":["V-73003"]},{"id":"V-73005.rb","controls":["V-73005"]},{"id":"V-73007.rb","controls":["V-73007"]},{"id":"V-73009.rb","controls":["V-73009"]},{"id":"V-73011.rb","controls":["V-73011"]},{"id":"V-72951.rb","controls":["V-72951"]},{"id":"V-73015.rb","controls":["V-73015"]},{"id":"V-72985.rb","controls":["V-72985"]},{"id":"V-73019.rb","controls":["V-73019"]},{"id":"V-73071.rb","controls":["V-73071"]},{"id":"V-73023.rb","controls":["V-73023"]},{"id":"V-73025.rb","controls":["V-73025"]},{"id":"V-73027.rb","controls":["V-73027"]},{"id":"V-73029.rb","controls":["V-73029"]},{"id":"V-72911.rb","controls":["V-72911"]},{"id":"V-73033.rb","controls":["V-73033"]},{"id":"V-73035.rb","controls":["V-73035"]},{"id":"V-73037.rb","controls":["V-73037"]},{"id":"V-73041.rb","controls":["V-73041"]},{"id":"V-73031.rb","controls":["V-73031"]},{"id":"V-73047.rb","controls":["V-73047"]},{"id":"V-73051.rb","controls":["V-73051"]},{"id":"V-73053.rb","controls":["V-73053"]},{"id":"V-73055.rb","controls":["V-73055"]},{"id":"V-73057.rb","controls":["V-73057"]},{"id":"V-73059.rb","controls":["V-73059"]},{"id":"V-73061.rb","controls":["V-73061"]},{"id":"V-73063.rb","controls":["V-73063"]},{"id":"V-73065.rb","controls":["V-73065"]},{"id":"V-73067.rb","controls":["V-73067"]},{"id":"V-73069.rb","controls":["V-73069"]},{"id":"V-73123.rb","controls":["V-73123"]},{"id":"V-72847.rb","controls":["V-72847"]},{"id":"V-73045.rb","controls":["V-73045"]},{"id":"V-73043.rb","controls":["V-73043"]},{"id":"V-72841.rb","controls":["V-72841"]},{"id":"V-72843.rb","controls":["V-72843"]},{"id":"V-72849.rb","controls":["V-72849"]},{"id":"V-72851.rb","controls":["V-72851"]},{"id":"V-72853.rb","controls":["V-72853"]},{"id":"V-72857.rb","controls":["V-72857"]},{"id":"V-72859.rb","controls":["V-72859"]},{"id":"V-72885.rb","controls":["V-72885"]},{"id":"V-73049.rb","controls":["V-73049"]},{"id":"V-72917.rb","controls":["V-72917"]},{"id":"V-73021.rb","controls":["V-73021"]},{"id":"V-73017.rb","controls":["V-73017"]}],"controls":[{"id":"V-72983","title":"PostgreSQL must provide audit record generation capability for\n  DoD-defined auditable events within all DBMS/database components.","desc":"Without the capability to generate audit records, it would be\n  difficult to establish, correlate, and investigate the events relating to an\n  incident or identify those responsible for one.\n\n  Audit records can be generated from various components within PostgreSQL\n  (e.g., process, module). Certain specific application functionalities may be\n  audited as well. The list of audited events is the set of events for which\n  audits are to be generated. This set of events is typically a subset of the\n  list of all events for which the system is capable of generating audit records.\n\n  DoD has defined the list of events for which PostgreSQL will provide an\n  audit record generation capability as the following:\n\n  (i) Successful and unsuccessful attempts to access, modify, or delete\n  privileges, security objects, security levels, or categories of information\n  (e.g., classification levels);\n  (ii) Access actions, such as successful and unsuccessful logon attempts,\n  privileged activities, or other system-level access, starting and ending time\n  for user access to the system, concurrent logons from different workstations,\n  successful and unsuccessful accesses to objects, all program initiations, and\n  all direct access to the information system; and\n  (iii) All account creation, modification, disabling, and termination\n  actions.\n\n  Organizations may define additional events requiring continuous or ad hoc\n  auditing.","descriptions":[{"label":"default","data":"Without the capability to generate audit records, it would be\n  difficult to establish, correlate, and investigate the events relating to an\n  incident or identify those responsible for one.\n\n  Audit records can be generated from various components within PostgreSQL\n  (e.g., process, module). Certain specific application functionalities may be\n  audited as well. The list of audited events is the set of events for which\n  audits are to be generated. This set of events is typically a subset of the\n  list of all events for which the system is capable of generating audit records.\n\n  DoD has defined the list of events for which PostgreSQL will provide an\n  audit record generation capability as the following:\n\n  (i) Successful and unsuccessful attempts to access, modify, or delete\n  privileges, security objects, security levels, or categories of information\n  (e.g., classification levels);\n  (ii) Access actions, such as successful and unsuccessful logon attempts,\n  privileged activities, or other system-level access, starting and ending time\n  for user access to the system, concurrent logons from different workstations,\n  successful and unsuccessful accesses to objects, all program initiations, and\n  all direct access to the information system; and\n  (iii) All account creation, modification, disabling, and termination\n  actions.\n\n  Organizations may define additional events requiring continuous or ad hoc\n  auditing."},{"label":"check","data":"Check PostgreSQL auditing to determine whether\n  organization-defined auditable events are being audited by the system.\n\n  If organization-defined auditable events are not being audited, this is a\n  finding."},{"label":"fix","data":"Configure PostgreSQL to generate audit records for at least the DoD\n  minimum set of events.\n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000089-DB-000064","gid":"V-72983","rid":"SV-87635r1_rule","stig_id":"PGS9-00-007400","fix_id":"F-79429r1_fix","cci":["CCI-000169"],"nist":["AU-12 a","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72983\" do\r\n  title \"PostgreSQL must provide audit record generation capability for\r\n  DoD-defined auditable events within all DBMS/database components.\"\r\n  desc  \"Without the capability to generate audit records, it would be\r\n  difficult to establish, correlate, and investigate the events relating to an\r\n  incident or identify those responsible for one.\r\n\r\n  Audit records can be generated from various components within PostgreSQL\r\n  (e.g., process, module). Certain specific application functionalities may be\r\n  audited as well. The list of audited events is the set of events for which\r\n  audits are to be generated. This set of events is typically a subset of the\r\n  list of all events for which the system is capable of generating audit records.\r\n\r\n  DoD has defined the list of events for which PostgreSQL will provide an\r\n  audit record generation capability as the following:\r\n\r\n  (i) Successful and unsuccessful attempts to access, modify, or delete\r\n  privileges, security objects, security levels, or categories of information\r\n  (e.g., classification levels);\r\n  (ii) Access actions, such as successful and unsuccessful logon attempts,\r\n  privileged activities, or other system-level access, starting and ending time\r\n  for user access to the system, concurrent logons from different workstations,\r\n  successful and unsuccessful accesses to objects, all program initiations, and\r\n  all direct access to the information system; and\r\n  (iii) All account creation, modification, disabling, and termination\r\n  actions.\r\n\r\n  Organizations may define additional events requiring continuous or ad hoc\r\n  auditing.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000089-DB-000064\"\r\n  tag \"gid\": \"V-72983\"\r\n  tag \"rid\": \"SV-87635r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-007400\"\r\n  tag \"fix_id\": \"F-79429r1_fix\"\r\n  tag \"cci\": [\"CCI-000169\"]\r\n  tag \"nist\": [\"AU-12 a\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Check PostgreSQL auditing to determine whether\r\n  organization-defined auditable events are being audited by the system.\r\n\r\n  If organization-defined auditable events are not being audited, this is a\r\n  finding.\"\r\n\r\n  desc \"fix\", \"Configure PostgreSQL to generate audit records for at least the DoD\r\n  minimum set of events.\r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging.\"\r\n\r\n  describe \"Check PostgreSQL auditing to determine whether organization-defined auditable events are being audited by the system\" do\r\n    skip \"If organization-defined auditable events are not being audited, this is a finding.\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72983.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Check PostgreSQL auditing to determine whether organization-defined auditable events are being audited by the system","run_time":1.5099e-05,"start_time":"2020-06-19T18:47:21+00:00","resource":"","skip_message":"If organization-defined auditable events are not being audited, this is a finding."}]},{"id":"V-72869","title":"PostgreSQL must associate organization-defined types of security\n  labels having organization-defined security label values with information in\n  storage.","desc":"Without the association of security labels to information, there is no\n  basis for PostgreSQL to make security-related access-control decisions.\n\n  Security labels are abstractions representing the basic properties or\n  characteristics of an entity (e.g., subjects and objects) with respect to\n  safeguarding information.\n\n  These labels are typically associated with internal data structures (e.g.,\n  tables, rows) within the database and are used to enable the implementation of\n  access control and flow control policies, reflect special dissemination,\n  handling or distribution instructions, or support other aspects of the\n  information security policy.\n\n  One example includes marking data as classified or FOUO. These security\n  labels may be assigned manually or during data processing, but, either way, it\n  is imperative these assignments are maintained while the data is in storage. If\n  the security labels are lost when the data is stored, there is the risk of a\n  data compromise.","descriptions":[{"label":"default","data":"Without the association of security labels to information, there is no\n  basis for PostgreSQL to make security-related access-control decisions.\n\n  Security labels are abstractions representing the basic properties or\n  characteristics of an entity (e.g., subjects and objects) with respect to\n  safeguarding information.\n\n  These labels are typically associated with internal data structures (e.g.,\n  tables, rows) within the database and are used to enable the implementation of\n  access control and flow control policies, reflect special dissemination,\n  handling or distribution instructions, or support other aspects of the\n  information security policy.\n\n  One example includes marking data as classified or FOUO. These security\n  labels may be assigned manually or during data processing, but, either way, it\n  is imperative these assignments are maintained while the data is in storage. If\n  the security labels are lost when the data is stored, there is the risk of a\n  data compromise."},{"label":"check","data":"If security labeling is not required, this is not a finding.\n\n  First, as the database administrator (shown here as \"postgres\"), run the\n  following SQL against each table that requires security labels:\n\n  $ sudo su - postgres\n  $ psql -c \"\\d+ <schema_name>.<table_name>\"\n\n  If security labeling is required and the results of the SQL above do not show a\n  policy attached to the table, this is a finding.\n  If security labeling is required and not implemented according to the system\n  documentation, such as SSP, this is a finding.\n\n  If security labeling requirements have been specified, but the security\n  labeling is not implemented or does not reliably maintain labels on information\n  in storage, this is a finding."},{"label":"fix","data":"In addition to the SQL-standard privilege system available through\n  GRANT, tables can have row security policies that restrict, on a per-user\n  basis, which rows can be returned by normal queries or inserted, updated, or\n  deleted by data modification commands. This feature is also known as Row-Level\n  Security (RLS).\n\n  RLS policies can be very different depending on their use case. For one example\n  of using RLS for Security Labels, see supplementary content APPENDIX-D."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000311-DB-000308","gid":"V-72869","rid":"SV-87521r1_rule","stig_id":"PGS9-00-001700","fix_id":"F-79311r1_fix","cci":["CCI-002262"],"nist":["AC-16 a","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72869\" do\r\n  title \"PostgreSQL must associate organization-defined types of security\r\n  labels having organization-defined security label values with information in\r\n  storage.\"\r\n  desc  \"Without the association of security labels to information, there is no\r\n  basis for PostgreSQL to make security-related access-control decisions.\r\n\r\n  Security labels are abstractions representing the basic properties or\r\n  characteristics of an entity (e.g., subjects and objects) with respect to\r\n  safeguarding information.\r\n\r\n  These labels are typically associated with internal data structures (e.g.,\r\n  tables, rows) within the database and are used to enable the implementation of\r\n  access control and flow control policies, reflect special dissemination,\r\n  handling or distribution instructions, or support other aspects of the\r\n  information security policy.\r\n\r\n  One example includes marking data as classified or FOUO. These security\r\n  labels may be assigned manually or during data processing, but, either way, it\r\n  is imperative these assignments are maintained while the data is in storage. If\r\n  the security labels are lost when the data is stored, there is the risk of a\r\n  data compromise.\"\r\n  \r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000311-DB-000308\"\r\n  tag \"gid\": \"V-72869\"\r\n  tag \"rid\": \"SV-87521r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-001700\"\r\n  tag \"fix_id\": \"F-79311r1_fix\"\r\n  tag \"cci\": [\"CCI-002262\"]\r\n  tag \"nist\": [\"AC-16 a\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"If security labeling is not required, this is not a finding.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), run the\r\n  following SQL against each table that requires security labels:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"\\\\d+ <schema_name>.<table_name>\\\"\r\n\r\n  If security labeling is required and the results of the SQL above do not show a\r\n  policy attached to the table, this is a finding.\r\n  If security labeling is required and not implemented according to the system\r\n  documentation, such as SSP, this is a finding.\r\n\r\n  If security labeling requirements have been specified, but the security\r\n  labeling is not implemented or does not reliably maintain labels on information\r\n  in storage, this is a finding.\"\r\n\r\n  desc \"fix\", \"In addition to the SQL-standard privilege system available through\r\n  GRANT, tables can have row security policies that restrict, on a per-user\r\n  basis, which rows can be returned by normal queries or inserted, updated, or\r\n  deleted by data modification commands. This feature is also known as Row-Level\r\n  Security (RLS).\r\n\r\n  RLS policies can be very different depending on their use case. For one example\r\n  of using RLS for Security Labels, see supplementary content APPENDIX-D.\"\r\n\r\n  describe \"Check security labeling is implemented according to the system documentation\" do\r\n    skip \"If security labeling is required if a policy is not attaced to the table, this is a finding.\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72869.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Check security labeling is implemented according to the system documentation","run_time":4.271e-06,"start_time":"2020-06-19T18:47:21+00:00","resource":"","skip_message":"If security labeling is required if a policy is not attaced to the table, this is a finding."}]},{"id":"V-72865","title":"The role(s)/group(s) used to modify database structure (including but\n  not necessarily limited to tables, indexes, storage, etc.) and logic modules\n  (functions, trigger procedures, links to software external to PostgreSQL, etc.)\n  must be restricted to authorized users.","desc":"If PostgreSQL were to allow any user to make changes to database\n  structure or logic, those changes might be implemented without undergoing the\n  appropriate testing and approvals that are part of a robust change management\n  process.\n\n  Accordingly, only qualified and authorized individuals must be allowed to\n  obtain access to information system components for purposes of initiating\n  changes, including upgrades and modifications.\n\n  Unmanaged changes that occur to the database software libraries or\n  configuration can lead to unauthorized or compromised installations.","descriptions":[{"label":"default","data":"If PostgreSQL were to allow any user to make changes to database\n  structure or logic, those changes might be implemented without undergoing the\n  appropriate testing and approvals that are part of a robust change management\n  process.\n\n  Accordingly, only qualified and authorized individuals must be allowed to\n  obtain access to information system components for purposes of initiating\n  changes, including upgrades and modifications.\n\n  Unmanaged changes that occur to the database software libraries or\n  configuration can lead to unauthorized or compromised installations."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  As the database administrator (shown here as \"postgres\"), list all users and\n  their permissions by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"\\dp *.*\"\n\n  Verify that all objects have the correct privileges. If they do not, this is a\n  finding.\n\n  Next, as the database administrator (shown here as \"postgres\"), verify the\n  permissions of the database directory on the filesystem:\n\n  $ ls -la ${PGDATA?}\n\n  If permissions of the database directory are not limited to an authorized user\n  account, this is a finding."},{"label":"fix","data":"As the database administrator, revoke any permissions from a role\n  that are deemed unnecessary by running the following SQL:\n\n  ALTER ROLE bob NOCREATEDB;\n  ALTER ROLE bob NOCREATEROLE;\n  ALTER ROLE bob NOSUPERUSER;\n  ALTER ROLE bob NOINHERIT;\n  REVOKE SELECT ON some_function FROM bob;"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000133-DB-000362","gid":"V-72865","rid":"SV-87517r1_rule","stig_id":"PGS9-00-001300","fix_id":"F-79307r1_fix","cci":["CCI-001499"],"nist":["CM-5 (6)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72865\" do\r\n  title \"The role(s)/group(s) used to modify database structure (including but\r\n  not necessarily limited to tables, indexes, storage, etc.) and logic modules\r\n  (functions, trigger procedures, links to software external to PostgreSQL, etc.)\r\n  must be restricted to authorized users.\"\r\n  desc  \"If PostgreSQL were to allow any user to make changes to database\r\n  structure or logic, those changes might be implemented without undergoing the\r\n  appropriate testing and approvals that are part of a robust change management\r\n  process.\r\n\r\n  Accordingly, only qualified and authorized individuals must be allowed to\r\n  obtain access to information system components for purposes of initiating\r\n  changes, including upgrades and modifications.\r\n\r\n  Unmanaged changes that occur to the database software libraries or\r\n  configuration can lead to unauthorized or compromised installations.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000133-DB-000362\"\r\n  tag \"gid\": \"V-72865\"\r\n  tag \"rid\": \"SV-87517r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-001300\"\r\n  tag \"fix_id\": \"F-79307r1_fix\"\r\n  tag \"cci\": [\"CCI-001499\"]\r\n  tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), list all users and\r\n  their permissions by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"\\\\dp *.*\\\"\r\n\r\n  Verify that all objects have the correct privileges. If they do not, this is a\r\n  finding.\r\n\r\n  Next, as the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  permissions of the database directory on the filesystem:\r\n\r\n  $ ls -la ${PGDATA?}\r\n\r\n  If permissions of the database directory are not limited to an authorized user\r\n  account, this is a finding.\"\r\n\r\n  desc \"fix\", \"As the database administrator, revoke any permissions from a role\r\n  that are deemed unnecessary by running the following SQL:\r\n\r\n  ALTER ROLE bob NOCREATEDB;\r\n  ALTER ROLE bob NOCREATEROLE;\r\n  ALTER ROLE bob NOSUPERUSER;\r\n  ALTER ROLE bob NOINHERIT;\r\n  REVOKE SELECT ON some_function FROM bob;\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  authorized_owners = pg_superusers\r\n  owners = authorized_owners.join('|')\r\n\r\n  object_granted_privileges = 'arwdDxtU'\r\n  object_public_privileges = 'r'\r\n  object_acl = \"^((((#{owners})=[#{object_granted_privileges}]+|\"\\\r\n    \"=[#{object_public_privileges}]+)\\/\\\\w+,?)+|)\\\\|\"\r\n  object_acl_regex = Regexp.new(object_acl)\r\n\r\n  pg_settings_acl = \"^((((#{owners})=[#{object_granted_privileges}]+|\"\\\r\n    \"=rw)\\/\\\\w+,?)+)\\\\|pg_catalog\\\\|pg_settings\\\\|v\"\r\n  pg_settings_acl_regex = Regexp.new(pg_settings_acl)\r\n\r\n  tested = []\r\n  objects_sql = \"SELECT n.nspname, c.relname, c.relkind \"\\\r\n    \"FROM pg_catalog.pg_class c \"\\\r\n    \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\r\n    \"WHERE c.relkind IN ('r', 'v', 'm', 'S', 'f');\"\r\n\r\n  databases_sql = 'SELECT datname FROM pg_catalog.pg_database where not datistemplate;'\r\n  databases_query = sql.query(databases_sql, [pg_db])\r\n  databases = databases_query.lines\r\n\r\n  databases.each do |database|\r\n    rows = sql.query(objects_sql, [database])\r\n    if rows.methods.include?(:output) # Handle connection disabled on database\r\n      objects = rows.lines\r\n\r\n      objects.each do |obj|\r\n        unless tested.include?(obj)\r\n          schema, object, type = obj.split('|')\r\n          relacl_sql = \"SELECT pg_catalog.array_to_string(c.relacl, E','), \"\\\r\n            \"n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c \"\\\r\n            \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\r\n            \"WHERE n.nspname = '#{schema}' AND c.relname = '#{object}' \"\\\r\n            \"AND c.relkind = '#{type}';\"\r\n\r\n          sql_result=sql.query(relacl_sql, [database])\r\n\r\n          describe.one do\r\n            describe sql_result do\r\n              its('output') { should match object_acl_regex }\r\n            end\r\n\r\n            describe sql_result do\r\n              its('output') { should match pg_settings_acl_regex }\r\n            end\r\n          end\r\n          # TODO: Add test for column acl\r\n          tested.push(obj)\r\n        end\r\n      end\r\n    end\r\n  end\r\n\r\n  describe directory(pg_data_dir) do\r\n    it { should be_directory }\r\n    it { should be_owned_by pg_owner }\r\n    its('mode') { should cmp '0700' }\r\n  end\r\nend\r\n","source_location":{"line":17,"ref":"controls/V-72865.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_statistic' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000182827,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_type' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000897484,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_authid' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000105526,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_shadow' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000105836,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_roles' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.2027e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'public' AND c.relname = 'test' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000116184,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_settings' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=rw)\\/\\w+,?)+)\\|pg_catalog\\|pg_settings\\|v/","run_time":0.000840407,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_file_settings' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.3547e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_config' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.9723e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_rules' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.2697e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_user_mapping' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.0542e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_xact_user_functions' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.1862e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_replication_origin_status' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000111992,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_archiver' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000242548,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_bgwriter' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000920764,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_attribute' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000110775,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_proc' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.5872e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_class' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.9832e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_attrdef' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.9848e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_constraint' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.4572e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_inherits' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.1758e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_index' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.5038e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_operator' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000566397,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_opfamily' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000115104,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_opclass' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.2935e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_am' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000617672,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_amop' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.2453e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_amproc' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.814e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_language' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000796784,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_largeobject_metadata' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.1246e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_aggregate' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.9809e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_rewrite' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.001327419,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_progress_vacuum' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.0193e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_user_mappings' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.9865e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_largeobject' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000110794,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_trigger' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.8122e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_event_trigger' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000704674,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_description' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.7548e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_cast' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.4724e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_enum' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.8307e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_namespace' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.3037e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_conversion' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000608039,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_depend' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.431e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_database' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.907e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_db_role_setting' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.6355e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_tablespace' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.7354e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_pltemplate' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.6648e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_auth_members' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.0159e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_shdepend' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.0318e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_shdescription' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000100912,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_ts_config' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.1695e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_ts_config_map' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.587e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_ts_dict' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000110834,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_ts_parser' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.6427e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_ts_template' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000656635,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_extension' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.294e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_foreign_data_wrapper' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.1323e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_foreign_server' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.6293e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_foreign_table' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.438e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_policy' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.28e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_replication_origin' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.2173e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_default_acl' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.9601e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_init_privs' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.775e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_seclabel' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000103843,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_shseclabel' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.1517e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_collation' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000108037,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_range' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.5687e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_transform' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000113647,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_group' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000643492,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_user' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000103976,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_policies' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.4046e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_views' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000598411,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.637e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_matviews' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.9899e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_indexes' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000551081,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stats' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.7339e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_locks' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.9223e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_cursors' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.6986e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_available_extensions' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000101051,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_available_extension_versions' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.3262e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_prepared_xacts' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.0173e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_prepared_statements' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000137664,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_seclabels' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000715483,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_xact_all_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000168447,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_timezone_abbrevs' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000155481,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_timezone_names' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000156784,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_sys_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000167694,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_all_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000154847,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_xact_sys_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000857274,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_user_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000118707,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_xact_user_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.3061e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_statio_all_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000661321,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_statio_sys_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.6508e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_statio_user_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.6298e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_all_indexes' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000107936,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_sys_indexes' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.5714e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_user_indexes' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000105341,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_statio_all_indexes' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000108879,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_statio_sys_indexes' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.8822e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_statio_user_indexes' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.4255e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_statio_all_sequences' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000130383,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_statio_sys_sequences' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.3841e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_statio_user_sequences' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000711308,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_activity' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.2395e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_replication' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.5665e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_wal_receiver' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.4879e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_ssl' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000112952,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_replication_slots' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000106909,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_database' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.9904e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_database_conflicts' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000110502,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'pg_catalog' AND c.relname = 'pg_stat_user_functions' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.3174e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'routine_privileges' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000133123,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'information_schema_catalog_name' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.8142e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'columns' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000108559,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'applicable_roles' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000676377,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'administrable_role_authorizations' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000102336,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'key_column_usage' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.0526e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'attributes' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000129947,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'constraint_column_usage' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000113423,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'character_sets' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.7093e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'check_constraint_routine_usage' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.9939e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'check_constraints' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000111184,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'constraint_table_usage' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.6478e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'collations' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.9723e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'collation_character_set_applicability' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.8949e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'column_domain_usage' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000107736,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'domain_constraints' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.4092e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'column_privileges' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000111749,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'column_udt_usage' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.5812e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'parameters' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000828128,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'domain_udt_usage' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.0959e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'domains' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.8308e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'sequences' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000115383,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'enabled_roles' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.4935e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'referential_constraints' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.5679e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'role_routine_grants' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000974513,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'role_column_grants' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000126717,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'schemata' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.9596e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'routines' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000573908,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'sql_features' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000109583,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'sql_implementation_info' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.8031e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'triggered_update_columns' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000110629,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'sql_languages' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.2192e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'sql_packages' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.7808e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'sql_parts' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000596751,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'view_table_usage' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.4095e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'sql_sizing' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.7866e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'triggers' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000590102,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'sql_sizing_profiles' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.00010339,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'table_constraints' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000111883,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'user_defined_types' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.0104e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'table_privileges' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000122517,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'udt_privileges' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.6528e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'role_table_grants' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.2651e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000114637,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'transforms' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000102224,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'role_udt_grants' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.1805e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'view_column_usage' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.9844e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'usage_privileges' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.6839e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'role_usage_grants' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.564e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'data_type_privileges' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.8489e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'view_routine_usage' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.71e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'views' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000637963,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = '_pg_foreign_table_columns' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.2644e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'element_types' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.8473e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = '_pg_foreign_data_wrappers' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.8284e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'column_options' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.2659e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'foreign_data_wrapper_options' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.973e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'foreign_data_wrappers' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.1517e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = '_pg_foreign_servers' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.4686e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'foreign_server_options' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.6889e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'foreign_servers' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.4712e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = '_pg_foreign_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.4796e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'foreign_table_options' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.9432e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'foreign_tables' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000117076,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = '_pg_user_mappings' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.485e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'user_mapping_options' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.7911e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'information_schema' AND c.relname = 'user_mappings' AND c.relkind = 'v'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":7.4643e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'test_schema' AND c.relname = 'test_table' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":8.6549e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data is expected to be directory","run_time":0.031298252,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data is expected to be owned by \"postgres\"","run_time":0.028932719,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"failed","code_desc":"Directory /var/lib/pgsql/data mode is expected to cmp == \"0700\"","run_time":0.002021824,"start_time":"2020-06-19T18:47:21+00:00","message":"\nexpected: 0700\n     got: 0755\n\n(compared using `cmp` matcher)\n"}]},{"id":"V-72867","title":"PostgreSQL must uniquely identify and authenticate non-organizational\n  users (or processes acting on behalf of non-organizational users).","desc":"Non-organizational users include all information system users other\n  than organizational users, which includes organizational employees or\n  individuals the organization deems to have equivalent status of employees\n  (e.g., contractors, guest researchers, individuals from allied nations).\n\n  Non-organizational users must be uniquely identified and authenticated for\n  all accesses other than those accesses explicitly identified and documented by\n  the organization when related to the use of anonymous access, such as accessing\n  a web server.\n\n  Accordingly, a risk assessment is used in determining the authentication\n  needs of the organization.\n\n  Scalability, practicality, and security are simultaneously considered in\n  balancing the need to ensure ease of use for access to federal information and\n  information systems with the need to protect and adequately mitigate risk to\n  organizational operations, organizational assets, individuals, other\n  organizations, and the Nation.","descriptions":[{"label":"default","data":"Non-organizational users include all information system users other\n  than organizational users, which includes organizational employees or\n  individuals the organization deems to have equivalent status of employees\n  (e.g., contractors, guest researchers, individuals from allied nations).\n\n  Non-organizational users must be uniquely identified and authenticated for\n  all accesses other than those accesses explicitly identified and documented by\n  the organization when related to the use of anonymous access, such as accessing\n  a web server.\n\n  Accordingly, a risk assessment is used in determining the authentication\n  needs of the organization.\n\n  Scalability, practicality, and security are simultaneously considered in\n  balancing the need to ensure ease of use for access to federal information and\n  information systems with the need to protect and adequately mitigate risk to\n  organizational operations, organizational assets, individuals, other\n  organizations, and the Nation."},{"label":"check","data":"PostgreSQL uniquely identifies and authenticates PostgreSQL users\n  through the use of DBMS roles.\n\n  To list all roles in the database, as the database administrator (shown here as\n  \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"\\du\"\n\n  If users are not uniquely identified as per organizational documentation, this\n  is a finding."},{"label":"fix","data":"To drop a role, as the database administrator (shown here as\n  \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"DROP ROLE <role_to_drop>\"\n\n  To create a role, as the database administrator, run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE <role name> LOGIN\"\n\n  For the complete list of permissions allowed by roles, see the official\n  documentation:\n  https://www.postgresql.org/docs/current/static/sql-createrole.html"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000180-DB-000115","gid":"V-72867","rid":"SV-87519r1_rule","stig_id":"PGS9-00-001400","fix_id":"F-79309r1_fix","cci":["CCI-000804"],"nist":["IA-8","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72867\" do\r\n  title \"PostgreSQL must uniquely identify and authenticate non-organizational\r\n  users (or processes acting on behalf of non-organizational users).\"\r\n  desc  \"Non-organizational users include all information system users other\r\n  than organizational users, which includes organizational employees or\r\n  individuals the organization deems to have equivalent status of employees\r\n  (e.g., contractors, guest researchers, individuals from allied nations).\r\n\r\n  Non-organizational users must be uniquely identified and authenticated for\r\n  all accesses other than those accesses explicitly identified and documented by\r\n  the organization when related to the use of anonymous access, such as accessing\r\n  a web server.\r\n\r\n  Accordingly, a risk assessment is used in determining the authentication\r\n  needs of the organization.\r\n\r\n  Scalability, practicality, and security are simultaneously considered in\r\n  balancing the need to ensure ease of use for access to federal information and\r\n  information systems with the need to protect and adequately mitigate risk to\r\n  organizational operations, organizational assets, individuals, other\r\n  organizations, and the Nation.\"\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000180-DB-000115\"\r\n  tag \"gid\": \"V-72867\"\r\n  tag \"rid\": \"SV-87519r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-001400\"\r\n  tag \"fix_id\": \"F-79309r1_fix\"\r\n  tag \"cci\": [\"CCI-000804\"]\r\n  tag \"nist\": [\"IA-8\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"PostgreSQL uniquely identifies and authenticates PostgreSQL users\r\n  through the use of DBMS roles.\r\n\r\n  To list all roles in the database, as the database administrator (shown here as\r\n  \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"\\\\du\\\"\r\n\r\n  If users are not uniquely identified as per organizational documentation, this\r\n  is a finding.\"\r\n\r\n  desc \"fix\", \"To drop a role, as the database administrator (shown here as\r\n  \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"DROP ROLE <role_to_drop>\\\"\r\n\r\n  To create a role, as the database administrator, run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"CREATE ROLE <role name> LOGIN\\\"\r\n\r\n  For the complete list of permissions allowed by roles, see the official\r\n  documentation:\r\n  https://www.postgresql.org/docs/current/static/sql-createrole.html\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  authorized_roles = pg_superusers\r\n\r\n  roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r where r.rolsuper;'\r\n  describe sql.query(roles_sql, [pg_db]) do\r\n    its('lines.sort') { should cmp authorized_roles.sort }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72867.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolname FROM pg_catalog.pg_roles r where r.rolsuper; lines.sort is expected to cmp == [\"postgres\"]","run_time":0.000192427,"start_time":"2020-06-19T18:47:21+00:00"}]},{"id":"V-72871","title":"PostgreSQL must check the validity of all data inputs except those\n  specifically identified by the organization.","desc":"Invalid user input occurs when a user inserts data or characters into\n  an application's data entry fields and the application is unprepared to process\n  that data. This results in unanticipated application behavior, potentially\n  leading to an application or information system compromise. Invalid user input\n  is one of the primary methods employed when attempting to compromise an\n  application.\n\n  With respect to database management systems, one class of threat is known\n  as SQL Injection, or more generally, code injection. It takes advantage of the\n  dynamic execution capabilities of various programming languages, including\n  dialects of SQL. Potentially, the attacker can gain unauthorized access to\n  data, including security settings, and severely corrupt or destroy the database.\n\n  Even when no such hijacking takes place, invalid input that gets recorded\n  in the database, whether accidental or malicious, reduces the reliability and\n  usability of the system. Available protections include data types, referential\n  constraints, uniqueness constraints, range checking, and application-specific\n  logic. Application-specific logic can be implemented within the database in\n  stored procedures and triggers, where appropriate.\n\n  This calls for inspection of application source code, which will require\n  collaboration with the application developers. It is recognized that in many\n  cases, the database administrator (DBA) is organizationally separate from the\n  application developers, and may have limited, if any, access to source code.\n  Nevertheless, protections of this type are so important to the secure operation\n  of databases that they must not be ignored. At a minimum, the DBA must attempt\n  to obtain assurances from the development organization that this issue has been\n  addressed, and must document what has been discovered.","descriptions":[{"label":"default","data":"Invalid user input occurs when a user inserts data or characters into\n  an application's data entry fields and the application is unprepared to process\n  that data. This results in unanticipated application behavior, potentially\n  leading to an application or information system compromise. Invalid user input\n  is one of the primary methods employed when attempting to compromise an\n  application.\n\n  With respect to database management systems, one class of threat is known\n  as SQL Injection, or more generally, code injection. It takes advantage of the\n  dynamic execution capabilities of various programming languages, including\n  dialects of SQL. Potentially, the attacker can gain unauthorized access to\n  data, including security settings, and severely corrupt or destroy the database.\n\n  Even when no such hijacking takes place, invalid input that gets recorded\n  in the database, whether accidental or malicious, reduces the reliability and\n  usability of the system. Available protections include data types, referential\n  constraints, uniqueness constraints, range checking, and application-specific\n  logic. Application-specific logic can be implemented within the database in\n  stored procedures and triggers, where appropriate.\n\n  This calls for inspection of application source code, which will require\n  collaboration with the application developers. It is recognized that in many\n  cases, the database administrator (DBA) is organizationally separate from the\n  application developers, and may have limited, if any, access to source code.\n  Nevertheless, protections of this type are so important to the secure operation\n  of databases that they must not be ignored. At a minimum, the DBA must attempt\n  to obtain assurances from the development organization that this issue has been\n  addressed, and must document what has been discovered."},{"label":"check","data":"Review PostgreSQL code (trigger procedures, functions),\n  application code, settings, column and field definitions, and constraints to\n  determine whether the database is protected against invalid input.\n\n  If code exists that allows invalid data to be acted upon or input into the\n  database, this is a finding.\n\n  If column/field definitions do not exist in the database, this is a finding.\n\n  If columns/fields do not contain constraints and validity checking where\n  required, this is a finding.\n\n  Where a column/field is noted in the system documentation as necessarily\n  free-form, even though its name and context suggest that it should be strongly\n  typed and constrained, the absence of these protections is not a finding.\n\n  Where a column/field is clearly identified by name, caption or context as\n  Notes, Comments, Description, Text, etc., the absence of these protections is\n  not a finding.\n\n  Check application code that interacts with PostgreSQL for the use of prepared\n  statements. If prepared statements are not used, this is a finding."},{"label":"fix","data":"Modify database code to properly validate data before it is put\n  into the database or acted upon by the database.\n\n  Modify the database to contain constraints and validity checking on database\n  columns and tables that require them for data integrity.\n\n  Use prepared statements when taking user input.\n\n  Do not allow general users direct console access to PostgreSQL."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000251-DB-000160","gid":"V-72871","rid":"SV-87523r1_rule","stig_id":"PGS9-00-001800","fix_id":"F-79313r1_fix","cci":["CCI-001310"],"nist":["SI-10","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72871\" do\r\n  title \"PostgreSQL must check the validity of all data inputs except those\r\n  specifically identified by the organization.\"\r\n  desc  \"Invalid user input occurs when a user inserts data or characters into\r\n  an application's data entry fields and the application is unprepared to process\r\n  that data. This results in unanticipated application behavior, potentially\r\n  leading to an application or information system compromise. Invalid user input\r\n  is one of the primary methods employed when attempting to compromise an\r\n  application.\r\n\r\n  With respect to database management systems, one class of threat is known\r\n  as SQL Injection, or more generally, code injection. It takes advantage of the\r\n  dynamic execution capabilities of various programming languages, including\r\n  dialects of SQL. Potentially, the attacker can gain unauthorized access to\r\n  data, including security settings, and severely corrupt or destroy the database.\r\n\r\n  Even when no such hijacking takes place, invalid input that gets recorded\r\n  in the database, whether accidental or malicious, reduces the reliability and\r\n  usability of the system. Available protections include data types, referential\r\n  constraints, uniqueness constraints, range checking, and application-specific\r\n  logic. Application-specific logic can be implemented within the database in\r\n  stored procedures and triggers, where appropriate.\r\n\r\n  This calls for inspection of application source code, which will require\r\n  collaboration with the application developers. It is recognized that in many\r\n  cases, the database administrator (DBA) is organizationally separate from the\r\n  application developers, and may have limited, if any, access to source code.\r\n  Nevertheless, protections of this type are so important to the secure operation\r\n  of databases that they must not be ignored. At a minimum, the DBA must attempt\r\n  to obtain assurances from the development organization that this issue has been\r\n  addressed, and must document what has been discovered.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000251-DB-000160\"\r\n  tag \"gid\": \"V-72871\"\r\n  tag \"rid\": \"SV-87523r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-001800\"\r\n  tag \"fix_id\": \"F-79313r1_fix\"\r\n  tag \"cci\": [\"CCI-001310\"]\r\n  tag \"nist\": [\"SI-10\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review PostgreSQL code (trigger procedures, functions),\r\n  application code, settings, column and field definitions, and constraints to\r\n  determine whether the database is protected against invalid input.\r\n\r\n  If code exists that allows invalid data to be acted upon or input into the\r\n  database, this is a finding.\r\n\r\n  If column/field definitions do not exist in the database, this is a finding.\r\n\r\n  If columns/fields do not contain constraints and validity checking where\r\n  required, this is a finding.\r\n\r\n  Where a column/field is noted in the system documentation as necessarily\r\n  free-form, even though its name and context suggest that it should be strongly\r\n  typed and constrained, the absence of these protections is not a finding.\r\n\r\n  Where a column/field is clearly identified by name, caption or context as\r\n  Notes, Comments, Description, Text, etc., the absence of these protections is\r\n  not a finding.\r\n\r\n  Check application code that interacts with PostgreSQL for the use of prepared\r\n  statements. If prepared statements are not used, this is a finding.\"\r\n\r\n  desc \"fix\", \"Modify database code to properly validate data before it is put\r\n  into the database or acted upon by the database.\r\n\r\n  Modify the database to contain constraints and validity checking on database\r\n  columns and tables that require them for data integrity.\r\n\r\n  Use prepared statements when taking user input.\r\n\r\n  Do not allow general users direct console access to PostgreSQL.\"\r\n\r\n  describe \"Review PostgreSQL code (trigger procedures, functions), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input.\" do\r\n    skip \"If code exists that allows invalid data to be acted upon or input into the database, this is a finding. Check application code that interacts with PostgreSQL for the use of prepared statements.\"\r\n    skip \"If column/field definitions do not exist in the database, this is a finding.\"\r\n    skip \"If columns/fields do not contain constraints and validity checking where required, this is a finding.\"\r\n    skip \"If prepared statements are not used, this is a finding.\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72871.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Review PostgreSQL code (trigger procedures, functions), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input.","run_time":6.708e-06,"start_time":"2020-06-19T18:47:21+00:00","resource":"","skip_message":"If code exists that allows invalid data to be acted upon or input into the database, this is a finding. Check application code that interacts with PostgreSQL for the use of prepared statements."},{"status":"skipped","code_desc":"Review PostgreSQL code (trigger procedures, functions), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input.","run_time":4.231e-06,"start_time":"2020-06-19T18:47:21+00:00","resource":"","skip_message":"If column/field definitions do not exist in the database, this is a finding."},{"status":"skipped","code_desc":"Review PostgreSQL code (trigger procedures, functions), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input.","run_time":2.861e-06,"start_time":"2020-06-19T18:47:21+00:00","resource":"","skip_message":"If columns/fields do not contain constraints and validity checking where required, this is a finding."},{"status":"skipped","code_desc":"Review PostgreSQL code (trigger procedures, functions), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input.","run_time":2.73e-06,"start_time":"2020-06-19T18:47:21+00:00","resource":"","skip_message":"If prepared statements are not used, this is a finding."}]},{"id":"V-72877","title":"PostgreSQL must allocate audit record storage capacity in accordance\n  with organization-defined audit record storage requirements.","desc":"In order to ensure sufficient storage capacity for the audit logs,\n  PostgreSQL must be able to allocate audit record storage capacity. Although\n  another requirement (SRG-APP-000515-DB-000318) mandates that audit data be\n  off-loaded to a centralized log management system, it remains necessary to\n  provide space on the database server to serve as a buffer against outages and\n  capacity limits of the off-loading mechanism.\n\n  The task of allocating audit record storage capacity is usually performed\n  during initial installation of PostgreSQL and is closely associated with the\n  DBA and system administrator roles. The DBA or system administrator will\n  usually coordinate the allocation of physical drive space with the application\n  owner/installer and the application will prompt the installer to provide the\n  capacity information, the physical location of the disk, or both.\n\n  In determining the capacity requirements, consider such factors as: total\n  number of users; expected number of concurrent users during busy periods;\n  number and type of events being monitored; types and amounts of data being\n  captured; the frequency/speed with which audit records are off-loaded to the\n  central log management system; and any limitations that exist on PostgreSQL's\n  ability to reuse the space formerly occupied by off-loaded records.","descriptions":[{"label":"default","data":"In order to ensure sufficient storage capacity for the audit logs,\n  PostgreSQL must be able to allocate audit record storage capacity. Although\n  another requirement (SRG-APP-000515-DB-000318) mandates that audit data be\n  off-loaded to a centralized log management system, it remains necessary to\n  provide space on the database server to serve as a buffer against outages and\n  capacity limits of the off-loading mechanism.\n\n  The task of allocating audit record storage capacity is usually performed\n  during initial installation of PostgreSQL and is closely associated with the\n  DBA and system administrator roles. The DBA or system administrator will\n  usually coordinate the allocation of physical drive space with the application\n  owner/installer and the application will prompt the installer to provide the\n  capacity information, the physical location of the disk, or both.\n\n  In determining the capacity requirements, consider such factors as: total\n  number of users; expected number of concurrent users during busy periods;\n  number and type of events being monitored; types and amounts of data being\n  captured; the frequency/speed with which audit records are off-loaded to the\n  central log management system; and any limitations that exist on PostgreSQL's\n  ability to reuse the space formerly occupied by off-loaded records."},{"label":"check","data":"Investigate whether there have been any incidents where\n  PostgreSQL ran out of audit log space since the last time the space was\n  allocated or other corrective measures were taken.\n\n  If there have been incidents where PostgreSQL ran out of audit log space, this\n  is a finding."},{"label":"fix","data":"Allocate sufficient audit file/table space to support peak demand."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000357-DB-000316","gid":"V-72877","rid":"SV-87529r1_rule","stig_id":"PGS9-00-002100","fix_id":"F-79319r1_fix","cci":["CCI-001849"],"nist":["AU-4","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72877\" do\r\n  title \"PostgreSQL must allocate audit record storage capacity in accordance\r\n  with organization-defined audit record storage requirements.\"\r\n  desc  \"In order to ensure sufficient storage capacity for the audit logs,\r\n  PostgreSQL must be able to allocate audit record storage capacity. Although\r\n  another requirement (SRG-APP-000515-DB-000318) mandates that audit data be\r\n  off-loaded to a centralized log management system, it remains necessary to\r\n  provide space on the database server to serve as a buffer against outages and\r\n  capacity limits of the off-loading mechanism.\r\n\r\n  The task of allocating audit record storage capacity is usually performed\r\n  during initial installation of PostgreSQL and is closely associated with the\r\n  DBA and system administrator roles. The DBA or system administrator will\r\n  usually coordinate the allocation of physical drive space with the application\r\n  owner/installer and the application will prompt the installer to provide the\r\n  capacity information, the physical location of the disk, or both.\r\n\r\n  In determining the capacity requirements, consider such factors as: total\r\n  number of users; expected number of concurrent users during busy periods;\r\n  number and type of events being monitored; types and amounts of data being\r\n  captured; the frequency/speed with which audit records are off-loaded to the\r\n  central log management system; and any limitations that exist on PostgreSQL's\r\n  ability to reuse the space formerly occupied by off-loaded records.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000357-DB-000316\"\r\n  tag \"gid\": \"V-72877\"\r\n  tag \"rid\": \"SV-87529r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-002100\"\r\n  tag \"fix_id\": \"F-79319r1_fix\"\r\n  tag \"cci\": [\"CCI-001849\"]\r\n  tag \"nist\": [\"AU-4\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Investigate whether there have been any incidents where\r\n  PostgreSQL ran out of audit log space since the last time the space was\r\n  allocated or other corrective measures were taken.\r\n\r\n  If there have been incidents where PostgreSQL ran out of audit log space, this\r\n  is a finding.\"\r\n  desc \"fix\", \"Allocate sufficient audit file/table space to support peak demand.\"\r\n\r\n  describe \"PostgreSQL must allocate audit record storage capacity in accordance\r\n  with organization-defined audit record storage requirements.\" do\r\n    skip \"Investigate whether there have been any incidents where PostgreSQL ran out of \r\n    audit log space since the last time the space was allocated or other corrective measures were taken.\r\n    If there have been incidents where PostgreSQL ran out of audit log space, this is a finding.\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72877.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"PostgreSQL must allocate audit record storage capacity in accordance\n  with organization-defined audit record storage requirements.","run_time":3.374e-06,"start_time":"2020-06-19T18:47:21+00:00","resource":"","skip_message":"Investigate whether there have been any incidents where PostgreSQL ran out of \n    audit log space since the last time the space was allocated or other corrective measures were taken.\n    If there have been incidents where PostgreSQL ran out of audit log space, this is a finding."}]},{"id":"V-72873","title":"PostgreSQL and associated applications must reserve the use of dynamic\n  code execution for situations that require it.","desc":"With respect to database management systems, one class of threat is\n  known as SQL Injection, or more generally, code injection. It takes advantage\n  of the dynamic execution capabilities of various programming languages,\n  including dialects of SQL. In such cases, the attacker deduces the manner in\n  which SQL statements are being processed, either from inside knowledge or by\n  observing system behavior in response to invalid inputs. When the attacker\n  identifies scenarios where SQL queries are being assembled by application code\n  (which may be within the database or separate from it) and executed\n  dynamically, the attacker is then able to craft input strings that subvert the\n  intent of the query. Potentially, the attacker can gain unauthorized access to\n  data, including security settings, and severely corrupt or destroy the database.\n  The principal protection against code injection is not to use dynamic execution\n  except where it provides necessary functionality that cannot be utilized\n  otherwise. Use strongly typed data items rather than general-purpose strings\n  as input parameters to task-specific, pre-compiled stored procedures and \n  functions (and triggers). This calls for inspection of application source code,\n  which will require collaboration with the application developers. It is recognized\n  that in many cases, the database administrator (DBA) is organizationally separate \n  from the application developers, and may have limited, if any, access to source code. \n  Nevertheless, protections of this type are so important to the secure operation of databases \n  that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from \n  the development organization that this issue has been addressed, and must document what has \n  been discovered.","descriptions":[{"label":"default","data":"With respect to database management systems, one class of threat is\n  known as SQL Injection, or more generally, code injection. It takes advantage\n  of the dynamic execution capabilities of various programming languages,\n  including dialects of SQL. In such cases, the attacker deduces the manner in\n  which SQL statements are being processed, either from inside knowledge or by\n  observing system behavior in response to invalid inputs. When the attacker\n  identifies scenarios where SQL queries are being assembled by application code\n  (which may be within the database or separate from it) and executed\n  dynamically, the attacker is then able to craft input strings that subvert the\n  intent of the query. Potentially, the attacker can gain unauthorized access to\n  data, including security settings, and severely corrupt or destroy the database.\n  The principal protection against code injection is not to use dynamic execution\n  except where it provides necessary functionality that cannot be utilized\n  otherwise. Use strongly typed data items rather than general-purpose strings\n  as input parameters to task-specific, pre-compiled stored procedures and \n  functions (and triggers). This calls for inspection of application source code,\n  which will require collaboration with the application developers. It is recognized\n  that in many cases, the database administrator (DBA) is organizationally separate \n  from the application developers, and may have limited, if any, access to source code. \n  Nevertheless, protections of this type are so important to the secure operation of databases \n  that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from \n  the development organization that this issue has been addressed, and must document what has \n  been discovered."},{"label":"check","data":"Review PostgreSQL source code (trigger procedures, functions)\n  and application source code, to identify cases of dynamic code execution. Any\n  user input should be handled through prepared statements.\n  If dynamic code execution is employed in circumstances where the objective\n  could practically be satisfied by static execution with strongly typed\n  parameters, this is a finding."},{"label":"fix","data":"Where dynamic code execution is employed in circumstances where\n  the objective could practically be satisfied by static execution with strongly\n  typed parameters, modify the code to do so."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000251-DB-000391","gid":"V-72873","rid":"\tSV-87545r2_rule","stig_id":"PGS9-00-002700","fix_id":"F-79335r2_fix","cci":["CCI-001310"],"nist":["SI-10","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72873\" do\r\n  title \"PostgreSQL and associated applications must reserve the use of dynamic\r\n  code execution for situations that require it.\"\r\n  desc  \"With respect to database management systems, one class of threat is\r\n  known as SQL Injection, or more generally, code injection. It takes advantage\r\n  of the dynamic execution capabilities of various programming languages,\r\n  including dialects of SQL. In such cases, the attacker deduces the manner in\r\n  which SQL statements are being processed, either from inside knowledge or by\r\n  observing system behavior in response to invalid inputs. When the attacker\r\n  identifies scenarios where SQL queries are being assembled by application code\r\n  (which may be within the database or separate from it) and executed\r\n  dynamically, the attacker is then able to craft input strings that subvert the\r\n  intent of the query. Potentially, the attacker can gain unauthorized access to\r\n  data, including security settings, and severely corrupt or destroy the database.\r\n  The principal protection against code injection is not to use dynamic execution\r\n  except where it provides necessary functionality that cannot be utilized\r\n  otherwise. Use strongly typed data items rather than general-purpose strings\r\n  as input parameters to task-specific, pre-compiled stored procedures and \r\n  functions (and triggers). This calls for inspection of application source code,\r\n  which will require collaboration with the application developers. It is recognized\r\n  that in many cases, the database administrator (DBA) is organizationally separate \r\n  from the application developers, and may have limited, if any, access to source code. \r\n  Nevertheless, protections of this type are so important to the secure operation of databases \r\n  that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from \r\n  the development organization that this issue has been addressed, and must document what has \r\n  been discovered.\"\r\n  \r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000251-DB-000391\"\r\n  tag \"gid\": \"V-72873\"\r\n  tag \"rid\": \"\tSV-87545r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-002700\"\r\n  tag \"fix_id\": \"F-79335r2_fix\"\r\n  tag \"cci\": [\"CCI-001310\"]\r\n  tag \"nist\": [\"SI-10\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review PostgreSQL source code (trigger procedures, functions)\r\n  and application source code, to identify cases of dynamic code execution. Any\r\n  user input should be handled through prepared statements.\r\n  If dynamic code execution is employed in circumstances where the objective\r\n  could practically be satisfied by static execution with strongly typed\r\n  parameters, this is a finding.\"\r\n  desc \"fix\", \"Where dynamic code execution is employed in circumstances where\r\n  the objective could practically be satisfied by static execution with strongly\r\n  typed parameters, modify the code to do so.\"\r\n\r\n  describe \"PostgreSQL and associated applications must reserve the use of dynamic code \r\n  execution for situations that require it.\" do\r\n    skip \"If dynamic code execution is employed in circumstances where the objective could \r\n    practically be satisfied by static execution with strongly typed parameters, this is a finding.\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72873.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"PostgreSQL and associated applications must reserve the use of dynamic code \n  execution for situations that require it.","run_time":3.325e-06,"start_time":"2020-06-19T18:47:21+00:00","resource":"","skip_message":"If dynamic code execution is employed in circumstances where the objective could \n    practically be satisfied by static execution with strongly typed parameters, this is a finding."}]},{"id":"V-72875","title":"PostgreSQL and associated applications, when making use of dynamic\n  code execution, must scan input data for invalid values that may indicate a\n  code injection attack.","desc":"With respect to database management systems, one class of threat is\n  known as SQL Injection, or more generally, code injection. It takes advantage\n  of the dynamic execution capabilities of various programming languages,\n  including dialects of SQL. In such cases, the attacker deduces the manner in\n  which SQL statements are being processed, either from inside knowledge or by\n  observing system behavior in response to invalid inputs. When the attacker\n  identifies scenarios where SQL queries are being assembled by application code\n  (which may be within the database or separate from it) and executed\n  dynamically, the attacker is then able to craft input strings that subvert the\n  intent of the query. Potentially, the attacker can gain unauthorized access to\n  data, including security settings, and severely corrupt or destroy the database.\n\n      The principal protection against code injection is not to use dynamic\n  execution except where it provides necessary functionality that cannot be\n  utilized otherwise. Use strongly typed data items rather than general-purpose\n  strings as input parameters to task-specific, pre-compiled stored procedures\n  and functions (and triggers).\n\n  When dynamic execution is necessary, ways to mitigate the risk include the\n  following, which should be implemented both in the on-screen application and at\n  the database level, in the stored procedures:\n      -- Allow strings as input only when necessary.\n      -- Rely on data typing to validate numbers, dates, etc. Do not accept\n  invalid values. If substituting other values for them, think carefully about\n  whether this could be subverted.\n      -- Limit the size of input strings to what is truly necessary.\n      -- If single quotes/apostrophes, double quotes, semicolons, equals signs,\n  angle brackets, or square brackets will never be valid as input, reject them.\n      -- If comment markers will never be valid as input, reject them. In SQL,\n  these are -- or /* */\n      -- If HTML and XML tags, entities, comments, etc., will never be valid,\n  reject them.\n      -- If wildcards are present, reject them unless truly necessary. In SQL\n  these are the underscore and the percentage sign, and the word ESCAPE is also a\n  clue that wildcards are in use.\n      -- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER,\n  DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject\n  them. Use case-insensitive comparisons when searching for these. Bear in mind\n  that some of these words, particularly Grant (as a person's name), could also\n  be valid input.\n  -- If there are range limits on the values that may be entered, enforce\n  those limits.\n      -- Institute procedures for inspection of programs for correct use of\n  dynamic coding, by a party other than the developer.\n      -- Conduct rigorous testing of program modules that use dynamic coding,\n  searching for ways to subvert the intended use.\n      -- Record the inspection and testing in the system documentation.\n      -- Bear in mind that all this applies not only to screen input, but also to\n  the values in an incoming message to a web service or to a stored procedure\n  called by a software component that has not itself been hardened in these ways.\n  Not only can the caller be subject to such vulnerabilities; it may itself be\n  the attacker.","descriptions":[{"label":"default","data":"With respect to database management systems, one class of threat is\n  known as SQL Injection, or more generally, code injection. It takes advantage\n  of the dynamic execution capabilities of various programming languages,\n  including dialects of SQL. In such cases, the attacker deduces the manner in\n  which SQL statements are being processed, either from inside knowledge or by\n  observing system behavior in response to invalid inputs. When the attacker\n  identifies scenarios where SQL queries are being assembled by application code\n  (which may be within the database or separate from it) and executed\n  dynamically, the attacker is then able to craft input strings that subvert the\n  intent of the query. Potentially, the attacker can gain unauthorized access to\n  data, including security settings, and severely corrupt or destroy the database.\n\n      The principal protection against code injection is not to use dynamic\n  execution except where it provides necessary functionality that cannot be\n  utilized otherwise. Use strongly typed data items rather than general-purpose\n  strings as input parameters to task-specific, pre-compiled stored procedures\n  and functions (and triggers).\n\n  When dynamic execution is necessary, ways to mitigate the risk include the\n  following, which should be implemented both in the on-screen application and at\n  the database level, in the stored procedures:\n      -- Allow strings as input only when necessary.\n      -- Rely on data typing to validate numbers, dates, etc. Do not accept\n  invalid values. If substituting other values for them, think carefully about\n  whether this could be subverted.\n      -- Limit the size of input strings to what is truly necessary.\n      -- If single quotes/apostrophes, double quotes, semicolons, equals signs,\n  angle brackets, or square brackets will never be valid as input, reject them.\n      -- If comment markers will never be valid as input, reject them. In SQL,\n  these are -- or /* */\n      -- If HTML and XML tags, entities, comments, etc., will never be valid,\n  reject them.\n      -- If wildcards are present, reject them unless truly necessary. In SQL\n  these are the underscore and the percentage sign, and the word ESCAPE is also a\n  clue that wildcards are in use.\n      -- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER,\n  DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject\n  them. Use case-insensitive comparisons when searching for these. Bear in mind\n  that some of these words, particularly Grant (as a person's name), could also\n  be valid input.\n  -- If there are range limits on the values that may be entered, enforce\n  those limits.\n      -- Institute procedures for inspection of programs for correct use of\n  dynamic coding, by a party other than the developer.\n      -- Conduct rigorous testing of program modules that use dynamic coding,\n  searching for ways to subvert the intended use.\n      -- Record the inspection and testing in the system documentation.\n      -- Bear in mind that all this applies not only to screen input, but also to\n  the values in an incoming message to a web service or to a stored procedure\n  called by a software component that has not itself been hardened in these ways.\n  Not only can the caller be subject to such vulnerabilities; it may itself be\n  the attacker."},{"label":"check","data":"Review PostgreSQL source code (trigger procedures, functions) and\n  application source code to identify cases of dynamic code execution.\n  If dynamic code execution is eployed without protective measures against code\n  injection, this is a finding."},{"label":"fix","data":"Where dynamic code execution is used, modify the code to implement\n  protections against code injection (IE: prepared statements)."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000251-DB-000392","gid":"V-72875","rid":"SV-87527r1_rule","stig_id":"PGS9-00-002000","fix_id":"F-79317r1_fix","cci":["CCI-001310"],"nist":["SI-10","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72875\" do\r\n  title \"PostgreSQL and associated applications, when making use of dynamic\r\n  code execution, must scan input data for invalid values that may indicate a\r\n  code injection attack.\"\r\n  desc  \"With respect to database management systems, one class of threat is\r\n  known as SQL Injection, or more generally, code injection. It takes advantage\r\n  of the dynamic execution capabilities of various programming languages,\r\n  including dialects of SQL. In such cases, the attacker deduces the manner in\r\n  which SQL statements are being processed, either from inside knowledge or by\r\n  observing system behavior in response to invalid inputs. When the attacker\r\n  identifies scenarios where SQL queries are being assembled by application code\r\n  (which may be within the database or separate from it) and executed\r\n  dynamically, the attacker is then able to craft input strings that subvert the\r\n  intent of the query. Potentially, the attacker can gain unauthorized access to\r\n  data, including security settings, and severely corrupt or destroy the database.\r\n\r\n      The principal protection against code injection is not to use dynamic\r\n  execution except where it provides necessary functionality that cannot be\r\n  utilized otherwise. Use strongly typed data items rather than general-purpose\r\n  strings as input parameters to task-specific, pre-compiled stored procedures\r\n  and functions (and triggers).\r\n\r\n  When dynamic execution is necessary, ways to mitigate the risk include the\r\n  following, which should be implemented both in the on-screen application and at\r\n  the database level, in the stored procedures:\r\n      -- Allow strings as input only when necessary.\r\n      -- Rely on data typing to validate numbers, dates, etc. Do not accept\r\n  invalid values. If substituting other values for them, think carefully about\r\n  whether this could be subverted.\r\n      -- Limit the size of input strings to what is truly necessary.\r\n      -- If single quotes/apostrophes, double quotes, semicolons, equals signs,\r\n  angle brackets, or square brackets will never be valid as input, reject them.\r\n      -- If comment markers will never be valid as input, reject them. In SQL,\r\n  these are -- or /* */\r\n      -- If HTML and XML tags, entities, comments, etc., will never be valid,\r\n  reject them.\r\n      -- If wildcards are present, reject them unless truly necessary. In SQL\r\n  these are the underscore and the percentage sign, and the word ESCAPE is also a\r\n  clue that wildcards are in use.\r\n      -- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER,\r\n  DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject\r\n  them. Use case-insensitive comparisons when searching for these. Bear in mind\r\n  that some of these words, particularly Grant (as a person's name), could also\r\n  be valid input.\r\n  -- If there are range limits on the values that may be entered, enforce\r\n  those limits.\r\n      -- Institute procedures for inspection of programs for correct use of\r\n  dynamic coding, by a party other than the developer.\r\n      -- Conduct rigorous testing of program modules that use dynamic coding,\r\n  searching for ways to subvert the intended use.\r\n      -- Record the inspection and testing in the system documentation.\r\n      -- Bear in mind that all this applies not only to screen input, but also to\r\n  the values in an incoming message to a web service or to a stored procedure\r\n  called by a software component that has not itself been hardened in these ways.\r\n  Not only can the caller be subject to such vulnerabilities; it may itself be\r\n  the attacker.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000251-DB-000392\"\r\n  tag \"gid\": \"V-72875\"\r\n  tag \"rid\": \"SV-87527r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-002000\"\r\n  tag \"fix_id\": \"F-79317r1_fix\"\r\n  tag \"cci\": [\"CCI-001310\"]\r\n  tag \"nist\": [\"SI-10\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review PostgreSQL source code (trigger procedures, functions) and\r\n  application source code to identify cases of dynamic code execution.\r\n  If dynamic code execution is eployed without protective measures against code\r\n  injection, this is a finding.\"\r\n  desc \"fix\", \"Where dynamic code execution is used, modify the code to implement\r\n  protections against code injection (IE: prepared statements).\"\r\n\r\n  describe \"PostgreSQL and associated applications, when making use of dynamic code execution, must scan input data for invalid values that \r\n  may indicate a code injection attack.\" do\r\n    skip \"Review PostgreSQL source code (trigger procedures, functions) and application source code to identify cases of dynamic code execution.\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72875.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"PostgreSQL and associated applications, when making use of dynamic code execution, must scan input data for invalid values that \n  may indicate a code injection attack.","run_time":3.276e-06,"start_time":"2020-06-19T18:47:21+00:00","resource":"","skip_message":"Review PostgreSQL source code (trigger procedures, functions) and application source code to identify cases of dynamic code execution."}]},{"id":"V-72891","title":"PostgreSQL must allow only the ISSM (or individuals or roles appointed\n  by the ISSM) to select which auditable events are to be audited.","desc":"Without the capability to restrict which roles and individuals can\n  select which events are audited, unauthorized personnel may be able to prevent\n  or interfere with the auditing of critical events.\n\n  Suppression of auditing could permit an adversary to evade detection.\n\n  Misconfigured audits can degrade the system's performance by overwhelming\n  the audit log. Misconfigured audits may also make it more difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.","descriptions":[{"label":"default","data":"Without the capability to restrict which roles and individuals can\n  select which events are audited, unauthorized personnel may be able to prevent\n  or interfere with the auditing of critical events.\n\n  Suppression of auditing could permit an adversary to evade detection.\n\n  Misconfigured audits can degrade the system's performance by overwhelming\n  the audit log. Misconfigured audits may also make it more difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  Check PostgreSQL settings and documentation to determine whether designated\n  personnel are able to select which auditable events are being audited.\n\n  As the database administrator (shown here as \"postgres\"), verify the\n  permissions for PGDATA:\n\n  $ ls -la ${PGDATA?}\n\n  If anything in PGDATA is not owned by the database administrator, this is a\n  finding.\n\n  Next, as the database administrator, run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"\\du\"\n\n  Review the role permissions, if any role is listed as superuser but should not\n  have that access, this is a finding."},{"label":"fix","data":"Configure PostgreSQL's settings to allow designated personnel to\n  select which auditable events are audited.\n\n  Using pgaudit allows administrators the flexibility to choose what they log.\n  For an overview of the capabilities of pgaudit, see\n  https://github.com/pgaudit/pgaudit.\n\n  See supplementary content APPENDIX-B for documentation on installing pgaudit.\n\n  See supplementary content APPENDIX-C for instructions on enabling logging. Only\n  administrators/superuser can change PostgreSQL configurations. Access to the\n  database administrator must be limited to designated personnel only.\n\n  To ensure that postgresql.conf is owned by the database owner:\n\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 600 ${PGDATA?}/postgresql.conf"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000090-DB-000065","gid":"V-72891","rid":"SV-87543r1_rule","stig_id":"PGS9-00-002600","fix_id":"F-79333r1_fix","cci":["CCI-000171"],"nist":["AU-12 b","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72891\" do\r\n  title \"PostgreSQL must allow only the ISSM (or individuals or roles appointed\r\n  by the ISSM) to select which auditable events are to be audited.\"\r\n  desc  \"Without the capability to restrict which roles and individuals can\r\n  select which events are audited, unauthorized personnel may be able to prevent\r\n  or interfere with the auditing of critical events.\r\n\r\n  Suppression of auditing could permit an adversary to evade detection.\r\n\r\n  Misconfigured audits can degrade the system's performance by overwhelming\r\n  the audit log. Misconfigured audits may also make it more difficult to\r\n  establish, correlate, and investigate the events relating to an incident or\r\n  identify those responsible for one.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000090-DB-000065\"\r\n  tag \"gid\": \"V-72891\"\r\n  tag \"rid\": \"SV-87543r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-002600\"\r\n  tag \"fix_id\": \"F-79333r1_fix\"\r\n  tag \"cci\": [\"CCI-000171\"]\r\n  tag \"nist\": [\"AU-12 b\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  Check PostgreSQL settings and documentation to determine whether designated\r\n  personnel are able to select which auditable events are being audited.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  permissions for PGDATA:\r\n\r\n  $ ls -la ${PGDATA?}\r\n\r\n  If anything in PGDATA is not owned by the database administrator, this is a\r\n  finding.\r\n\r\n  Next, as the database administrator, run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"\\\\du\\\"\r\n\r\n  Review the role permissions, if any role is listed as superuser but should not\r\n  have that access, this is a finding.\"\r\n\r\n  desc \"fix\", \"Configure PostgreSQL's settings to allow designated personnel to\r\n  select which auditable events are audited.\r\n\r\n  Using pgaudit allows administrators the flexibility to choose what they log.\r\n  For an overview of the capabilities of pgaudit, see\r\n  https://github.com/pgaudit/pgaudit.\r\n\r\n  See supplementary content APPENDIX-B for documentation on installing pgaudit.\r\n\r\n  See supplementary content APPENDIX-C for instructions on enabling logging. Only\r\n  administrators/superuser can change PostgreSQL configurations. Access to the\r\n  database administrator must be limited to designated personnel only.\r\n\r\n  To ensure that postgresql.conf is owned by the database owner:\r\n\r\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\r\n  $ chmod 600 ${PGDATA?}/postgresql.conf\"\r\n\r\n  describe directory(pg_data_dir) do\r\n    it { should be_directory }\r\n    it { should be_owned_by pg_owner }\r\n    its('mode') { should cmp '0700' }\r\n  end\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r;'\r\n  roles_query = sql.query(roles_sql, [pg_db])\r\n  roles = roles_query.lines\r\n\r\n  roles.each do |role|\r\n    unless pg_superusers.include?(role)\r\n      superuser_sql = \"SELECT r.rolsuper FROM pg_catalog.pg_roles r \"\\\r\n        \"WHERE r.rolname = '#{role}';\"\r\n\r\n      describe sql.query(superuser_sql, [pg_db]) do\r\n        its('output') { should_not eq 't' }\r\n      end\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72891.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Directory /var/lib/pgsql/data is expected to be directory","run_time":0.007470708,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data is expected to be owned by \"postgres\"","run_time":0.008061725,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"failed","code_desc":"Directory /var/lib/pgsql/data mode is expected to cmp == \"0700\"","run_time":0.000335794,"start_time":"2020-06-19T18:47:21+00:00","message":"\nexpected: 0700\n     got: 0755\n\n(compared using `cmp` matcher)\n"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'pg_signal_backend'; output is expected not to eq \"t\"","run_time":0.000237857,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'bob'; output is expected not to eq \"t\"","run_time":0.000130082,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'fooaudit'; output is expected not to eq \"t\"","run_time":0.000112399,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'test'; output is expected not to eq \"t\"","run_time":0.000852216,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'user'; output is expected not to eq \"t\"","run_time":0.000214496,"start_time":"2020-06-19T18:47:21+00:00"}]},{"id":"V-72883","title":"PostgreSQL must enforce discretionary access control policies, as\n  defined by the data owner, over defined subjects and objects.","desc":"Discretionary Access Control (DAC) is based on the notion that\n  individual users are \"owners\" of objects and therefore have discretion over\n  who should be authorized to access the object and in which mode (e.g., read or\n  write). Ownership is usually acquired as a consequence of creating the object\n  or via specified ownership assignment. DAC allows the owner to determine who\n  will have access to objects they control. An example of DAC includes\n  user-controlled table permissions.\n\n  When discretionary access control policies are implemented, subjects are\n  not constrained with regard to what actions they can take with information for\n  which they have already been granted access. Thus, subjects that have been\n  granted access to information are not prevented from passing (i.e., the\n  subjects have the discretion to pass) the information to other subjects or\n  objects.\n\n  A subject that is constrained in its operation by Mandatory Access Control\n  policies is still able to operate under the less rigorous constraints of this\n  requirement. Thus, while Mandatory Access Control imposes constraints\n  preventing a subject from passing information to another subject operating at a\n  different sensitivity level, this requirement permits the subject to pass the\n  information to any subject at the same sensitivity level.\n\n  The policy is bounded by the information system boundary. Once the\n  information is passed outside of the control of the information system,\n  additional means may be required to ensure the constraints remain in effect.\n  While the older, more traditional definitions of discretionary access control\n  require identity-based access control, that limitation is not required for this\n  use of discretionary access control.","descriptions":[{"label":"default","data":"Discretionary Access Control (DAC) is based on the notion that\n  individual users are \"owners\" of objects and therefore have discretion over\n  who should be authorized to access the object and in which mode (e.g., read or\n  write). Ownership is usually acquired as a consequence of creating the object\n  or via specified ownership assignment. DAC allows the owner to determine who\n  will have access to objects they control. An example of DAC includes\n  user-controlled table permissions.\n\n  When discretionary access control policies are implemented, subjects are\n  not constrained with regard to what actions they can take with information for\n  which they have already been granted access. Thus, subjects that have been\n  granted access to information are not prevented from passing (i.e., the\n  subjects have the discretion to pass) the information to other subjects or\n  objects.\n\n  A subject that is constrained in its operation by Mandatory Access Control\n  policies is still able to operate under the less rigorous constraints of this\n  requirement. Thus, while Mandatory Access Control imposes constraints\n  preventing a subject from passing information to another subject operating at a\n  different sensitivity level, this requirement permits the subject to pass the\n  information to any subject at the same sensitivity level.\n\n  The policy is bounded by the information system boundary. Once the\n  information is passed outside of the control of the information system,\n  additional means may be required to ensure the constraints remain in effect.\n  While the older, more traditional definitions of discretionary access control\n  require identity-based access control, that limitation is not required for this\n  use of discretionary access control."},{"label":"check","data":"Review system documentation to identify the required\n  discretionary access control (DAC).\n\n  Review the security configuration of the database and PostgreSQL. If\n  applicable, review the security configuration of the application(s) using the\n  database.\n\n  If the discretionary access control defined in the documentation is not\n  implemented in the security configuration, this is a finding.\n\n  If any database objects are found to be owned by users not authorized to own\n  database objects, this is a finding.\n\n  To check the ownership of objects in the database, as the database\n  administrator, run the following:\n\n  $ sudo su - postgres\n  $ psql -c \"\\dn *.*\"\n  $ psql -c \"\\dt *.*\"\n  $ psql -c \"\\ds *.*\"\n  $ psql -c \"\\dv *.*\"\n  $ psql -c \"\\df+ *.*\"\n\n  If any role is given privileges to objects it should not have, this is a\n  finding."},{"label":"fix","data":"Implement the organization's DAC policy in the security\n  configuration of the database and PostgreSQL, and, if applicable, the security\n  configuration of the application(s) using the database.\n\n  To GRANT privileges to roles, as the database administrator (shown here as\n  \"postgres\"), run statements like the following examples:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE SCHEMA test\"\n  $ psql -c \"GRANT CREATE ON SCHEMA test TO bob\"\n  $ psql -c \"CREATE TABLE test.test_table(id INT)\"\n  $ psql -c \"GRANT SELECT ON TABLE test.test_table TO bob\"\n\n  To REVOKE privileges to roles, as the database administrator (shown here as\n  \"postgres\"), run statements like the following examples:\n\n  $ psql -c \"REVOKE SELECT ON TABLE test.test_table FROM bob\"\n  $ psql -c \"REVOKE CREATE ON SCHEMA test FROM bob\""}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000328-DB-000301","gid":"V-72883","rid":"SV-87535r1_rule","stig_id":"PGS9-00-002200","fix_id":"F-79325r2_fix","cci":["CCI-002165"],"nist":["AC-3 (4)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72883\" do\r\n  title \"PostgreSQL must enforce discretionary access control policies, as\r\n  defined by the data owner, over defined subjects and objects.\"\r\n  desc  \"Discretionary Access Control (DAC) is based on the notion that\r\n  individual users are \\\"owners\\\" of objects and therefore have discretion over\r\n  who should be authorized to access the object and in which mode (e.g., read or\r\n  write). Ownership is usually acquired as a consequence of creating the object\r\n  or via specified ownership assignment. DAC allows the owner to determine who\r\n  will have access to objects they control. An example of DAC includes\r\n  user-controlled table permissions.\r\n\r\n  When discretionary access control policies are implemented, subjects are\r\n  not constrained with regard to what actions they can take with information for\r\n  which they have already been granted access. Thus, subjects that have been\r\n  granted access to information are not prevented from passing (i.e., the\r\n  subjects have the discretion to pass) the information to other subjects or\r\n  objects.\r\n\r\n  A subject that is constrained in its operation by Mandatory Access Control\r\n  policies is still able to operate under the less rigorous constraints of this\r\n  requirement. Thus, while Mandatory Access Control imposes constraints\r\n  preventing a subject from passing information to another subject operating at a\r\n  different sensitivity level, this requirement permits the subject to pass the\r\n  information to any subject at the same sensitivity level.\r\n\r\n  The policy is bounded by the information system boundary. Once the\r\n  information is passed outside of the control of the information system,\r\n  additional means may be required to ensure the constraints remain in effect.\r\n  While the older, more traditional definitions of discretionary access control\r\n  require identity-based access control, that limitation is not required for this\r\n  use of discretionary access control.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000328-DB-000301\"\r\n  tag \"gid\": \"V-72883\"\r\n  tag \"rid\": \"SV-87535r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-002200\"\r\n  tag \"fix_id\": \"F-79325r2_fix\"\r\n  tag \"cci\": [\"CCI-002165\"]\r\n  tag \"nist\": [\"AC-3 (4)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review system documentation to identify the required\r\n  discretionary access control (DAC).\r\n\r\n  Review the security configuration of the database and PostgreSQL. If\r\n  applicable, review the security configuration of the application(s) using the\r\n  database.\r\n\r\n  If the discretionary access control defined in the documentation is not\r\n  implemented in the security configuration, this is a finding.\r\n\r\n  If any database objects are found to be owned by users not authorized to own\r\n  database objects, this is a finding.\r\n\r\n  To check the ownership of objects in the database, as the database\r\n  administrator, run the following:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"\\\\dn *.*\\\"\r\n  $ psql -c \\\"\\\\dt *.*\\\"\r\n  $ psql -c \\\"\\\\ds *.*\\\"\r\n  $ psql -c \\\"\\\\dv *.*\\\"\r\n  $ psql -c \\\"\\\\df+ *.*\\\"\r\n\r\n  If any role is given privileges to objects it should not have, this is a\r\n  finding.\"\r\n    desc \"fix\", \"Implement the organization's DAC policy in the security\r\n  configuration of the database and PostgreSQL, and, if applicable, the security\r\n  configuration of the application(s) using the database.\r\n\r\n  To GRANT privileges to roles, as the database administrator (shown here as\r\n  \\\"postgres\\\"), run statements like the following examples:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"CREATE SCHEMA test\\\"\r\n  $ psql -c \\\"GRANT CREATE ON SCHEMA test TO bob\\\"\r\n  $ psql -c \\\"CREATE TABLE test.test_table(id INT)\\\"\r\n  $ psql -c \\\"GRANT SELECT ON TABLE test.test_table TO bob\\\"\r\n\r\n  To REVOKE privileges to roles, as the database administrator (shown here as\r\n  \\\"postgres\\\"), run statements like the following examples:\r\n\r\n  $ psql -c \\\"REVOKE SELECT ON TABLE test.test_table FROM bob\\\"\r\n  $ psql -c \\\"REVOKE CREATE ON SCHEMA test FROM bob\\\"\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  authorized_owners = pg_superusers\r\n\r\n  databases_sql = \"SELECT datname FROM pg_catalog.pg_database where datname = '#{pg_db}';\"\r\n  databases_query = sql.query(databases_sql, [pg_db])\r\n  databases = databases_query.lines\r\n  types = %w(t s v) # tables, sequences views\r\n\r\n  databases.each do |database|\r\n    schemas_sql = ''\r\n    functions_sql = ''\r\n\r\n    if database == 'postgres'\r\n      schemas_sql = \"SELECT n.nspname, pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"FROM pg_catalog.pg_namespace n \"\\\r\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}';\"\r\n      functions_sql = \"SELECT n.nspname, p.proname, \"\\\r\n        \"pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"FROM pg_catalog.pg_proc p \"\\\r\n        \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace \"\\\r\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}';\"\r\n    else\r\n      schemas_sql = \"SELECT n.nspname, pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"FROM pg_catalog.pg_namespace n \"\\\r\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) \"\\\r\n        \"AND n.nspname !~ '^pg_' AND n.nspname <> 'information_schema';\"\r\n      functions_sql = \"SELECT n.nspname, p.proname, \"\\\r\n        \"pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"FROM pg_catalog.pg_proc p \"\\\r\n        \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace \"\\\r\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) \"\\\r\n        \"AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema';\"\r\n    end\r\n\r\n    connection_error = \"FATAL:\\\\s+database \\\"#{database}\\\" is not currently \"\\\r\n      \"accepting connections\"\r\n    connection_error_regex = Regexp.new(connection_error)\r\n    \r\n    sql_result=sql.query(schemas_sql, [database])\r\n\r\n    describe.one do\r\n      describe sql_result do\r\n        its('output') { should eq '' }\r\n      end\r\n\r\n      describe sql_result do\r\n        it { should match connection_error_regex }\r\n      end\r\n    end\r\n\r\n    sql_result=sql.query(functions_sql, [database])\r\n\r\n    describe.one do\r\n      describe sql_result do\r\n        its('output') { should eq '' }\r\n      end\r\n\r\n      describe sql_result do\r\n        it { should match connection_error_regex }\r\n      end\r\n    end\r\n\r\n    types.each do |type|\r\n      objects_sql = ''\r\n\r\n      if database == 'postgres'\r\n        objects_sql = \"SELECT n.nspname, c.relname, c.relkind, \"\\\r\n          \"pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c \"\\\r\n          \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\r\n          \"WHERE c.relkind IN ('#{type}','s','') \"\\\r\n          \"AND pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}' \"\r\n          \"AND n.nspname !~ '^pg_toast';\"\r\n      else\r\n        objects_sql = \"SELECT n.nspname, c.relname, c.relkind, \"\\\r\n          \"pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c \"\\\r\n          \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\r\n          \"WHERE c.relkind IN ('#{type}','s','') \"\\\r\n          \"AND pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n          \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) \"\\\r\n          \"AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema'\"\\\r\n          \" AND n.nspname !~ '^pg_toast';\"\r\n      end\r\n\r\n      sql_result=sql.query(objects_sql, [database])\r\n\r\n      describe.one do\r\n        describe sql_result do\r\n          its('output') { should eq '' }\r\n        end\r\n\r\n        describe sql_result do\r\n          it { should match connection_error_regex }\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":13,"ref":"controls/V-72883.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_namespace n WHERE pg_catalog.pg_get_userbyid(n.nspowner) NOT IN ('postgres') AND n.nspname !~ '^pg_' AND n.nspname <> 'information_schema'; output is expected to eq \"\"","run_time":8.4456e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, p.proname, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_proc p LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE pg_catalog.pg_get_userbyid(n.nspowner) NOT IN ('postgres') AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema'; output is expected to eq \"\"","run_time":7.2279e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, c.relname, c.relkind, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('t','s','') AND pg_catalog.pg_get_userbyid(n.nspowner) NOT IN ('postgres') AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema' AND n.nspname !~ '^pg_toast'; output is expected to eq \"\"","run_time":8.9148e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, c.relname, c.relkind, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('s','s','') AND pg_catalog.pg_get_userbyid(n.nspowner) NOT IN ('postgres') AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema' AND n.nspname !~ '^pg_toast'; output is expected to eq \"\"","run_time":7.4073e-05,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, c.relname, c.relkind, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('v','s','') AND pg_catalog.pg_get_userbyid(n.nspowner) NOT IN ('postgres') AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema' AND n.nspname !~ '^pg_toast'; output is expected to eq \"\"","run_time":7.552e-05,"start_time":"2020-06-19T18:47:21+00:00"}]},{"id":"V-72855","title":"PostgreSQL must limit privileges to change functions and triggers, and\n  links to software external to PostgreSQL.","desc":"If the system were to allow any user to make changes to software\n  libraries, those changes might be implemented without undergoing the\n  appropriate testing and approvals that are part of a robust change management\n  process.\n\n  Accordingly, only qualified and authorized individuals must be allowed to\n  obtain access to information system components for purposes of initiating\n  changes, including upgrades and modifications.\n\n  Unmanaged changes that occur to the database code can lead to unauthorized\n  or compromised installations.","descriptions":[{"label":"default","data":"If the system were to allow any user to make changes to software\n  libraries, those changes might be implemented without undergoing the\n  appropriate testing and approvals that are part of a robust change management\n  process.\n\n  Accordingly, only qualified and authorized individuals must be allowed to\n  obtain access to information system components for purposes of initiating\n  changes, including upgrades and modifications.\n\n  Unmanaged changes that occur to the database code can lead to unauthorized\n  or compromised installations."},{"label":"check","data":"Only owners of objects can change them. To view all functions,\n  triggers, and trigger procedures, their ownership and source, as the database\n  administrator (shown here as \"postgres\") run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -x -c \"\\df+\"\n\n  Only the OS database owner user (shown here as \"postgres\") or a PostgreSQL\n  superuser can change links to external software. As the database administrator\n  (shown here as \"postgres\"), check the permissions of configuration files for\n  the database:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}\n\n  If any files are not owned by the database owner or have permissions allowing\n  others to modify (write) configuration files, this is a finding."},{"label":"fix","data":"To change ownership of an object, as the database administrator\n  (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su – postgres\n  $ psql -c \"ALTER FUNCTION function_name OWNER TO new_role_name\"\n\n  To change ownership of postgresql.conf, as the database administrator (shown\n  here as \"postgres\"), run the following commands:\n\n  $ sudo su - postgres\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 0600 ${PGDATA?}/postgresql.conf\n\n  To remove superuser from a role, as the database administrator (shown here as\n  \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"ALTER ROLE rolename WITH NOSUPERUSER\""}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000133-DB-000179","gid":"V-72855","rid":"SV-87507r1_rule","stig_id":"PGS9-00-000710","fix_id":"F-79297r1_fix","cci":["CCI-001499"],"nist":["CM-5 (6)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72855\" do\r\n  title \"PostgreSQL must limit privileges to change functions and triggers, and\r\n  links to software external to PostgreSQL.\"\r\n  desc  \"If the system were to allow any user to make changes to software\r\n  libraries, those changes might be implemented without undergoing the\r\n  appropriate testing and approvals that are part of a robust change management\r\n  process.\r\n\r\n  Accordingly, only qualified and authorized individuals must be allowed to\r\n  obtain access to information system components for purposes of initiating\r\n  changes, including upgrades and modifications.\r\n\r\n  Unmanaged changes that occur to the database code can lead to unauthorized\r\n  or compromised installations.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000133-DB-000179\"\r\n  tag \"gid\": \"V-72855\"\r\n  tag \"rid\": \"SV-87507r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-000710\"\r\n  tag \"fix_id\": \"F-79297r1_fix\"\r\n  tag \"cci\": [\"CCI-001499\"]\r\n  tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Only owners of objects can change them. To view all functions,\r\n  triggers, and trigger procedures, their ownership and source, as the database\r\n  administrator (shown here as \\\"postgres\\\") run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -x -c \\\"\\\\df+\\\"\r\n\r\n  Only the OS database owner user (shown here as \\\"postgres\\\") or a PostgreSQL\r\n  superuser can change links to external software. As the database administrator\r\n  (shown here as \\\"postgres\\\"), check the permissions of configuration files for\r\n  the database:\r\n\r\n  $ sudo su - postgres\r\n  $ ls -la ${PGDATA?}\r\n\r\n  If any files are not owned by the database owner or have permissions allowing\r\n  others to modify (write) configuration files, this is a finding.\"\r\n    \r\n  desc \"fix\", \"To change ownership of an object, as the database administrator\r\n  (shown here as \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su – postgres\r\n  $ psql -c \\\"ALTER FUNCTION function_name OWNER TO new_role_name\\\"\r\n\r\n  To change ownership of postgresql.conf, as the database administrator (shown\r\n  here as \\\"postgres\\\"), run the following commands:\r\n\r\n  $ sudo su - postgres\r\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\r\n  $ chmod 0600 ${PGDATA?}/postgresql.conf\r\n\r\n  To remove superuser from a role, as the database administrator (shown here as\r\n  \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"ALTER ROLE rolename WITH NOSUPERUSER\\\"\"\r\n\r\n  describe file(pg_conf_file) do\r\n    it { should be_owned_by pg_owner }\r\n    its('mode') { should cmp '0600' }\r\n  end\r\n\r\n  describe file(pg_hba_conf_file) do\r\n    it { should be_owned_by pg_owner }\r\n    its('mode') { should cmp '0600' }\r\n  end\r\n\r\n  describe file(pg_ident_conf_file) do\r\n    it { should be_owned_by pg_owner }\r\n    its('mode') { should cmp '0600' }\r\n  end  \r\nend\r\n","source_location":{"line":10,"ref":"controls/V-72855.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/postgresql.conf is expected to be owned by \"postgres\"","run_time":0.008615664,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/postgresql.conf mode is expected to cmp == \"0600\"","run_time":0.000426111,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_hba.conf is expected to be owned by \"postgres\"","run_time":0.007721808,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_hba.conf mode is expected to cmp == \"0600\"","run_time":0.000976959,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_ident.conf is expected to be owned by \"postgres\"","run_time":0.427717879,"start_time":"2020-06-19T18:47:21+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_ident.conf mode is expected to cmp == \"0600\"","run_time":0.000257852,"start_time":"2020-06-19T18:47:22+00:00"}]},{"id":"V-72887","title":"PostgreSQL must record time stamps, in audit records and application\n  data, that can be mapped to Coordinated Universal Time (UTC, formerly GMT).","desc":"If time stamps are not consistently applied and there is no common\n  time reference, it is difficult to perform forensic analysis.\n\n  Time stamps generated by PostgreSQL must include date and time. Time is\n  commonly expressed in Coordinated Universal Time (UTC), a modern continuation\n  of Greenwich Mean Time (GMT), or local time with an offset from UTC.","descriptions":[{"label":"default","data":"If time stamps are not consistently applied and there is no common\n  time reference, it is difficult to perform forensic analysis.\n\n  Time stamps generated by PostgreSQL must include date and time. Time is\n  commonly expressed in Coordinated Universal Time (UTC), a modern continuation\n  of Greenwich Mean Time (GMT), or local time with an offset from UTC."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  When a PostgreSQL cluster is initialized using initdb, the PostgreSQL cluster\n  will be configured to use the same time zone as the target server.\n\n  As the database administrator (shown here as \"postgres\"), check the current\n  log_timezone setting by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_timezone\"\n\n  log_timezone\n  --------------\n  UTC\n  (1 row)\n\n  If log_timezone is not set to the desired time zone, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To change log_timezone in postgresql.conf to use a different time zone for\n  logs, as the database administrator (shown here as \"postgres\"), run the\n  following: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  log_timezone='UTC' \n\n  Next, restart the database: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000374-DB-000322","gid":"V-72887","rid":"SV-87539r2_rule","stig_id":"PGS9-00-002400","fix_id":"F-79329r4_fix","cci":["CCI-001890"],"nist":["AU-8 b","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72887\" do\r\n  title \"PostgreSQL must record time stamps, in audit records and application\r\n  data, that can be mapped to Coordinated Universal Time (UTC, formerly GMT).\"\r\n  desc  \"If time stamps are not consistently applied and there is no common\r\n  time reference, it is difficult to perform forensic analysis.\r\n\r\n  Time stamps generated by PostgreSQL must include date and time. Time is\r\n  commonly expressed in Coordinated Universal Time (UTC), a modern continuation\r\n  of Greenwich Mean Time (GMT), or local time with an offset from UTC.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000374-DB-000322\"\r\n  tag \"gid\": \"V-72887\"\r\n  tag \"rid\": \"SV-87539r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-002400\"\r\n  tag \"fix_id\": \"F-79329r4_fix\"\r\n  tag \"cci\": [\"CCI-001890\"]\r\n  tag \"nist\": [\"AU-8 b\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  When a PostgreSQL cluster is initialized using initdb, the PostgreSQL cluster\r\n  will be configured to use the same time zone as the target server.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), check the current\r\n  log_timezone setting by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_timezone\\\"\r\n\r\n  log_timezone\r\n  --------------\r\n  UTC\r\n  (1 row)\r\n\r\n  If log_timezone is not set to the desired time zone, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To change log_timezone in postgresql.conf to use a different time zone for\r\n  logs, as the database administrator (shown here as \\\"postgres\\\"), run the\r\n  following: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  log_timezone='UTC' \r\n\r\n  Next, restart the database: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW log_timezone;', [pg_db]) do\r\n    its('output') { should eq pg_timezone }\r\n  end\r\nend\r\n","source_location":{"line":13,"ref":"controls/V-72887.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SHOW log_timezone; output is expected to eq \"UTC\"","run_time":0.001004887,"start_time":"2020-06-19T18:47:22+00:00"}]},{"id":"V-72889","title":"PostgreSQL must reveal detailed error messages only to the ISSO, ISSM,\n    SA and DBA.","desc":"If PostgreSQL provides too much information in error logs and\n    administrative messages to the screen, this could lead to compromise. The\n    structure and content of error messages need to be carefully considered by the\n    organization and development team. The extent to which the information system\n    is able to identify and handle error conditions is guided by organizational\n    policy and operational requirements.\n\n    Some default PostgreSQL error messages can contain information that could\n    aid an attacker in, among others things, identifying the database type, host\n    address, or state of the database. Custom errors may contain sensitive customer\n    information.\n\n    It is important that detailed error messages be visible only to those who\n    are authorized to view them; that general users receive only generalized\n    acknowledgment that errors have occurred; and that these generalized messages\n    appear only when relevant to the user's task. For example, a message along the\n    lines of, \"An error has occurred. Unable to save your changes. If this problem\n    persists, please contact your help desk\" would be relevant. A message such as\n    \"Warning: your transaction generated a large number of page splits\" would\n    likely not be relevant.\n\n    Administrative users authorized to review detailed error messages typically\n    are the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified\n    according to organization-specific needs, with DBA approval.","descriptions":[{"label":"default","data":"If PostgreSQL provides too much information in error logs and\n    administrative messages to the screen, this could lead to compromise. The\n    structure and content of error messages need to be carefully considered by the\n    organization and development team. The extent to which the information system\n    is able to identify and handle error conditions is guided by organizational\n    policy and operational requirements.\n\n    Some default PostgreSQL error messages can contain information that could\n    aid an attacker in, among others things, identifying the database type, host\n    address, or state of the database. Custom errors may contain sensitive customer\n    information.\n\n    It is important that detailed error messages be visible only to those who\n    are authorized to view them; that general users receive only generalized\n    acknowledgment that errors have occurred; and that these generalized messages\n    appear only when relevant to the user's task. For example, a message along the\n    lines of, \"An error has occurred. Unable to save your changes. If this problem\n    persists, please contact your help desk\" would be relevant. A message such as\n    \"Warning: your transaction generated a large number of page splits\" would\n    likely not be relevant.\n\n    Administrative users authorized to review detailed error messages typically\n    are the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified\n    according to organization-specific needs, with DBA approval."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n    variable. See supplementary content APPENDIX-F for instructions on configuring\n    PGDATA. \n\n    Check PostgreSQL settings and custom database code to determine if detailed\n    error messages are ever displayed to unauthorized individuals. \n\n    To check the level of detail for errors exposed to clients, as the database\n    administrator (shown here as \"postgres\"), run the following: \n\n    $ sudo su - postgres \n    $ grep \"client_min_messages\" ${PGDATA?}/postgresql.conf \n\n    If client_min_messages is set to LOG or DEBUG, this is a finding. \n\n    If detailed error messages are displayed to individuals not authorized to view\n    them, this is a finding. \n\n    #### stderr Logging \n\n    Logs may contain detailed information and should only be accessible by the\n    database owner. \n\n    As the database administrator, verify the following settings of logs in the\n    postgresql.conf file. \n\n    Note: Consult the organization's documentation on acceptable log privileges \n\n    $ sudo su - postgres \n    $ grep log_directory ${PGDATA?}/postgresql.conf \n    $ grep log_file_mode ${PGDATA?}/postgresql.conf \n\n    Next, verify the log files have the set configurations. \n\n    Note: Use location of logs from log_directory. \n\n    $ ls -l <audit_log_path> \n    total 32 \n    -rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log \n    -rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log \n    -rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log \n    -rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log \n    -rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log \n    -rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log \n\n    If logs are not owned by the database administrator or have permissions that\n    are not 0600, this is a finding. \n\n    #### syslog Logging \n\n    If PostgreSQL is configured to use syslog for logging, consult organization\n    location and permissions for syslog log files. If the logs are not owned by\n    root or have permissions that are not 0600, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA environment\n    variable. See supplementary content APPENDIX-F for instructions on configuring\n    PGDATA.\n\n    To set the level of detail for errors messages exposed to clients, as the\n    database administrator (shown here as \"postgres\"), run the following commands:\n\n    $ sudo su - postgres\n    $ vi ${PGDATA?}/postgresql.conf\n    client_min_messages = notice"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000267-DB-000163","gid":"V-72889","rid":"SV-87541r2_rule","stig_id":"PGS9-00-002500","fix_id":"F-79331r1_fix","cci":["CCI-001314"],"nist":["SI-11 b","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"  control \"V-72889\" do\r\n    title \"PostgreSQL must reveal detailed error messages only to the ISSO, ISSM,\r\n    SA and DBA.\"\r\n    desc  \"If PostgreSQL provides too much information in error logs and\r\n    administrative messages to the screen, this could lead to compromise. The\r\n    structure and content of error messages need to be carefully considered by the\r\n    organization and development team. The extent to which the information system\r\n    is able to identify and handle error conditions is guided by organizational\r\n    policy and operational requirements.\r\n\r\n    Some default PostgreSQL error messages can contain information that could\r\n    aid an attacker in, among others things, identifying the database type, host\r\n    address, or state of the database. Custom errors may contain sensitive customer\r\n    information.\r\n\r\n    It is important that detailed error messages be visible only to those who\r\n    are authorized to view them; that general users receive only generalized\r\n    acknowledgment that errors have occurred; and that these generalized messages\r\n    appear only when relevant to the user's task. For example, a message along the\r\n    lines of, \\\"An error has occurred. Unable to save your changes. If this problem\r\n    persists, please contact your help desk\\\" would be relevant. A message such as\r\n    \\\"Warning: your transaction generated a large number of page splits\\\" would\r\n    likely not be relevant.\r\n\r\n    Administrative users authorized to review detailed error messages typically\r\n    are the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified\r\n    according to organization-specific needs, with DBA approval.\"\r\n\r\n    impact 0.5\r\n    tag \"severity\": \"medium\"\r\n    tag \"gtitle\": \"SRG-APP-000267-DB-000163\"\r\n    tag \"gid\": \"V-72889\"\r\n    tag \"rid\": \"SV-87541r2_rule\"\r\n    tag \"stig_id\": \"PGS9-00-002500\"\r\n    tag \"fix_id\": \"F-79331r1_fix\"\r\n    tag \"cci\": [\"CCI-001314\"]\r\n    tag \"nist\": [\"SI-11 b\", \"Rev_4\"]\r\n    tag \"false_negatives\": nil\r\n    tag \"false_positives\": nil\r\n    tag \"documentable\": false\r\n    tag \"mitigations\": nil\r\n    tag \"severity_override_guidance\": false\r\n    tag \"potential_impacts\": nil\r\n    tag \"third_party_tools\": nil\r\n    tag \"mitigation_controls\": nil\r\n    tag \"responsibility\": nil\r\n    tag \"ia_controls\": nil\r\n    desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n    variable. See supplementary content APPENDIX-F for instructions on configuring\r\n    PGDATA. \r\n\r\n    Check PostgreSQL settings and custom database code to determine if detailed\r\n    error messages are ever displayed to unauthorized individuals. \r\n\r\n    To check the level of detail for errors exposed to clients, as the database\r\n    administrator (shown here as \\\"postgres\\\"), run the following: \r\n\r\n    $ sudo su - postgres \r\n    $ grep \\\"client_min_messages\\\" ${PGDATA?}/postgresql.conf \r\n\r\n    If client_min_messages is set to LOG or DEBUG, this is a finding. \r\n\r\n    If detailed error messages are displayed to individuals not authorized to view\r\n    them, this is a finding. \r\n\r\n    #### stderr Logging \r\n\r\n    Logs may contain detailed information and should only be accessible by the\r\n    database owner. \r\n\r\n    As the database administrator, verify the following settings of logs in the\r\n    postgresql.conf file. \r\n\r\n    Note: Consult the organization's documentation on acceptable log privileges \r\n\r\n    $ sudo su - postgres \r\n    $ grep log_directory ${PGDATA?}/postgresql.conf \r\n    $ grep log_file_mode ${PGDATA?}/postgresql.conf \r\n\r\n    Next, verify the log files have the set configurations. \r\n\r\n    Note: Use location of logs from log_directory. \r\n\r\n    $ ls -l <audit_log_path> \r\n    total 32 \r\n    -rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log \r\n    -rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log \r\n    -rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log \r\n    -rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log \r\n    -rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log \r\n    -rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log \r\n\r\n    If logs are not owned by the database administrator or have permissions that\r\n    are not 0600, this is a finding. \r\n\r\n    #### syslog Logging \r\n\r\n    If PostgreSQL is configured to use syslog for logging, consult organization\r\n    location and permissions for syslog log files. If the logs are not owned by\r\n    root or have permissions that are not 0600, this is a finding.\"\r\n      \r\n    desc \"fix\", \"Note: The following instructions use the PGDATA environment\r\n    variable. See supplementary content APPENDIX-F for instructions on configuring\r\n    PGDATA.\r\n\r\n    To set the level of detail for errors messages exposed to clients, as the\r\n    database administrator (shown here as \\\"postgres\\\"), run the following commands:\r\n\r\n    $ sudo su - postgres\r\n    $ vi ${PGDATA?}/postgresql.conf\r\n    client_min_messages = notice\"\r\n\r\n  # @todo determine how to handle stderr errors?\r\n\r\n    describe directory(pg_log_dir) do\r\n      it { should be_directory }\r\n      it { should be_owned_by pg_owner }\r\n      it { should be_grouped_into pg_owner }\r\n      its('mode') { should  cmp '0700' }\r\n    end\r\n\r\n    describe directory(pg_audit_log_dir) do\r\n      it { should be_directory }\r\n      it { should be_owned_by pg_owner }\r\n      it { should be_grouped_into pg_owner }\r\n      its('mode') { should  cmp '0700' }\r\n    end\r\n\r\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n    describe sql.query(\"SELECT current_setting('client_min_messages')\", [pg_db]) do\r\n      its('output') { should_not match %r{log|debug|LOG|DEBUG} }\r\n      its('output') { should cmp client_min_mesg }\r\n    end\r\n\r\n    describe postgres_conf(pg_conf_file) do\r\n      its('log_directory') { should eq 'pg_log' }\r\n      its('log_file_mode') { should eq '0600' }\r\n      its('client_min_messages') { should cmp client_min_mesg }\r\n    end\r\n\r\n    describe command(\"find #{pg_audit_log_dir} -type f ! -perm 0600 | wc -l\") do\r\n      its('stdout.strip') { should eq '0' }\r\n    end\r\n  end\r\n","source_location":{"line":27,"ref":"controls/V-72889.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be directory","run_time":0.422857672,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be owned by \"postgres\"","run_time":0.00754636,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be grouped into \"postgres\"","run_time":0.029729525,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log mode is expected to cmp == \"0700\"","run_time":0.000251018,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be directory","run_time":0.008087092,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be owned by \"postgres\"","run_time":0.007519502,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be grouped into \"postgres\"","run_time":0.007861679,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log mode is expected to cmp == \"0700\"","run_time":0.000245626,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT current_setting('client_min_messages') output is expected not to match /log|debug|LOG|DEBUG/","run_time":0.000136339,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT current_setting('client_min_messages') output is expected to cmp == \"error\"","run_time":0.000171653,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"PostgreSQL Configuration log_directory is expected to eq \"pg_log\"","run_time":0.001279428,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"PostgreSQL Configuration log_file_mode is expected to eq \"0600\"","run_time":0.000109821,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"PostgreSQL Configuration client_min_messages is expected to cmp == \"error\"","run_time":0.000154751,"start_time":"2020-06-19T18:47:22+00:00"},{"status":"passed","code_desc":"Command: `find /var/lib/pgsql/data/userdata/pg_log -type f ! -perm 0600 | wc -l` stdout.strip is expected to eq \"0\"","run_time":0.406888242,"start_time":"2020-06-19T18:47:22+00:00"}]},{"id":"V-72845","title":"Security-relevant software updates to PostgreSQL must be installed\n  within the time period directed by an authoritative source (e.g., IAVM, CTOs,\n  DTMs, and STIGs).","desc":"Security flaws with software applications, including database\n  management systems, are discovered daily. Vendors are constantly updating and\n  patching their products to address newly discovered security vulnerabilities.\n  Organizations (including any contractor to the organization) are required to\n  promptly install security-relevant software updates (e.g., patches, service\n  packs, and hot fixes). Flaws discovered during security assessments, continuous\n  monitoring, incident response activities, or information system error handling\n  must also be addressed expeditiously.\n\n  Organization-defined time periods for updating security-relevant software\n  may vary based on a variety of factors including, for example, the security\n  category of the information system or the criticality of the update (i.e.,\n  severity of the vulnerability related to the discovered flaw).\n\n  This requirement will apply to software patch management solutions that are\n  used to install patches across the enclave and also to applications themselves\n  that are not part of that patch management solution. For example, many browsers\n  today provide the capability to install their own patch software. Patch\n  criticality, as well as system criticality, will vary. Therefore, the tactical\n  situations regarding the patch management process will also vary. This means\n  that the time period utilized must be a configurable parameter. Time frames for\n  application of security-relevant software updates may be dependent upon the\n  Information Assurance Vulnerability Management (IAVM) process.\n\n  The application will be configured to check for and install\n  security-relevant software updates within an identified time period from the\n  availability of the update. The specific time period will be defined by an\n  authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).","descriptions":[{"label":"default","data":"Security flaws with software applications, including database\n  management systems, are discovered daily. Vendors are constantly updating and\n  patching their products to address newly discovered security vulnerabilities.\n  Organizations (including any contractor to the organization) are required to\n  promptly install security-relevant software updates (e.g., patches, service\n  packs, and hot fixes). Flaws discovered during security assessments, continuous\n  monitoring, incident response activities, or information system error handling\n  must also be addressed expeditiously.\n\n  Organization-defined time periods for updating security-relevant software\n  may vary based on a variety of factors including, for example, the security\n  category of the information system or the criticality of the update (i.e.,\n  severity of the vulnerability related to the discovered flaw).\n\n  This requirement will apply to software patch management solutions that are\n  used to install patches across the enclave and also to applications themselves\n  that are not part of that patch management solution. For example, many browsers\n  today provide the capability to install their own patch software. Patch\n  criticality, as well as system criticality, will vary. Therefore, the tactical\n  situations regarding the patch management process will also vary. This means\n  that the time period utilized must be a configurable parameter. Time frames for\n  application of security-relevant software updates may be dependent upon the\n  Information Assurance Vulnerability Management (IAVM) process.\n\n  The application will be configured to check for and install\n  security-relevant software updates within an identified time period from the\n  availability of the update. The specific time period will be defined by an\n  authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs)."},{"label":"check","data":"If new packages are available for PostgreSQL, they can be\n  reviewed in the package manager appropriate for the server operating system:\n\n  To list the version of installed PostgreSQL using psql:\n\n  $ sudo su - postgres\n  $ psql -–version\n\n  To list the current version of software for RPM:\n\n  $ rpm -qa | grep postgres\n\n  To list the current version of software for APT:\n\n  $ apt-cache policy postgres\n\n  All versions of PostgreSQL will be listed on:\n\n  http://www.postgresql.org/support/versioning/\n\n  All security-relevant software updates for PostgreSQL will be listed on:\n\n  http://www.postgresql.org/support/security/\n\n  If PostgreSQL is not at the latest version, this is a finding.\n\n  If PostgreSQL is not at the latest version and the evaluated version has CVEs\n  (IAVAs), then this is a CAT I finding."},{"label":"fix","data":"Institute and adhere to policies and procedures to ensure that\n  patches are consistently applied to PostgreSQL within the time allowed."}],"impact":0.7,"refs":[],"tags":{"severity":"high","gtitle":"SRG-APP-000456-DB-000390","gid":"V-72845","rid":"SV-87497r1_rule","stig_id":"PGS9-00-000300","fix_id":"F-79287r1_fix","cci":["CCI-002605"],"nist":["SI-2 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72845\" do\r\n  title \"Security-relevant software updates to PostgreSQL must be installed\r\n  within the time period directed by an authoritative source (e.g., IAVM, CTOs,\r\n  DTMs, and STIGs).\"\r\n  desc  \"Security flaws with software applications, including database\r\n  management systems, are discovered daily. Vendors are constantly updating and\r\n  patching their products to address newly discovered security vulnerabilities.\r\n  Organizations (including any contractor to the organization) are required to\r\n  promptly install security-relevant software updates (e.g., patches, service\r\n  packs, and hot fixes). Flaws discovered during security assessments, continuous\r\n  monitoring, incident response activities, or information system error handling\r\n  must also be addressed expeditiously.\r\n\r\n  Organization-defined time periods for updating security-relevant software\r\n  may vary based on a variety of factors including, for example, the security\r\n  category of the information system or the criticality of the update (i.e.,\r\n  severity of the vulnerability related to the discovered flaw).\r\n\r\n  This requirement will apply to software patch management solutions that are\r\n  used to install patches across the enclave and also to applications themselves\r\n  that are not part of that patch management solution. For example, many browsers\r\n  today provide the capability to install their own patch software. Patch\r\n  criticality, as well as system criticality, will vary. Therefore, the tactical\r\n  situations regarding the patch management process will also vary. This means\r\n  that the time period utilized must be a configurable parameter. Time frames for\r\n  application of security-relevant software updates may be dependent upon the\r\n  Information Assurance Vulnerability Management (IAVM) process.\r\n\r\n  The application will be configured to check for and install\r\n  security-relevant software updates within an identified time period from the\r\n  availability of the update. The specific time period will be defined by an\r\n  authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).\"\r\n\r\n  impact 0.7\r\n  tag \"severity\": \"high\"\r\n  tag \"gtitle\": \"SRG-APP-000456-DB-000390\"\r\n  tag \"gid\": \"V-72845\"\r\n  tag \"rid\": \"SV-87497r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-000300\"\r\n  tag \"fix_id\": \"F-79287r1_fix\"\r\n  tag \"cci\": [\"CCI-002605\"]\r\n  tag \"nist\": [\"SI-2 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"If new packages are available for PostgreSQL, they can be\r\n  reviewed in the package manager appropriate for the server operating system:\r\n\r\n  To list the version of installed PostgreSQL using psql:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -–version\r\n\r\n  To list the current version of software for RPM:\r\n\r\n  $ rpm -qa | grep postgres\r\n\r\n  To list the current version of software for APT:\r\n\r\n  $ apt-cache policy postgres\r\n\r\n  All versions of PostgreSQL will be listed on:\r\n\r\n  http://www.postgresql.org/support/versioning/\r\n\r\n  All security-relevant software updates for PostgreSQL will be listed on:\r\n\r\n  http://www.postgresql.org/support/security/\r\n\r\n  If PostgreSQL is not at the latest version, this is a finding.\r\n\r\n  If PostgreSQL is not at the latest version and the evaluated version has CVEs\r\n  (IAVAs), then this is a CAT I finding.\"\r\n\r\n  desc \"fix\", \"Institute and adhere to policies and procedures to ensure that\r\n  patches are consistently applied to PostgreSQL within the time allowed.\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW server_version;', [pg_db]) do\r\n    its('output') { should cmp pg_version}\r\n  end\r\n\r\n  if os.debian?\r\n    apt_packages = command(\"apt-cache policy postgres\").stdout.split(\"\\n\")\r\n\r\n    apt_packages.each do |packages|\r\n      describe(packages) do\r\n        it { should include (pg_version) }\r\n      end\r\n    end\r\n  \r\n  elsif os.linux? || os.redhat?\r\n    rpm_packages = command(\"rpm -qa | grep postgres\").stdout.split(\"\\n\")\r\n\r\n    rpm_packages.each do |packages|\r\n      describe(packages) do\r\n        it { should include (pg_version) }\r\n      end\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72845.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW server_version; output is expected to cmp == \"9.6\"","run_time":0.000363201,"start_time":"2020-06-19T18:47:23+00:00","message":"\nexpected: 9.6\n     got: 9.6.10\n\n(compared using `cmp` matcher)\n"},{"status":"failed","code_desc":"rh-postgresql96-runtime-3.0-10.el7.x86_64 is expected to include \"9.6\"","run_time":0.000258902,"start_time":"2020-06-19T18:47:23+00:00","message":"expected \"rh-postgresql96-runtime-3.0-10.el7.x86_64\" to include \"9.6\""},{"status":"passed","code_desc":"rh-postgresql96-postgresql-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.000109234,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"failed","code_desc":"rh-postgresql95-postgresql-libs-9.5.14-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.001096249,"start_time":"2020-06-19T18:47:23+00:00","message":"expected \"rh-postgresql95-postgresql-libs-9.5.14-1.el7.x86_64\" to include \"9.6\""},{"status":"passed","code_desc":"rh-postgresql96-postgresql-server-syspaths-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.000154131,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"passed","code_desc":"rh-postgresql96-postgresql-syspaths-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":9.8678e-05,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"passed","code_desc":"rh-postgresql96-postgresql-contrib-syspaths-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.00010559,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"failed","code_desc":"rh-postgresql96-syspaths-3.0-10.el7.x86_64 is expected to include \"9.6\"","run_time":0.000197084,"start_time":"2020-06-19T18:47:23+00:00","message":"expected \"rh-postgresql96-syspaths-3.0-10.el7.x86_64\" to include \"9.6\""},{"status":"failed","code_desc":"rh-postgresql96-3.0-10.el7.x86_64 is expected to include \"9.6\"","run_time":0.000233976,"start_time":"2020-06-19T18:47:23+00:00","message":"expected \"rh-postgresql96-3.0-10.el7.x86_64\" to include \"9.6\""},{"status":"passed","code_desc":"rh-postgresql96-postgresql-libs-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.000160618,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"failed","code_desc":"rh-postgresql95-runtime-2.2-2.el7.x86_64 is expected to include \"9.6\"","run_time":0.00024403,"start_time":"2020-06-19T18:47:23+00:00","message":"expected \"rh-postgresql95-runtime-2.2-2.el7.x86_64\" to include \"9.6\""},{"status":"passed","code_desc":"rh-postgresql96-postgresql-server-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.000113451,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"failed","code_desc":"rh-postgresql95-postgresql-9.5.14-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.000725892,"start_time":"2020-06-19T18:47:23+00:00","message":"expected \"rh-postgresql95-postgresql-9.5.14-1.el7.x86_64\" to include \"9.6\""},{"status":"passed","code_desc":"rh-postgresql96-postgresql-contrib-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.000103253,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"failed","code_desc":"rh-postgresql95-postgresql-server-9.5.14-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.000171557,"start_time":"2020-06-19T18:47:23+00:00","message":"expected \"rh-postgresql95-postgresql-server-9.5.14-1.el7.x86_64\" to include \"9.6\""}]},{"id":"V-72901","title":"Database software, including PostgreSQL configuration files, must be\n  stored in dedicated directories separate from the host OS and other\n  applications.","desc":"When dealing with change control issues, it should be noted, any\n  changes to the hardware, software, and/or firmware components of the\n  information system and/or application can potentially have significant effects\n  on the overall security of the system.\n\n  Multiple applications can provide a cumulative negative effect. A\n  vulnerability and subsequent exploit to one application can lead to an exploit\n  of other applications sharing the same security context. For example, an\n  exploit to a web server process that leads to unauthorized administrative\n  access to host system directories can most likely lead to a compromise of all\n  applications hosted by the same system. Database software not installed using\n  dedicated directories both threatens and is threatened by other hosted\n  applications. Access controls defined for one application may by default\n  provide access to the other application's database objects or directories. Any\n  method that provides any level of separation of security context assists in the\n  protection between applications.","descriptions":[{"label":"default","data":"When dealing with change control issues, it should be noted, any\n  changes to the hardware, software, and/or firmware components of the\n  information system and/or application can potentially have significant effects\n  on the overall security of the system.\n\n  Multiple applications can provide a cumulative negative effect. A\n  vulnerability and subsequent exploit to one application can lead to an exploit\n  of other applications sharing the same security context. For example, an\n  exploit to a web server process that leads to unauthorized administrative\n  access to host system directories can most likely lead to a compromise of all\n  applications hosted by the same system. Database software not installed using\n  dedicated directories both threatens and is threatened by other hosted\n  applications. Access controls defined for one application may by default\n  provide access to the other application's database objects or directories. Any\n  method that provides any level of separation of security context assists in the\n  protection between applications."},{"label":"check","data":"Review the PostgreSQL software library directory and any\n  subdirectories. \n\n  If any non-PostgreSQL software directories exist on the disk directory, examine\n  or investigate their use. If any of the directories are used by other\n  applications, including third-party applications that use the PostgreSQL, this\n  is a finding. \n\n  Only applications that are required for the functioning and administration, not\n  use, of the PostgreSQL software library should be located in the same disk\n  directory as the PostgreSQL software libraries. \n\n  If other applications are located in the same directory as PostgreSQL, this is\n  a finding."},{"label":"fix","data":"Install all applications on directories separate from the\n  PostgreSQL software library directory. Relocate any directories or reinstall\n  other application software that currently shares the PostgreSQL software\n  library directory."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000133-DB-000199","gid":"V-72901","rid":"SV-87553r2_rule","stig_id":"PGS9-00-003300","fix_id":"F-79343r1_fix","cci":["CCI-001499"],"nist":["CM-5 (6)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72901\" do\r\n  title \"Database software, including PostgreSQL configuration files, must be\r\n  stored in dedicated directories separate from the host OS and other\r\n  applications.\"\r\n  desc  \"When dealing with change control issues, it should be noted, any\r\n  changes to the hardware, software, and/or firmware components of the\r\n  information system and/or application can potentially have significant effects\r\n  on the overall security of the system.\r\n\r\n  Multiple applications can provide a cumulative negative effect. A\r\n  vulnerability and subsequent exploit to one application can lead to an exploit\r\n  of other applications sharing the same security context. For example, an\r\n  exploit to a web server process that leads to unauthorized administrative\r\n  access to host system directories can most likely lead to a compromise of all\r\n  applications hosted by the same system. Database software not installed using\r\n  dedicated directories both threatens and is threatened by other hosted\r\n  applications. Access controls defined for one application may by default\r\n  provide access to the other application's database objects or directories. Any\r\n  method that provides any level of separation of security context assists in the\r\n  protection between applications.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000133-DB-000199\"\r\n  tag \"gid\": \"V-72901\"\r\n  tag \"rid\": \"SV-87553r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-003300\"\r\n  tag \"fix_id\": \"F-79343r1_fix\"\r\n  tag \"cci\": [\"CCI-001499\"]\r\n  tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review the PostgreSQL software library directory and any\r\n  subdirectories. \r\n\r\n  If any non-PostgreSQL software directories exist on the disk directory, examine\r\n  or investigate their use. If any of the directories are used by other\r\n  applications, including third-party applications that use the PostgreSQL, this\r\n  is a finding. \r\n\r\n  Only applications that are required for the functioning and administration, not\r\n  use, of the PostgreSQL software library should be located in the same disk\r\n  directory as the PostgreSQL software libraries. \r\n\r\n  If other applications are located in the same directory as PostgreSQL, this is\r\n  a finding.\"\r\n\r\n  desc \"fix\", \"Install all applications on directories separate from the\r\n  PostgreSQL software library directory. Relocate any directories or reinstall\r\n  other application software that currently shares the PostgreSQL software\r\n  library directory.\"\r\n\r\n  pg_shared_dirs.each do |dir|\r\n    describe directory(dir) do\r\n      it { should be_directory }\r\n      it { should be_owned_by 'root' }\r\n      it { should be_grouped_into 'root' }\r\n      its('mode') { should cmp '0755' }\r\n    end\r\n\r\n    describe command(\"awk '$9 ~ \\\"#{dir}\\\" {print $1}'\") do\r\n      its('stdout') { should match /^$|postgres|postmaster/ }\r\n      its('stderr') { should eq '' }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":5,"ref":"controls/V-72901.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Directory /var/lib/pgsql/data is expected to be directory","run_time":0.007794791,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"failed","code_desc":"Directory /var/lib/pgsql/data is expected to be owned by \"root\"","run_time":0.008600624,"start_time":"2020-06-19T18:47:23+00:00","message":"expected `Directory /var/lib/pgsql/data.owned_by?(\"root\")` to return true, got false"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data is expected to be grouped into \"root\"","run_time":0.007926924,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data mode is expected to cmp == \"0755\"","run_time":0.000262207,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"passed","code_desc":"Command: `awk '$9 ~ \"/var/lib/pgsql/data\" {print $1}'` stdout is expected to match /^$|postgres|postmaster/","run_time":0.408195831,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"passed","code_desc":"Command: `awk '$9 ~ \"/var/lib/pgsql/data\" {print $1}'` stderr is expected to eq \"\"","run_time":0.040906406,"start_time":"2020-06-19T18:47:23+00:00"}]},{"id":"V-72895","title":"PostgreSQL must maintain the confidentiality and integrity of\n  information during reception.","desc":"Information can be either unintentionally or maliciously disclosed or\n  modified during reception, including, for example, during aggregation, at\n  protocol transformation points, and during packing/unpacking. These\n  unauthorized disclosures or modifications compromise the confidentiality or\n  integrity of the information.\n\n  This requirement applies only to those applications that are either\n  distributed or can allow access to data nonlocally. Use of this requirement\n  will be limited to situations where the data owner has a strict requirement for\n  ensuring data integrity and confidentiality is maintained at every step of the\n  data transfer and handling process.\n\n  When receiving data, PostgreSQL, associated applications, and\n  infrastructure must leverage protection mechanisms.\n\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c; while the\n  name is misleading, this function enables only TLS encryption methods, not SSL.\n\n      See OpenSSL:\n  https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html","descriptions":[{"label":"default","data":"Information can be either unintentionally or maliciously disclosed or\n  modified during reception, including, for example, during aggregation, at\n  protocol transformation points, and during packing/unpacking. These\n  unauthorized disclosures or modifications compromise the confidentiality or\n  integrity of the information.\n\n  This requirement applies only to those applications that are either\n  distributed or can allow access to data nonlocally. Use of this requirement\n  will be limited to situations where the data owner has a strict requirement for\n  ensuring data integrity and confidentiality is maintained at every step of the\n  data transfer and handling process.\n\n  When receiving data, PostgreSQL, associated applications, and\n  infrastructure must leverage protection mechanisms.\n\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c; while the\n  name is misleading, this function enables only TLS encryption methods, not SSL.\n\n      See OpenSSL:\n  https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html"},{"label":"check","data":"If the data owner does not have a strict requirement for ensuring\n  data integrity and confidentiality is maintained at every step of the data\n  transfer and handling process, this is not a finding.\n\n  As the database administrator (shown here as \"postgres\"), verify SSL is\n  enabled in postgresql.conf by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl\"\n\n  If SSL is off, this is a finding.\n\n  If PostgreSQL, associated applications, and infrastructure do not employ\n  protective measures against unauthorized disclosure and modification during\n  reception, this is a finding."},{"label":"fix","data":"Implement protective measures against unauthorized disclosure and\n  modification during reception.\n\n  To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G for\n  instructions on enabling SSL."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000442-DB-000379","gid":"V-72895","rid":"SV-87547r1_rule","stig_id":"PGS9-00-003000","fix_id":"F-79337r1_fix","cci":["CCI-002422"],"nist":["SC-8 (2)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72895\" do\r\n  title \"PostgreSQL must maintain the confidentiality and integrity of\r\n  information during reception.\"\r\n  desc  \"Information can be either unintentionally or maliciously disclosed or\r\n  modified during reception, including, for example, during aggregation, at\r\n  protocol transformation points, and during packing/unpacking. These\r\n  unauthorized disclosures or modifications compromise the confidentiality or\r\n  integrity of the information.\r\n\r\n  This requirement applies only to those applications that are either\r\n  distributed or can allow access to data nonlocally. Use of this requirement\r\n  will be limited to situations where the data owner has a strict requirement for\r\n  ensuring data integrity and confidentiality is maintained at every step of the\r\n  data transfer and handling process.\r\n\r\n  When receiving data, PostgreSQL, associated applications, and\r\n  infrastructure must leverage protection mechanisms.\r\n\r\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c; while the\r\n  name is misleading, this function enables only TLS encryption methods, not SSL.\r\n\r\n      See OpenSSL:\r\n  https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000442-DB-000379\"\r\n  tag \"gid\": \"V-72895\"\r\n  tag \"rid\": \"SV-87547r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-003000\"\r\n  tag \"fix_id\": \"F-79337r1_fix\"\r\n  tag \"cci\": [\"CCI-002422\"]\r\n  tag \"nist\": [\"SC-8 (2)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"If the data owner does not have a strict requirement for ensuring\r\n  data integrity and confidentiality is maintained at every step of the data\r\n  transfer and handling process, this is not a finding.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), verify SSL is\r\n  enabled in postgresql.conf by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW ssl\\\"\r\n\r\n  If SSL is off, this is a finding.\r\n\r\n  If PostgreSQL, associated applications, and infrastructure do not employ\r\n  protective measures against unauthorized disclosure and modification during\r\n  reception, this is a finding.\"\r\n\r\n  desc \"fix\", \"Implement protective measures against unauthorized disclosure and\r\n  modification during reception.\r\n\r\n  To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G for\r\n  instructions on enabling SSL.\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW ssl;', [pg_db]) do\r\n    its('output') { should_not match /off|false/i }\r\n  end\r\nend\r\n","source_location":{"line":9,"ref":"controls/V-72895.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW ssl; output is expected not to match /off|false/i","run_time":0.00252421,"start_time":"2020-06-19T18:47:23+00:00","message":"expected \"off\" not to match /off|false/i\nDiff:\n@@ -1,2 +1,2 @@\n-/off|false/i\n+\"off\"\n"}]},{"id":"V-72897","title":"Database objects (including but not limited to tables, indexes,\n  storage, trigger procedures, functions, links to software external to\n  PostgreSQL, etc.) must be owned by database/DBMS principals authorized for\n  ownership.","desc":"Within the database, object ownership implies full privileges to the\n  owned object, including the privilege to assign access to the owned objects to\n  other subjects. Database functions and procedures can be coded using definer's\n  rights. This allows anyone who utilizes the object to perform the actions if\n  they were the owner. If not properly managed, this can lead to privileged\n  actions being taken by unauthorized individuals.\n\n  Conversely, if critical tables or other objects rely on unauthorized owner\n  accounts, these objects may be lost when an account is removed.","descriptions":[{"label":"default","data":"Within the database, object ownership implies full privileges to the\n  owned object, including the privilege to assign access to the owned objects to\n  other subjects. Database functions and procedures can be coded using definer's\n  rights. This allows anyone who utilizes the object to perform the actions if\n  they were the owner. If not properly managed, this can lead to privileged\n  actions being taken by unauthorized individuals.\n\n  Conversely, if critical tables or other objects rely on unauthorized owner\n  accounts, these objects may be lost when an account is removed."},{"label":"check","data":"Review system documentation to identify accounts authorized to\n  own database objects. Review accounts that own objects in the database(s).\n\n  If any database objects are found to be owned by users not authorized to own\n  database objects, this is a finding.\n\n  To check the ownership of objects in the database, as the database\n  administrator, run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -x -c \"\\dn *.*\"\n  $ psql -x -c \"\\dt *.*\"\n  $ psql -x -c \"\\ds *.*\"\n  $ psql -x -c \"\\dv *.*\"\n  $ psql -x -c \"\\df+ *.*\"\n\n  If any object is not owned by an authorized role for ownership, this is a\n  finding."},{"label":"fix","data":"Assign ownership of authorized objects to authorized object owner\n  accounts. \n\n  #### Schema Owner \n\n  To create a schema owned by the user bob, run the following SQL: \n\n  $ sudo su - postgres \n  $ psql -c \"CREATE SCHEMA test AUTHORIZATION bob\"\n\n  To alter the ownership of an existing object to be owned by the user bob, run\n  the following SQL: \n\n  $ sudo su - postgres \n  $ psql -c \"ALTER SCHEMA test OWNER TO bob\""}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000133-DB-000200","gid":"V-72897","rid":"SV-87549r2_rule","stig_id":"PGS9-00-003100","fix_id":"F-79339r3_fix","cci":["CCI-001499"],"nist":["CM-5 (6)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72897\" do\r\n  title \"Database objects (including but not limited to tables, indexes,\r\n  storage, trigger procedures, functions, links to software external to\r\n  PostgreSQL, etc.) must be owned by database/DBMS principals authorized for\r\n  ownership.\"\r\n  desc  \"Within the database, object ownership implies full privileges to the\r\n  owned object, including the privilege to assign access to the owned objects to\r\n  other subjects. Database functions and procedures can be coded using definer's\r\n  rights. This allows anyone who utilizes the object to perform the actions if\r\n  they were the owner. If not properly managed, this can lead to privileged\r\n  actions being taken by unauthorized individuals.\r\n\r\n  Conversely, if critical tables or other objects rely on unauthorized owner\r\n  accounts, these objects may be lost when an account is removed.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000133-DB-000200\"\r\n  tag \"gid\": \"V-72897\"\r\n  tag \"rid\": \"SV-87549r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-003100\"\r\n  tag \"fix_id\": \"F-79339r3_fix\"\r\n  tag \"cci\": [\"CCI-001499\"]\r\n  tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review system documentation to identify accounts authorized to\r\n  own database objects. Review accounts that own objects in the database(s).\r\n\r\n  If any database objects are found to be owned by users not authorized to own\r\n  database objects, this is a finding.\r\n\r\n  To check the ownership of objects in the database, as the database\r\n  administrator, run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -x -c \\\"\\\\dn *.*\\\"\r\n  $ psql -x -c \\\"\\\\dt *.*\\\"\r\n  $ psql -x -c \\\"\\\\ds *.*\\\"\r\n  $ psql -x -c \\\"\\\\dv *.*\\\"\r\n  $ psql -x -c \\\"\\\\df+ *.*\\\"\r\n\r\n  If any object is not owned by an authorized role for ownership, this is a\r\n  finding.\"\r\n\r\n  desc \"fix\", \"Assign ownership of authorized objects to authorized object owner\r\n  accounts. \r\n\r\n  #### Schema Owner \r\n\r\n  To create a schema owned by the user bob, run the following SQL: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"CREATE SCHEMA test AUTHORIZATION bob\\\"\r\n\r\n  To alter the ownership of an existing object to be owned by the user bob, run\r\n  the following SQL: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"ALTER SCHEMA test OWNER TO bob\\\"\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  authorized_owners = pg_superusers\r\n\r\n\r\n  databases_sql = \"SELECT datname FROM pg_catalog.pg_database where datname = '#{pg_db}';\"\r\n  databases_query = sql.query(databases_sql, [pg_db])\r\n  databases = databases_query.lines\r\n  types = %w(t s v) # tables, sequences views\r\n\r\n  databases.each do |database|\r\n    schemas_sql = ''\r\n    functions_sql = ''\r\n\r\n    if database == 'postgres'\r\n      schemas_sql = \"SELECT n.nspname, pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"FROM pg_catalog.pg_namespace n \"\\\r\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}';\"\r\n      functions_sql = \"SELECT n.nspname, p.proname, \"\\\r\n        \"pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"FROM pg_catalog.pg_proc p \"\\\r\n        \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace \"\\\r\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}';\"\r\n    else\r\n      schemas_sql = \"SELECT n.nspname, pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"FROM pg_catalog.pg_namespace n \"\\\r\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) \"\\\r\n        \"AND n.nspname !~ '^pg_' AND n.nspname <> 'information_schema';\"\r\n      functions_sql = \"SELECT n.nspname, p.proname, \"\\\r\n        \"pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"FROM pg_catalog.pg_proc p \"\\\r\n        \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace \"\\\r\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n        \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) \"\\\r\n        \"AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema';\"\r\n    end\r\n\r\n    connection_error = \"FATAL:\\\\s+database \\\"#{database}\\\" is not currently \"\\\r\n      \"accepting connections\"\r\n    connection_error_regex = Regexp.new(connection_error)\r\n\r\n    sql_result=sql.query(schemas_sql, [database])\r\n\r\n    describe.one do\r\n      describe sql_result do\r\n        its('output') { should eq '' }\r\n      end\r\n\r\n      describe sql_result do\r\n        it { should match connection_error_regex }\r\n      end\r\n    end\r\n\r\n    sql_result=sql.query(functions_sql, [database])\r\n\r\n    describe.one do\r\n      describe sql_result do\r\n        its('output') { should eq '' }\r\n      end\r\n\r\n      describe sql_result do\r\n        it { should match connection_error_regex }\r\n      end\r\n    end\r\n\r\n    types.each do |type|\r\n      objects_sql = ''\r\n\r\n      if database == 'postgres'\r\n        objects_sql = \"SELECT n.nspname, c.relname, c.relkind, \"\\\r\n          \"pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c \"\\\r\n          \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\r\n          \"WHERE c.relkind IN ('#{type}','s','') \"\\\r\n          \"AND pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}' \"\r\n          \"AND n.nspname !~ '^pg_toast';\"\r\n      else\r\n        objects_sql = \"SELECT n.nspname, c.relname, c.relkind, \"\\\r\n          \"pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c \"\\\r\n          \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\r\n          \"WHERE c.relkind IN ('#{type}','s','') \"\\\r\n          \"AND pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n          \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) \"\\\r\n          \"AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema'\"\\\r\n          \" AND n.nspname !~ '^pg_toast';\"\r\n      end\r\n\r\n      sql_result=sql.query(objects_sql, [database])\r\n\r\n      describe.one do\r\n        describe sql_result do\r\n          its('output') { should eq '' }\r\n        end\r\n\r\n        describe sql_result do\r\n          it { should match connection_error_regex }\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":13,"ref":"controls/V-72897.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_namespace n WHERE pg_catalog.pg_get_userbyid(n.nspowner) NOT IN ('postgres') AND n.nspname !~ '^pg_' AND n.nspname <> 'information_schema'; output is expected to eq \"\"","run_time":0.000126739,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, p.proname, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_proc p LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE pg_catalog.pg_get_userbyid(n.nspowner) NOT IN ('postgres') AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema'; output is expected to eq \"\"","run_time":8.0911e-05,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, c.relname, c.relkind, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('t','s','') AND pg_catalog.pg_get_userbyid(n.nspowner) NOT IN ('postgres') AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema' AND n.nspname !~ '^pg_toast'; output is expected to eq \"\"","run_time":7.6419e-05,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, c.relname, c.relkind, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('s','s','') AND pg_catalog.pg_get_userbyid(n.nspowner) NOT IN ('postgres') AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema' AND n.nspname !~ '^pg_toast'; output is expected to eq \"\"","run_time":8.9694e-05,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, c.relname, c.relkind, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('v','s','') AND pg_catalog.pg_get_userbyid(n.nspowner) NOT IN ('postgres') AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema' AND n.nspname !~ '^pg_toast'; output is expected to eq \"\"","run_time":7.1375e-05,"start_time":"2020-06-19T18:47:23+00:00"}]},{"id":"V-72899","title":"The PostgreSQL software installation account must be restricted to\n  authorized users.","desc":"When dealing with change control issues, it should be noted any\n  changes to the hardware, software, and/or firmware components of the\n  information system and/or application can have significant effects on the\n  overall security of the system.\n\n  If the system were to allow any user to make changes to software libraries,\n  those changes might be implemented without undergoing the appropriate testing\n  and approvals that are part of a robust change management process.\n\n  Accordingly, only qualified and authorized individuals must be allowed\n  access to information system components for purposes of initiating changes,\n  including upgrades and modifications.\n\n  DBA and other privileged administrative or application owner accounts are\n  granted privileges that allow actions that can have a great impact on database\n  security and operation. It is especially important to grant privileged access\n  to only those persons who are qualified and authorized to use them.","descriptions":[{"label":"default","data":"When dealing with change control issues, it should be noted any\n  changes to the hardware, software, and/or firmware components of the\n  information system and/or application can have significant effects on the\n  overall security of the system.\n\n  If the system were to allow any user to make changes to software libraries,\n  those changes might be implemented without undergoing the appropriate testing\n  and approvals that are part of a robust change management process.\n\n  Accordingly, only qualified and authorized individuals must be allowed\n  access to information system components for purposes of initiating changes,\n  including upgrades and modifications.\n\n  DBA and other privileged administrative or application owner accounts are\n  granted privileges that allow actions that can have a great impact on database\n  security and operation. It is especially important to grant privileged access\n  to only those persons who are qualified and authorized to use them."},{"label":"check","data":"Review procedures for controlling, granting access to, and\n  tracking use of the PostgreSQL software installation account(s).\n\n  If access or use of this account is not restricted to the minimum number of\n  personnel required or if unauthorized access to the account has been granted,\n  this is a finding."},{"label":"fix","data":"Develop, document, and implement procedures to restrict and track\n  use of the PostgreSQL software installation account."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000133-DB-000198","gid":"V-72899","rid":"SV-87551r1_rule","stig_id":"PGS9-00-003200","fix_id":"F-79341r1_fix","cci":["CCI-001499"],"nist":["CM-5 (6)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72899\" do\r\n  title \"The PostgreSQL software installation account must be restricted to\r\n  authorized users.\"\r\n  desc  \"When dealing with change control issues, it should be noted any\r\n  changes to the hardware, software, and/or firmware components of the\r\n  information system and/or application can have significant effects on the\r\n  overall security of the system.\r\n\r\n  If the system were to allow any user to make changes to software libraries,\r\n  those changes might be implemented without undergoing the appropriate testing\r\n  and approvals that are part of a robust change management process.\r\n\r\n  Accordingly, only qualified and authorized individuals must be allowed\r\n  access to information system components for purposes of initiating changes,\r\n  including upgrades and modifications.\r\n\r\n  DBA and other privileged administrative or application owner accounts are\r\n  granted privileges that allow actions that can have a great impact on database\r\n  security and operation. It is especially important to grant privileged access\r\n  to only those persons who are qualified and authorized to use them.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000133-DB-000198\"\r\n  tag \"gid\": \"V-72899\"\r\n  tag \"rid\": \"SV-87551r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-003200\"\r\n  tag \"fix_id\": \"F-79341r1_fix\"\r\n  tag \"cci\": [\"CCI-001499\"]\r\n  tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review procedures for controlling, granting access to, and\r\n  tracking use of the PostgreSQL software installation account(s).\r\n\r\n  If access or use of this account is not restricted to the minimum number of\r\n  personnel required or if unauthorized access to the account has been granted,\r\n  this is a finding.\"\r\n\r\n  desc \"fix\", \"Develop, document, and implement procedures to restrict and track\r\n  use of the PostgreSQL software installation account.\"\r\n\r\n  describe \"Review procedures for controlling, granting access to, and tracking use of the PostgreSQL software installation account(s).\" do\r\n    skip \"If account(s) are not restricted to the minimum personnel required or if unauthorized access to the account has been granted, this is a finding\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72899.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Review procedures for controlling, granting access to, and tracking use of the PostgreSQL software installation account(s).","run_time":5.515e-06,"start_time":"2020-06-19T18:47:23+00:00","resource":"","skip_message":"If account(s) are not restricted to the minimum personnel required or if unauthorized access to the account has been granted, this is a finding"}]},{"id":"V-72903","title":"PostgreSQL must include additional, more detailed,\n  organization-defined information in the audit records for audit events\n  identified by type, location, or subject.","desc":"Information system auditing capability is critical for accurate\n  forensic analysis. Reconstruction of harmful events or forensic analysis is not\n  possible if audit records do not contain enough information. To support\n  analysis, some types of events will need information to be logged that exceeds\n  the basic requirements of event type, time stamps, location, source, outcome,\n  and user identity. If additional information is not available, it could\n  negatively impact forensic investigations into user actions or other malicious\n  events.\n\n  The organization must determine what additional information is required for\n  complete analysis of the audited events. The additional information required is\n  dependent on the type of information (e.g., sensitivity of the data and the\n  environment within which it resides). At a minimum, the organization must\n  employ either full-text recording of privileged commands or the individual\n  identities of users of shared accounts, or both. The organization must maintain\n  audit trails in sufficient detail to reconstruct events to determine the cause\n  and impact of compromise.\n\n  Examples of detailed information the organization may require in audit\n  records are full-text recording of privileged commands or the individual\n  identities of shared account users.","descriptions":[{"label":"default","data":"Information system auditing capability is critical for accurate\n  forensic analysis. Reconstruction of harmful events or forensic analysis is not\n  possible if audit records do not contain enough information. To support\n  analysis, some types of events will need information to be logged that exceeds\n  the basic requirements of event type, time stamps, location, source, outcome,\n  and user identity. If additional information is not available, it could\n  negatively impact forensic investigations into user actions or other malicious\n  events.\n\n  The organization must determine what additional information is required for\n  complete analysis of the audited events. The additional information required is\n  dependent on the type of information (e.g., sensitivity of the data and the\n  environment within which it resides). At a minimum, the organization must\n  employ either full-text recording of privileged commands or the individual\n  identities of users of shared accounts, or both. The organization must maintain\n  audit trails in sufficient detail to reconstruct events to determine the cause\n  and impact of compromise.\n\n  Examples of detailed information the organization may require in audit\n  records are full-text recording of privileged commands or the individual\n  identities of shared account users."},{"label":"check","data":"Review the system documentation to identify what additional\n  information the organization has determined necessary.\n\n  Check PostgreSQL settings and existing audit records to verify that all\n  organization-defined additional, more detailed information is in the audit\n  records for audit events identified by type, location, or subject.\n\n  If any additional information is defined and is not contained in the audit\n  records, this is a finding."},{"label":"fix","data":"Configure PostgreSQL audit settings to include all\n  organization-defined detailed information in the audit records for audit events\n  identified by type, location, or subject.\n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000101-DB-000044","gid":"V-72903","rid":"SV-87555r1_rule","stig_id":"PGS9-00-003500","fix_id":"F-79345r1_fix","cci":["CCI-000135"],"nist":["AU-3 (1)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72903\" do\r\n  title \"PostgreSQL must include additional, more detailed,\r\n  organization-defined information in the audit records for audit events\r\n  identified by type, location, or subject.\"\r\n  desc  \"Information system auditing capability is critical for accurate\r\n  forensic analysis. Reconstruction of harmful events or forensic analysis is not\r\n  possible if audit records do not contain enough information. To support\r\n  analysis, some types of events will need information to be logged that exceeds\r\n  the basic requirements of event type, time stamps, location, source, outcome,\r\n  and user identity. If additional information is not available, it could\r\n  negatively impact forensic investigations into user actions or other malicious\r\n  events.\r\n\r\n  The organization must determine what additional information is required for\r\n  complete analysis of the audited events. The additional information required is\r\n  dependent on the type of information (e.g., sensitivity of the data and the\r\n  environment within which it resides). At a minimum, the organization must\r\n  employ either full-text recording of privileged commands or the individual\r\n  identities of users of shared accounts, or both. The organization must maintain\r\n  audit trails in sufficient detail to reconstruct events to determine the cause\r\n  and impact of compromise.\r\n\r\n  Examples of detailed information the organization may require in audit\r\n  records are full-text recording of privileged commands or the individual\r\n  identities of shared account users.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000101-DB-000044\"\r\n  tag \"gid\": \"V-72903\"\r\n  tag \"rid\": \"SV-87555r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-003500\"\r\n  tag \"fix_id\": \"F-79345r1_fix\"\r\n  tag \"cci\": [\"CCI-000135\"]\r\n  tag \"nist\": [\"AU-3 (1)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review the system documentation to identify what additional\r\n  information the organization has determined necessary.\r\n\r\n  Check PostgreSQL settings and existing audit records to verify that all\r\n  organization-defined additional, more detailed information is in the audit\r\n  records for audit events identified by type, location, or subject.\r\n\r\n  If any additional information is defined and is not contained in the audit\r\n  records, this is a finding.\"\r\n\r\n  desc \"fix\", \"Configure PostgreSQL audit settings to include all\r\n  organization-defined detailed information in the audit records for audit events\r\n  identified by type, location, or subject.\r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging.\"\r\n\r\n  describe \"Check PostgreSQL settings and existing audit records to verify that all organization-defined information is in the audit\" do\r\n    skip \"If any additional information is defined and is not contained in the audit records, this is a finding\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72903.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Check PostgreSQL settings and existing audit records to verify that all organization-defined information is in the audit","run_time":3.363e-06,"start_time":"2020-06-19T18:47:23+00:00","resource":"","skip_message":"If any additional information is defined and is not contained in the audit records, this is a finding"}]},{"id":"V-72907","title":"When invalid inputs are received, PostgreSQL must behave in a\n  predictable and documented manner that reflects organizational and system\n  objectives.","desc":"A common vulnerability is unplanned behavior when invalid inputs are\n  received. This requirement guards against adverse or unintended system behavior\n  caused by invalid inputs, where information system responses to the invalid\n  input may be disruptive or cause the system to fail into an unsafe state.\n\n  The behavior will be derived from the organizational and system\n  requirements and includes, but is not limited to, notification of the\n  appropriate personnel, creating an audit record, and rejecting invalid input.","descriptions":[{"label":"default","data":"A common vulnerability is unplanned behavior when invalid inputs are\n  received. This requirement guards against adverse or unintended system behavior\n  caused by invalid inputs, where information system responses to the invalid\n  input may be disruptive or cause the system to fail into an unsafe state.\n\n  The behavior will be derived from the organizational and system\n  requirements and includes, but is not limited to, notification of the\n  appropriate personnel, creating an audit record, and rejecting invalid input."},{"label":"check","data":"As the database administrator (shown here as \"postgres\"), make\n  a small SQL syntax error in psql by running the following: \n\n  $ sudo su - postgres \n  $ psql -c \"CREAT TABLEincorrect_syntax(id INT)\" \n  ERROR: syntax error at or near \"CREAT\" \n\n  Note: The following instructions use the PGVER environment variable. See\n  supplementary content APPENDIX-H for instructions on configuring PGVER.\n\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  syntax error was logged (change the log file name and part to suit the\n  circumstances): \n\n  $ sudo su - postgres \n  $ cat ~/${PGVER?}/data/pg_log/postgresql-Wed.log \n  2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dERROR: syntax error\n  at or near \"CREAT\" at character 1 \n  2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dSTATEMENT: CREAT\n  TABLE incorrect_syntax(id INT); \n\n  Review system documentation to determine how input errors from application to\n  PostgreSQL are to be handled in general and if any special handling is defined\n  for specific circumstances. \n\n  If it does not implement the documented behavior, this is a finding."},{"label":"fix","data":"Enable logging.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n\n  All errors and denials are logged if logging is enabled."}],"impact":0.5,"refs":[{"ref":[]}],"tags":{"severity":"medium","gtitle":"SRG-APP-000447-DB-000393","gid":"V-72907","rid":"SV-87559r2_rule","stig_id":"PGS9-00-003700","fix_id":"F-79349r1_fix","cci":["CCI-002754"],"nist":["SI-10 (3)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72907\" do\r\n  title \"When invalid inputs are received, PostgreSQL must behave in a\r\n  predictable and documented manner that reflects organizational and system\r\n  objectives.\"\r\n  desc  \"A common vulnerability is unplanned behavior when invalid inputs are\r\n  received. This requirement guards against adverse or unintended system behavior\r\n  caused by invalid inputs, where information system responses to the invalid\r\n  input may be disruptive or cause the system to fail into an unsafe state.\r\n\r\n  The behavior will be derived from the organizational and system\r\n  requirements and includes, but is not limited to, notification of the\r\n  appropriate personnel, creating an audit record, and rejecting invalid input.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000447-DB-000393\"\r\n  tag \"gid\": \"V-72907\"\r\n  tag \"rid\": \"SV-87559r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-003700\"\r\n  tag \"fix_id\": \"F-79349r1_fix\"\r\n  tag \"cci\": [\"CCI-002754\"]\r\n  tag \"nist\": [\"SI-10 (3)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator (shown here as \\\"postgres\\\"), make\r\n  a small SQL syntax error in psql by running the following: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"CREAT TABLEincorrect_syntax(id INT)\\\" \r\n  ERROR: syntax error at or near \\\"CREAT\\\" \r\n\r\n  Note: The following instructions use the PGVER environment variable. See\r\n  supplementary content APPENDIX-H for instructions on configuring PGVER.\r\n\r\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  syntax error was logged (change the log file name and part to suit the\r\n  circumstances): \r\n\r\n  $ sudo su - postgres \r\n  $ cat ~/${PGVER?}/data/pg_log/postgresql-Wed.log \r\n  2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dERROR: syntax error\r\n  at or near \\\"CREAT\\\" at character 1 \r\n  2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dSTATEMENT: CREAT\r\n  TABLE incorrect_syntax(id INT); \r\n\r\n  Review system documentation to determine how input errors from application to\r\n  PostgreSQL are to be handled in general and if any special handling is defined\r\n  for specific circumstances. \r\n\r\n  If it does not implement the documented behavior, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Enable logging.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging.\r\n\r\n  All errors and denials are logged if logging is enabled.\"\r\n\r\n  #Execute an incorrectly-formed SQL statement with bad syntax, to prompt log ouput\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('CREAT TABLE incorrect_syntax2(id INT);', [pg_db]) do\r\n    its('stdout') { should match // }     \r\n  end\r\n\r\n  #Find the most recently modified log file in the pg_audit_log_dir, grep for the syntax error statement, and then\r\n  #test to validate the output matches the regex.\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"syntax error at or near\\\"\") do\r\n    its('stdout') { should match /^.*syntax error at or near .CREAT..*$/ }\r\n  end\r\n end \r\n","source_location":{"line":11,"ref":"controls/V-72905.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"CREAT TABLE incorrect_syntax2(id INT);\"` stdout is expected to match //","run_time":0.435372481,"start_time":"2020-06-19T18:47:23+00:00"},{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"syntax error at or near\"` stdout is expected to match /^.*syntax error at or near .CREAT..*$/","run_time":0.413877039,"start_time":"2020-06-19T18:47:23+00:00"}]},{"id":"V-72977","title":"PostgreSQL must generate audit records when unsuccessful attempts to\n  add privileges/permissions occur.","desc":"Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n\n  In an SQL environment, adding permissions is typically done via the GRANT\n  command, or, in the negative, the REVOKE command.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.","descriptions":[{"label":"default","data":"Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n\n  In an SQL environment, adding permissions is typically done via the GRANT\n  command, or, in the negative, the REVOKE command.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones."},{"label":"check","data":"First, as the database administrator (shown here as\n  \"postgres\"), create a role 'bob' and a test table by running the following\n  SQL: \n\n  $ sudo su - postgres \n  $ psql -c \"CREATE ROLE bob; CREATE TABLE test(id INT);\" \n\n  Next, set current role to bob and attempt to modify privileges: \n\n  $ psql -c \"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\" \n\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  unsuccessful attempt was logged: \n\n  $ sudo su - postgres \n  $ cat ${PGDATA?}/pg_log/<latest_log> \n  2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for\n  relation test \n  2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES\n  ON test TO bob; \n\n  If audit logs are not generated when unsuccessful attempts to add\n  privileges/permissions occur, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to add privileges occur.\n\n  All denials are logged by default if logging is enabled. To ensure that logging\n  is enabled, review supplementary content APPENDIX-C for instructions on\n  enabling logging."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000495-DB-000327","gid":"V-72977","rid":"SV-87629r2_rule","stig_id":"PGS9-00-006900","fix_id":"F-79423r1_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72977\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  add privileges/permissions occur.\"\n  desc  \"Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n\n  In an SQL environment, adding permissions is typically done via the GRANT\n  command, or, in the negative, the REVOKE command.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000495-DB-000327\"\n  tag \"gid\": \"V-72977\"\n  tag \"rid\": \"SV-87629r2_rule\"\n  tag \"stig_id\": \"PGS9-00-006900\"\n  tag \"fix_id\": \"F-79423r1_fix\"\n  tag \"cci\": [\"CCI-000172\"]\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"false_negatives\": nil\n  tag \"false_positives\": nil\n  tag \"documentable\": false\n  tag \"mitigations\": nil\n  tag \"severity_override_guidance\": false\n  tag \"potential_impacts\": nil\n  tag \"third_party_tools\": nil\n  tag \"mitigation_controls\": nil\n  tag \"responsibility\": nil\n  tag \"ia_controls\": nil\n  desc \"check\", \"First, as the database administrator (shown here as\n  \\\"postgres\\\"), create a role 'bob' and a test table by running the following\n  SQL: \n\n  $ sudo su - postgres \n  $ psql -c \\\"CREATE ROLE bob; CREATE TABLE test(id INT);\\\" \n\n  Next, set current role to bob and attempt to modify privileges: \n\n  $ psql -c \\\"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\\\" \n\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\n  unsuccessful attempt was logged: \n\n  $ sudo su - postgres \n  $ cat ${PGDATA?}/pg_log/<latest_log> \n  2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for\n  relation test \n  2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES\n  ON test TO bob; \n\n  If audit logs are not generated when unsuccessful attempts to add\n  privileges/permissions occur, this is a finding.\"\n  \n  desc \"fix\", \"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to add privileges occur.\n\n  All denials are logged by default if logging is enabled. To ensure that logging\n  is enabled, review supplementary content APPENDIX-C for instructions on\n  enabling logging.\"\n\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\n  \n  describe sql.query('CREATE ROLE bob; CREATE TABLE test(id INT);', [pg_db]) do\n  end\n\n  describe sql.query('SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;', [pg_db]) do\n    its('output') { should match /ERROR: permission denied for relation test/ }\n  end\n\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"permission denied for relation test\\\"\") do\n    its('stdout') { should match /^.*permission denied for relation test.*$/ }\n  end\nend\n","source_location":{"line":13,"ref":"controls/V-72977.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query with errors: SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob; output is expected to match /ERROR: permission denied for relation test/","run_time":0.000556905,"start_time":"2020-06-19T18:47:24+00:00","message":"expected \"\\nERROR:  permission denied for relation test\\ncommand terminated with exit code 1\\n\" to match /ERROR: permission denied for relation test/\nDiff:\n@@ -1,2 +1,4 @@\n-/ERROR: permission denied for relation test/\n+\n+ERROR:  permission denied for relation test\n+command terminated with exit code 1\n"},{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"permission denied for relation test\"` stdout is expected to match /^.*permission denied for relation test.*$/","run_time":0.421015023,"start_time":"2020-06-19T18:47:24+00:00"}]},{"id":"V-72909","title":"PostgreSQL must utilize centralized management of the content captured\n  in audit records generated by all components of PostgreSQL.","desc":"Without the ability to centrally manage the content captured in the\n  audit records, identification, troubleshooting, and correlation of suspicious\n  behavior would be difficult and could lead to a delayed or incomplete analysis\n  of an ongoing attack.\n\n  The content captured in audit records must be managed from a central\n  location (necessitating automation). Centralized management of audit records\n  and logs provides for efficiency in maintenance and management of records, as\n  well as the backup and archiving of those records.\n\n  PostgreSQL may write audit records to database tables, to files in the file\n  system, to other kinds of local repository, or directly to a centralized log\n  management system. Whatever the method used, it must be compatible with\n  off-loading the records to the centralized system.","descriptions":[{"label":"default","data":"Without the ability to centrally manage the content captured in the\n  audit records, identification, troubleshooting, and correlation of suspicious\n  behavior would be difficult and could lead to a delayed or incomplete analysis\n  of an ongoing attack.\n\n  The content captured in audit records must be managed from a central\n  location (necessitating automation). Centralized management of audit records\n  and logs provides for efficiency in maintenance and management of records, as\n  well as the backup and archiving of those records.\n\n  PostgreSQL may write audit records to database tables, to files in the file\n  system, to other kinds of local repository, or directly to a centralized log\n  management system. Whatever the method used, it must be compatible with\n  off-loading the records to the centralized system."},{"label":"check","data":"On UNIX systems, PostgreSQL can be configured to use stderr,\n  csvlog and syslog. To send logs to a centralized location, syslog should be\n  used.\n\n  As the database owner (shown here as \"postgres\"), ensure PostgreSQL uses\n  syslog by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_destination\"\n\n  As the database owner (shown here as \"postgres\"), check which log facility\n  PostgreSQL is configured by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW syslog_facility\"\n\n  Check with the organization to see how syslog facilities are defined in their\n  organization.\n\n  If PostgreSQL audit records are not written directly to or systematically\n  transferred to a centralized log management system, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  With logging enabled, as the database owner (shown here as \"postgres\"),\n  configure the follow parameters in postgresql.conf: \n\n  Note: Consult the organization on how syslog facilities are defined in the\n  syslog daemon configuration. \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  log_destination = 'syslog' \n  syslog_facility = 'LOCAL0' \n  syslog_ident = 'postgres' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000356-DB-000314","gid":"V-72909","rid":"SV-87561r2_rule","stig_id":"PGS9-00-003800","fix_id":"F-79351r2_fix","cci":["CCI-001844"],"nist":["AU-3 (2)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72909\" do\r\n  title \"PostgreSQL must utilize centralized management of the content captured\r\n  in audit records generated by all components of PostgreSQL.\"\r\n  desc  \"Without the ability to centrally manage the content captured in the\r\n  audit records, identification, troubleshooting, and correlation of suspicious\r\n  behavior would be difficult and could lead to a delayed or incomplete analysis\r\n  of an ongoing attack.\r\n\r\n  The content captured in audit records must be managed from a central\r\n  location (necessitating automation). Centralized management of audit records\r\n  and logs provides for efficiency in maintenance and management of records, as\r\n  well as the backup and archiving of those records.\r\n\r\n  PostgreSQL may write audit records to database tables, to files in the file\r\n  system, to other kinds of local repository, or directly to a centralized log\r\n  management system. Whatever the method used, it must be compatible with\r\n  off-loading the records to the centralized system.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000356-DB-000314\"\r\n  tag \"gid\": \"V-72909\"\r\n  tag \"rid\": \"SV-87561r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-003800\"\r\n  tag \"fix_id\": \"F-79351r2_fix\"\r\n  tag \"cci\": [\"CCI-001844\"]\r\n  tag \"nist\": [\"AU-3 (2)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"On UNIX systems, PostgreSQL can be configured to use stderr,\r\n  csvlog and syslog. To send logs to a centralized location, syslog should be\r\n  used.\r\n\r\n  As the database owner (shown here as \\\"postgres\\\"), ensure PostgreSQL uses\r\n  syslog by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_destination\\\"\r\n\r\n  As the database owner (shown here as \\\"postgres\\\"), check which log facility\r\n  PostgreSQL is configured by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW syslog_facility\\\"\r\n\r\n  Check with the organization to see how syslog facilities are defined in their\r\n  organization.\r\n\r\n  If PostgreSQL audit records are not written directly to or systematically\r\n  transferred to a centralized log management system, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  With logging enabled, as the database owner (shown here as \\\"postgres\\\"),\r\n  configure the follow parameters in postgresql.conf: \r\n\r\n  Note: Consult the organization on how syslog facilities are defined in the\r\n  syslog daemon configuration. \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  log_destination = 'syslog' \r\n  syslog_facility = 'LOCAL0' \r\n  syslog_ident = 'postgres' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW log_destination;', [pg_db]) do\r\n    its('output') { should match /syslog/i }\r\n  end\r\n\r\n  describe sql.query('SHOW syslog_facility;', [pg_db]) do\r\n    its('output') { should match /local[0-7]/i }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72909.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW log_destination; output is expected to match /syslog/i","run_time":0.000507347,"start_time":"2020-06-19T18:47:24+00:00","message":"expected \"stderr\" to match /syslog/i\nDiff:\n@@ -1,2 +1,2 @@\n-/syslog/i\n+\"stderr\"\n"},{"status":"passed","code_desc":"PostgreSQL query: SHOW syslog_facility; output is expected to match /local[0-7]/i","run_time":0.000106726,"start_time":"2020-06-19T18:47:24+00:00"}]},{"id":"V-72913","title":"PostgreSQL must produce audit records of its enforcement of access\n  restrictions associated with changes to the configuration of PostgreSQL or\n  database(s).","desc":"Without auditing the enforcement of access restrictions against\n  changes to configuration, it would be difficult to identify attempted attacks\n  and an audit trail would not be available for forensic investigation for\n  after-the-fact actions.\n\n  Enforcement actions are the methods or mechanisms used to prevent\n  unauthorized changes to configuration settings. Enforcement action methods may\n  be as simple as denying access to a file based on the application of file\n  permissions (access restriction). Audit items may consist of lists of actions\n  blocked by access restrictions or changes identified after the fact.","descriptions":[{"label":"default","data":"Without auditing the enforcement of access restrictions against\n  changes to configuration, it would be difficult to identify attempted attacks\n  and an audit trail would not be available for forensic investigation for\n  after-the-fact actions.\n\n  Enforcement actions are the methods or mechanisms used to prevent\n  unauthorized changes to configuration settings. Enforcement action methods may\n  be as simple as denying access to a file based on the application of file\n  permissions (access restriction). Audit items may consist of lists of actions\n  blocked by access restrictions or changes identified after the fact."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  To verify that system denies are logged when unprivileged users attempt to\n  change database configuration, as the database administrator (shown here as\n  \"postgres\"), run the following commands:\n\n  $ sudo su - postgres\n  $ psql\n\n  Next, create a role with no privileges, change the current role to that user\n  and attempt to change a configuration by running the following SQL:\n\n  CREATE ROLE bob;\n  SET ROLE bob;\n  SET pgaudit.role='test';\n\n  Now check pg_log (use the latest log):\n\n  $ cat ${PGDATA?}/pg_log/postgresql-Thu.log\n  < 2016-01-28 17:57:34.092 UTC bob postgres: >ERROR: permission denied to set\n  parameter \"pgaudit.role\"\n  < 2016-01-28 17:57:34.092 UTC bob postgres: >STATEMENT: SET pgaudit.role='test';\n\n  If the denial is not logged, this is a finding.\n\n  By default PostgreSQL configuration files are owned by the postgres user and\n  cannot be edited by non-privileged users:\n\n  $ ls -la ${PGDATA?} | grep postgresql.conf\n  -rw-------. 1 postgres postgres 21758 Jan 22 10:27 postgresql.conf\n\n  If postgresql.conf is not owned by the database owner and does not have read\n  and write permissions for the owner, this is a finding."},{"label":"fix","data":"Enable logging.\n\n  All denials are logged by default if logging is enabled. To ensure that logging\n  is enabled, review supplementary content APPENDIX-C for instructions on\n  enabling logging."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000381-DB-000361","gid":"V-72913","rid":"SV-87565r1_rule","stig_id":"PGS9-00-004100","fix_id":"F-79355r1_fix","cci":["CCI-001814"],"nist":["CM-5 (1)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72913\" do\r\n  title \"PostgreSQL must produce audit records of its enforcement of access\r\n  restrictions associated with changes to the configuration of PostgreSQL or\r\n  database(s).\"\r\n  desc  \"Without auditing the enforcement of access restrictions against\r\n  changes to configuration, it would be difficult to identify attempted attacks\r\n  and an audit trail would not be available for forensic investigation for\r\n  after-the-fact actions.\r\n\r\n  Enforcement actions are the methods or mechanisms used to prevent\r\n  unauthorized changes to configuration settings. Enforcement action methods may\r\n  be as simple as denying access to a file based on the application of file\r\n  permissions (access restriction). Audit items may consist of lists of actions\r\n  blocked by access restrictions or changes identified after the fact.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000381-DB-000361\"\r\n  tag \"gid\": \"V-72913\"\r\n  tag \"rid\": \"SV-87565r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-004100\"\r\n  tag \"fix_id\": \"F-79355r1_fix\"\r\n  tag \"cci\": [\"CCI-001814\"]\r\n  tag \"nist\": [\"CM-5 (1)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  To verify that system denies are logged when unprivileged users attempt to\r\n  change database configuration, as the database administrator (shown here as\r\n  \\\"postgres\\\"), run the following commands:\r\n\r\n  $ sudo su - postgres\r\n  $ psql\r\n\r\n  Next, create a role with no privileges, change the current role to that user\r\n  and attempt to change a configuration by running the following SQL:\r\n\r\n  CREATE ROLE bob;\r\n  SET ROLE bob;\r\n  SET pgaudit.role='test';\r\n\r\n  Now check pg_log (use the latest log):\r\n\r\n  $ cat ${PGDATA?}/pg_log/postgresql-Thu.log\r\n  < 2016-01-28 17:57:34.092 UTC bob postgres: >ERROR: permission denied to set\r\n  parameter \\\"pgaudit.role\\\"\r\n  < 2016-01-28 17:57:34.092 UTC bob postgres: >STATEMENT: SET pgaudit.role='test';\r\n\r\n  If the denial is not logged, this is a finding.\r\n\r\n  By default PostgreSQL configuration files are owned by the postgres user and\r\n  cannot be edited by non-privileged users:\r\n\r\n  $ ls -la ${PGDATA?} | grep postgresql.conf\r\n  -rw-------. 1 postgres postgres 21758 Jan 22 10:27 postgresql.conf\r\n\r\n  If postgresql.conf is not owned by the database owner and does not have read\r\n  and write permissions for the owner, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Enable logging.\r\n\r\n  All denials are logged by default if logging is enabled. To ensure that logging\r\n  is enabled, review supplementary content APPENDIX-C for instructions on\r\n  enabling logging.\"\r\n\r\n  #Execute an incorrectly-formed SQL statement with bad syntax, to prompt log ouput\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"CREATE ROLE pgauditrolefailuretest; SET ROLE pgauditrolefailuretest; SET pgaudit.role='test'; SET ROLE postgres; DROP ROLE IF EXISTS pgauditrolefailuretest;\\\"\") do\r\n    its('stdout') { should match // }\r\n  end\r\n\r\n  #Find the most recently modified log file in the pg_audit_log_dir, grep for the syntax error statement, and then\r\n  #test to validate the output matches the regex.\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"permission denied to set parameter\\\"\") do\r\n    its('stdout') { should match /^.*permission denied to set parameter .pgaudit.role..*$/ }\r\n  end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72913.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"CREATE ROLE pgauditrolefailuretest; SET ROLE pgauditrolefailuretest; SET pgaudit.role='test'; SET ROLE postgres; DROP ROLE IF EXISTS pgauditrolefailuretest;\"` stdout is expected to match //","run_time":0.409721049,"start_time":"2020-06-19T18:47:24+00:00"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"permission denied to set parameter\"` stdout is expected to match /^.*permission denied to set parameter .pgaudit.role..*$/","run_time":0.420938398,"start_time":"2020-06-19T18:47:25+00:00","message":"expected \"\" to match /^.*permission denied to set parameter .pgaudit.role..*$/\nDiff:\n@@ -1,2 +1,2 @@\n-/^.*permission denied to set parameter .pgaudit.role..*$/\n+\"\"\n"}]},{"id":"V-72915","title":"The audit information produced by PostgreSQL must be protected from\n  unauthorized read access.","desc":"If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is difficult, if not impossible, to achieve. In addition, access to\n  audit records provides information an attacker could potentially use to his or\n  her advantage.\n\n  To ensure the veracity of audit data, the information system and/or the\n  application must protect audit information from any and all unauthorized\n  access. This includes read, write, copy, etc.\n\n  This requirement can be achieved through multiple methods which will depend\n  upon system architecture and design. Some commonly employed methods include\n  ensuring log files enjoy the proper file system permissions utilizing file\n  system protections and limiting log data location.\n\n  Additionally, applications with user interfaces to audit records should not\n  allow for the unfettered manipulation of or access to those records via the\n  application. If the application provides access to the audit data, the\n  application becomes accountable for ensuring that audit information is\n  protected from unauthorized access.\n\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity.","descriptions":[{"label":"default","data":"If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is difficult, if not impossible, to achieve. In addition, access to\n  audit records provides information an attacker could potentially use to his or\n  her advantage.\n\n  To ensure the veracity of audit data, the information system and/or the\n  application must protect audit information from any and all unauthorized\n  access. This includes read, write, copy, etc.\n\n  This requirement can be achieved through multiple methods which will depend\n  upon system architecture and design. Some commonly employed methods include\n  ensuring log files enjoy the proper file system permissions utilizing file\n  system protections and limiting log data location.\n\n  Additionally, applications with user interfaces to audit records should not\n  allow for the unfettered manipulation of or access to those records via the\n  application. If the application provides access to the audit data, the\n  application becomes accountable for ensuring that audit information is\n  protected from unauthorized access.\n\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA. \n\n  Review locations of audit logs, both internal to the database and database\n  audit logs located at the operating system level. \n\n  Verify there are appropriate controls and permissions to protect the audit\n  information from unauthorized access. \n\n  #### syslog Logging \n\n  If PostgreSQL is configured to use syslog for logging, consult organization\n  location and permissions for syslog log files. \n\n  #### stderr Logging \n\n  As the database administrator (shown here as \"postgres\"), check the current\n  log_file_mode configuration by running the following: \n\n  Note: Consult the organization's documentation on acceptable log privileges. \n\n  $ sudo su - postgres \n  $ psql -c \"SHOW log_file_mode\" \n\n  If log_file_mode is not 600, this is a finding. \n\n  Next, check the current log_destination path by running the following SQL: \n\n  Note: This is relative to PGDATA. \n\n  $ psql -c \"SHOW log_destination\" \n\n  Next, verify the log files have the set configurations in the log_destination: \n\n  Note: Use location of logs from log_directory. \n\n  $ ls -l ${PGDATA?}/pg_log/ \n  total 32 \n  -rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log \n  -rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log \n  -rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log \n  -rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log \n  -rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log \n  -rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log \n\n  If logs with 600 permissions do not exist in log_destination, this is a\n  finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  #### syslog Logging \n\n  If PostgreSQL is configured to use syslog for logging, consult organization\n  location and permissions for syslog log files. \n\n  #### stderr Logging \n\n  If PostgreSQL is configured to use stderr for logging, permissions of the log\n  files can be set in postgresql.conf. \n\n  As the database administrator (shown here as \"postgres\"), edit the following\n  settings of logs in the postgresql.conf file: \n\n  Note: Consult the organization's documentation on acceptable log privileges. \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  log_file_mode = 0600 \n\n  Next, as the system administrator, reload the server with the new\n  configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?} \n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000118-DB-000059","gid":"V-72915","rid":"SV-87567r2_rule","stig_id":"PGS9-00-004200","fix_id":"F-79357r4_fix","cci":["CCI-000162"],"nist":["AU-9","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72915\" do\r\n  title \"The audit information produced by PostgreSQL must be protected from\r\n  unauthorized read access.\"\r\n  desc  \"If audit data were to become compromised, then competent forensic\r\n  analysis and discovery of the true source of potentially malicious system\r\n  activity is difficult, if not impossible, to achieve. In addition, access to\r\n  audit records provides information an attacker could potentially use to his or\r\n  her advantage.\r\n\r\n  To ensure the veracity of audit data, the information system and/or the\r\n  application must protect audit information from any and all unauthorized\r\n  access. This includes read, write, copy, etc.\r\n\r\n  This requirement can be achieved through multiple methods which will depend\r\n  upon system architecture and design. Some commonly employed methods include\r\n  ensuring log files enjoy the proper file system permissions utilizing file\r\n  system protections and limiting log data location.\r\n\r\n  Additionally, applications with user interfaces to audit records should not\r\n  allow for the unfettered manipulation of or access to those records via the\r\n  application. If the application provides access to the audit data, the\r\n  application becomes accountable for ensuring that audit information is\r\n  protected from unauthorized access.\r\n\r\n  Audit information includes all information (e.g., audit records, audit\r\n  settings, and audit reports) needed to successfully audit information system\r\n  activity.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000118-DB-000059\"\r\n  tag \"gid\": \"V-72915\"\r\n  tag \"rid\": \"SV-87567r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-004200\"\r\n  tag \"fix_id\": \"F-79357r4_fix\"\r\n  tag \"cci\": [\"CCI-000162\"]\r\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA. \r\n\r\n  Review locations of audit logs, both internal to the database and database\r\n  audit logs located at the operating system level. \r\n\r\n  Verify there are appropriate controls and permissions to protect the audit\r\n  information from unauthorized access. \r\n\r\n  #### syslog Logging \r\n\r\n  If PostgreSQL is configured to use syslog for logging, consult organization\r\n  location and permissions for syslog log files. \r\n\r\n  #### stderr Logging \r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), check the current\r\n  log_file_mode configuration by running the following: \r\n\r\n  Note: Consult the organization's documentation on acceptable log privileges. \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"SHOW log_file_mode\\\" \r\n\r\n  If log_file_mode is not 600, this is a finding. \r\n\r\n  Next, check the current log_destination path by running the following SQL: \r\n\r\n  Note: This is relative to PGDATA. \r\n\r\n  $ psql -c \\\"SHOW log_destination\\\" \r\n\r\n  Next, verify the log files have the set configurations in the log_destination: \r\n\r\n  Note: Use location of logs from log_directory. \r\n\r\n  $ ls -l ${PGDATA?}/pg_log/ \r\n  total 32 \r\n  -rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log \r\n  -rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log \r\n  -rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log \r\n  -rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log \r\n  -rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log \r\n  -rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log \r\n\r\n  If logs with 600 permissions do not exist in log_destination, this is a\r\n  finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  #### syslog Logging \r\n\r\n  If PostgreSQL is configured to use syslog for logging, consult organization\r\n  location and permissions for syslog log files. \r\n\r\n  #### stderr Logging \r\n\r\n  If PostgreSQL is configured to use stderr for logging, permissions of the log\r\n  files can be set in postgresql.conf. \r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), edit the following\r\n  settings of logs in the postgresql.conf file: \r\n\r\n  Note: Consult the organization's documentation on acceptable log privileges. \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  log_file_mode = 0600 \r\n\r\n  Next, as the system administrator, reload the server with the new\r\n  configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?} \r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"SHOW log_file_mode\\\"\") do\r\n   its('stdout') { should match /0600/ }\r\n  end\r\n\r\n  command(\"find #{pg_audit_log_dir} -type f\").stdout.split.each do |logfile|\r\n  describe file(logfile) do\r\n    its('mode') { should cmp '0600' }\r\n  end\r\n  end\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72915.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"SHOW log_file_mode\"` stdout is expected to match /0600/","run_time":0.442970434,"start_time":"2020-06-19T18:47:25+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_log/postgresql-Mon.log mode is expected to cmp == \"0600\"","run_time":0.421044976,"start_time":"2020-06-19T18:47:26+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_log/postgresql-Tue.log mode is expected to cmp == \"0600\"","run_time":0.52761887,"start_time":"2020-06-19T18:47:26+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_log/postgresql-Wed.log mode is expected to cmp == \"0600\"","run_time":0.397581449,"start_time":"2020-06-19T18:47:27+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_log/postgresql-Thu.log mode is expected to cmp == \"0600\"","run_time":0.412824994,"start_time":"2020-06-19T18:47:27+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_log/postgresql-Fri.log mode is expected to cmp == \"0600\"","run_time":0.446965043,"start_time":"2020-06-19T18:47:27+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_log/postgresql-Sat.log mode is expected to cmp == \"0600\"","run_time":0.425067149,"start_time":"2020-06-19T18:47:28+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_log/postgresql-Sun.log mode is expected to cmp == \"0600\"","run_time":0.426373784,"start_time":"2020-06-19T18:47:28+00:00"}]},{"id":"V-72863","title":"PostgreSQL must limit the number of concurrent sessions to an\n  organization-defined number per user for all accounts and/or account types.","desc":"Database management includes the ability to control the number of\n  users and user sessions utilizing PostgreSQL. Unlimited concurrent connections\n  to PostgreSQL could allow a successful Denial of Service (DoS) attack by\n  exhausting connection resources; and a system can also fail or be degraded by\n  an overload of legitimate users. Limiting the number of concurrent sessions per\n  user is helpful in reducing these risks.\n\n  This requirement addresses concurrent session control for a single account.\n  It does not address concurrent sessions by a single user via multiple system\n  accounts; and it does not deal with the total number of sessions across all\n  accounts.\n\n  The capability to limit the number of concurrent sessions per user must be\n  configured in or added to PostgreSQL (for example, by use of a logon trigger),\n  when this is technically feasible. Note that it is not sufficient to limit\n  sessions via a web server or application server alone, because legitimate users\n  and adversaries can potentially connect to PostgreSQL by other means.\n\n  The organization will need to define the maximum number of concurrent\n  sessions by account type, by account, or a combination thereof. In deciding on\n  the appropriate number, it is important to consider the work requirements of\n  the various types of users. For example, 2 might be an acceptable limit for\n  general users accessing the database via an application; but 10 might be too\n  few for a database administrator using a database management GUI tool, where\n  each query tab and navigation pane may count as a separate session.\n\n  (Sessions may also be referred to as connections or logons, which for the\n  purposes of this requirement are synonyms.)","descriptions":[{"label":"default","data":"Database management includes the ability to control the number of\n  users and user sessions utilizing PostgreSQL. Unlimited concurrent connections\n  to PostgreSQL could allow a successful Denial of Service (DoS) attack by\n  exhausting connection resources; and a system can also fail or be degraded by\n  an overload of legitimate users. Limiting the number of concurrent sessions per\n  user is helpful in reducing these risks.\n\n  This requirement addresses concurrent session control for a single account.\n  It does not address concurrent sessions by a single user via multiple system\n  accounts; and it does not deal with the total number of sessions across all\n  accounts.\n\n  The capability to limit the number of concurrent sessions per user must be\n  configured in or added to PostgreSQL (for example, by use of a logon trigger),\n  when this is technically feasible. Note that it is not sufficient to limit\n  sessions via a web server or application server alone, because legitimate users\n  and adversaries can potentially connect to PostgreSQL by other means.\n\n  The organization will need to define the maximum number of concurrent\n  sessions by account type, by account, or a combination thereof. In deciding on\n  the appropriate number, it is important to consider the work requirements of\n  the various types of users. For example, 2 might be an acceptable limit for\n  general users accessing the database via an application; but 10 might be too\n  few for a database administrator using a database management GUI tool, where\n  each query tab and navigation pane may count as a separate session.\n\n  (Sessions may also be referred to as connections or logons, which for the\n  purposes of this requirement are synonyms.)"},{"label":"check","data":"To check the total amount of connections allowed by the database,\n  as the database administrator, run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW max_connections\"\n\n  If the total amount of connections is greater than documented by an\n  organization, this is a finding.\n\n  To check the amount of connections allowed for each role, as the database\n  administrator, run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SELECT rolname, rolconnlimit from pg_authid\"\n\n  If any roles have more connections configured than documented, this is a\n  finding. A value of -1 indicates Unlimited, and is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To configure the maximum amount of connections allowed to the database, as the\n  database administrator (shown here as \"postgres\") change the following in\n  postgresql.conf (the value 10 is an example; set the value to suit local\n  conditions): \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  max_connections = 10 \n\n  Next, restart the database: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl restart postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} restart \n\n  To limit the amount of connections allowed by a specific role, as the database\n  administrator, run the following SQL: \n\n  $ psql -c \"ALTER ROLE <rolname> CONNECTION LIMIT 1\";"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000001-DB-000031","gid":"V-72863","rid":"SV-87515r2_rule","stig_id":"PGS9-00-001200","fix_id":"F-79305r2_fix","cci":["CCI-000054"],"nist":["AC-10","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72863\" do\r\n  title \"PostgreSQL must limit the number of concurrent sessions to an\r\n  organization-defined number per user for all accounts and/or account types.\"\r\n  desc  \"Database management includes the ability to control the number of\r\n  users and user sessions utilizing PostgreSQL. Unlimited concurrent connections\r\n  to PostgreSQL could allow a successful Denial of Service (DoS) attack by\r\n  exhausting connection resources; and a system can also fail or be degraded by\r\n  an overload of legitimate users. Limiting the number of concurrent sessions per\r\n  user is helpful in reducing these risks.\r\n\r\n  This requirement addresses concurrent session control for a single account.\r\n  It does not address concurrent sessions by a single user via multiple system\r\n  accounts; and it does not deal with the total number of sessions across all\r\n  accounts.\r\n\r\n  The capability to limit the number of concurrent sessions per user must be\r\n  configured in or added to PostgreSQL (for example, by use of a logon trigger),\r\n  when this is technically feasible. Note that it is not sufficient to limit\r\n  sessions via a web server or application server alone, because legitimate users\r\n  and adversaries can potentially connect to PostgreSQL by other means.\r\n\r\n  The organization will need to define the maximum number of concurrent\r\n  sessions by account type, by account, or a combination thereof. In deciding on\r\n  the appropriate number, it is important to consider the work requirements of\r\n  the various types of users. For example, 2 might be an acceptable limit for\r\n  general users accessing the database via an application; but 10 might be too\r\n  few for a database administrator using a database management GUI tool, where\r\n  each query tab and navigation pane may count as a separate session.\r\n\r\n  (Sessions may also be referred to as connections or logons, which for the\r\n  purposes of this requirement are synonyms.)\r\n  \"\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000001-DB-000031\"\r\n  tag \"gid\": \"V-72863\"\r\n  tag \"rid\": \"SV-87515r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-001200\"\r\n  tag \"fix_id\": \"F-79305r2_fix\"\r\n  tag \"cci\": [\"CCI-000054\"]\r\n  tag \"nist\": [\"AC-10\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"To check the total amount of connections allowed by the database,\r\n  as the database administrator, run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW max_connections\\\"\r\n\r\n  If the total amount of connections is greater than documented by an\r\n  organization, this is a finding.\r\n\r\n  To check the amount of connections allowed for each role, as the database\r\n  administrator, run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SELECT rolname, rolconnlimit from pg_authid\\\"\r\n\r\n  If any roles have more connections configured than documented, this is a\r\n  finding. A value of -1 indicates Unlimited, and is a finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To configure the maximum amount of connections allowed to the database, as the\r\n  database administrator (shown here as \\\"postgres\\\") change the following in\r\n  postgresql.conf (the value 10 is an example; set the value to suit local\r\n  conditions): \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  max_connections = 10 \r\n\r\n  Next, restart the database: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl restart postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} restart \r\n\r\n  To limit the amount of connections allowed by a specific role, as the database\r\n  administrator, run the following SQL: \r\n\r\n  $ psql -c \\\"ALTER ROLE <rolname> CONNECTION LIMIT 1\\\";\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW max_connections;', [pg_db]) do\r\n    its('output') { should be <= pg_max_connections }\r\n  end\r\n\r\n  describe sql.query('SELECT rolname, rolconnlimit from pg_authid EXCEPT SELECT rolname, rolconnlimit from pg_authid where rolname = \\'pg_signal_backend\\';', [pg_db]) do\r\n    its('output') { should_not include '-1' }\r\n  end\r\nend\r\n","source_location":{"line":13,"ref":"controls/V-72863.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SHOW max_connections; output is expected to be <= 100","run_time":0.000223327,"start_time":"2020-06-19T18:47:29+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT rolname, rolconnlimit from pg_authid EXCEPT SELECT rolname, rolconnlimit from pg_authid where rolname = 'pg_signal_backend'; output is expected not to include \"-1\"","run_time":0.000165981,"start_time":"2020-06-19T18:47:29+00:00"}]},{"id":"V-72919","title":"PostgreSQL must generate audit records when categorized information\n  (e.g., classification levels/security levels) is accessed.","desc":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n      For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.","descriptions":[{"label":"default","data":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n      For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems."},{"label":"check","data":"As the database administrator (shown here as \"postgres\"), run\n  the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW pgaudit.log\"\n\n  If pgaudit.log does not contain, \"ddl, write, role\", this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Using pgaudit the DBMS (PostgreSQL) can be configured to audit these requests.\n  See supplementary content APPENDIX-B for documentation on installing pgaudit.\n\n  With pgaudit installed the following configurations can be made:\n\n  $ sudo su - postgres\n\n  $ vi ${PGDATA?}/postgresql.conf\n\n  Add the following parameters (or edit existing parameters):\n\n  pgaudit.log = 'ddl, write, role'\n\n  Now, as the system administrator, reload the server with the new configuration:\n\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql- ${PGVER?}\n\n  # INITD SERVER ONLY\n  $ sudo service postgresql- ${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000494-DB-000344","gid":"V-72919","rid":"SV-87571r2_rule","stig_id":"PGS9-00-004400","fix_id":"F-79363r3_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72919\" do\r\n  title \"PostgreSQL must generate audit records when categorized information\r\n  (e.g., classification levels/security levels) is accessed.\"\r\n  desc  \"Changes in categorized information must be tracked. Without an audit\r\n  trail, unauthorized access to protected data could go undetected.\r\n\r\n      For detailed information on categorizing information, refer to FIPS\r\n  Publication 199, Standards for Security Categorization of Federal Information\r\n  and Information Systems, and FIPS Publication 200, Minimum Security\r\n  Requirements for Federal Information and Information Systems.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000494-DB-000344\"\r\n  tag \"gid\": \"V-72919\"\r\n  tag \"rid\": \"SV-87571r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-004400\"\r\n  tag \"fix_id\": \"F-79363r3_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator (shown here as \\\"postgres\\\"), run\r\n  the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n\r\n  If pgaudit.log does not contain, \\\"ddl, write, role\\\", this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Using pgaudit the DBMS (PostgreSQL) can be configured to audit these requests.\r\n  See supplementary content APPENDIX-B for documentation on installing pgaudit.\r\n\r\n  With pgaudit installed the following configurations can be made:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ vi ${PGDATA?}/postgresql.conf\r\n\r\n  Add the following parameters (or edit existing parameters):\r\n\r\n  pgaudit.log = 'ddl, write, role'\r\n\r\n  Now, as the system administrator, reload the server with the new configuration:\r\n\r\n\r\n  # SYSTEMD SERVER ONLY\r\n  $ sudo systemctl reload postgresql- ${PGVER?}\r\n\r\n  # INITD SERVER ONLY\r\n  $ sudo service postgresql- ${PGVER?} reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  pgaudit_types = %w(ddl role write)\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72919.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"ddl\"","run_time":0.00039978,"start_time":"2020-06-19T18:47:29+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.000286484,"start_time":"2020-06-19T18:47:29+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.000307871,"start_time":"2020-06-19T18:47:29+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-72921","title":"PostgreSQL must generate audit records when unsuccessful attempts to\n  access security objects occur.","desc":"Changes to the security configuration must be tracked.\n\n  This requirement applies to situations where security data is retrieved or\n  modified via data manipulation operations, as opposed to via specialized\n  security functionality.\n\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n\n      SELECT\n      INSERT\n      UPDATE\n      DELETE\n      EXECUTE\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.","descriptions":[{"label":"default","data":"Changes to the security configuration must be tracked.\n\n  This requirement applies to situations where security data is retrieved or\n  modified via data manipulation operations, as opposed to via specialized\n  security functionality.\n\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n\n      SELECT\n      INSERT\n      UPDATE\n      DELETE\n      EXECUTE\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  First, as the database administrator (shown here as \"postgres\"), setup a test\n  schema and revoke users privileges from using it by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE SCHEMA stig_test_schema AUTHORIZATION postgres\"\n  $ psql -c \"REVOKE ALL ON SCHEMA stig_test_schema FROM public\"\n  $ psql -c \"GRANT ALL ON SCHEMA stig_test_schema TO postgres\"\n\n  Next, create a test table, insert a value into that table for the following\n  checks by running the following SQL:\n\n  $ psql -c \"CREATE TABLE stig_test_schema.stig_test_table(id INT)\"\n  $ psql -c \"INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0)\"\n\n  #### CREATE\n  Attempt to CREATE a table in the stig_test_schema schema with a role that does\n  not have privileges by running the following SQL:\n\n  psql -c \"CREATE ROLE bob; SET ROLE bob; CREATE TABLE\n  stig_test_schema.test_table(id INT);\"\n  ERROR: permission denied for schema stig_test_schema\n\n  Next, as a database administrator (shown here as \"postgres\"), verify that the\n  denial was logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 14\n  < 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  CREATE TABLE stig_test_schema.test_table(id INT);\n\n  If the denial is not logged, this is a finding.\n\n  #### INSERT\n  As role bob, attempt to INSERT into the table created earlier, stig_test_table\n  by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; INSERT INTO stig_test_schema.stig_test_table(id)\n  VALUES (0);\"\n\n  Next, as a database administrator (shown here as \"postgres\"), verify that the\n  denial was logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 09:58:30.709 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 13\n  < 2016-03-09 09:58:30.709 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0);\n\n  If the denial is not logged, this is a finding.\n\n  #### SELECT\n  As role bob, attempt to SELECT from the table created earlier, stig_test_table\n  by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; SELECT * FROM stig_test_schema.stig_test_table;\"\n\n  Next, as a database administrator (shown here as \"postgres\"), verify that the\n  denial was logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 15\n  < 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  SELECT * FROM stig_test_schema.stig_test_table;\n\n  If the denial is not logged, this is a finding.\n\n  #### ALTER\n  As role bob, attempt to ALTER the table created earlier, stig_test_table by\n  running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; ALTER TABLE stig_test_schema.stig_test_table ADD\n  COLUMN name TEXT;\"\n\n  Next, as a database administrator (shown here as \"postgres\"), verify that the\n  denial was logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:03:43.765 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  ALTER TABLE stig_test_schema.stig_test_table ADD COLUMN name TEXT;\n\n  If the denial is not logged, this is a finding.\n\n  #### UPDATE\n  As role bob, attempt to UPDATE a row created earlier, stig_test_table by\n  running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; UPDATE stig_test_schema.stig_test_table SET id=1\n  WHERE id=0;\"\n\n  Next, as a database administrator (shown here as \"postgres\"), verify that the\n  denial was logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 8\n  < 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  UPDATE stig_test_schema.stig_test_table SET id=1 WHERE id=0;\n\n  If the denial is not logged, this is a finding.\n\n  #### DELETE\n  As role bob, attempt to DELETE a row created earlier, stig_test_table by\n  running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; DELETE FROM stig_test_schema.stig_test_table WHERE\n  id=0;\"\n\n  Next, as a database administrator (shown here as \"postgres\"), verify that the\n  denial was logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 13\n  < 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  DELETE FROM stig_test_schema.stig_test_table WHERE id=0;\n\n  If the denial is not logged, this is a finding.\n\n  #### PREPARE\n  As role bob, attempt to execute a prepared system using PREPARE by running the\n  following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; PREPARE stig_test_plan(int) AS SELECT id FROM\n  stig_test_schema.stig_test_table WHERE id=$1;\"\n\n  Next, as a database administrator (shown here as \"postgres\"), verify that the\n  denial was logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 46\n  < 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >STATEMENT:\n  PREPARE stig_test_plan(int) AS SELECT id FROM stig_test_schema.stig_test_table\n  WHERE id=$1;\n\n  If the denial is not logged, this is a finding.\n\n  #### DROP\n  As role bob, attempt to DROP the table created earlier stig_test_table by\n  running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; DROP TABLE stig_test_schema.stig_test_table;\"\n\n  Next, as a database administrator (shown here as \"postgres\"), verify that the\n  denial was logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >ERROR:\n  permission denied for schema stig_test_schema\n  < 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >STATEMENT: DROP\n  TABLE stig_test_schema.stig_test_table;\n\n  If the denial is not logged, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access security objects occur.\n\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000492-DB-000333","gid":"V-72921","rid":"SV-87573r1_rule","stig_id":"PGS9-00-004500","fix_id":"F-79365r1_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72921\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\r\n  access security objects occur.\"\r\n  desc  \"Changes to the security configuration must be tracked.\r\n\r\n  This requirement applies to situations where security data is retrieved or\r\n  modified via data manipulation operations, as opposed to via specialized\r\n  security functionality.\r\n\r\n  In an SQL environment, types of access include, but are not necessarily\r\n  limited to:\r\n\r\n      SELECT\r\n      INSERT\r\n      UPDATE\r\n      DELETE\r\n      EXECUTE\r\n\r\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\r\n  addition to the successful ones.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000492-DB-000333\"\r\n  tag \"gid\": \"V-72921\"\r\n  tag \"rid\": \"SV-87573r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-004500\"\r\n  tag \"fix_id\": \"F-79365r1_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), setup a test\r\n  schema and revoke users privileges from using it by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"CREATE SCHEMA stig_test_schema AUTHORIZATION postgres\\\"\r\n  $ psql -c \\\"REVOKE ALL ON SCHEMA stig_test_schema FROM public\\\"\r\n  $ psql -c \\\"GRANT ALL ON SCHEMA stig_test_schema TO postgres\\\"\r\n\r\n  Next, create a test table, insert a value into that table for the following\r\n  checks by running the following SQL:\r\n\r\n  $ psql -c \\\"CREATE TABLE stig_test_schema.stig_test_table(id INT)\\\"\r\n  $ psql -c \\\"INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0)\\\"\r\n\r\n  #### CREATE\r\n  Attempt to CREATE a table in the stig_test_schema schema with a role that does\r\n  not have privileges by running the following SQL:\r\n\r\n  psql -c \\\"CREATE ROLE bob; SET ROLE bob; CREATE TABLE\r\n  stig_test_schema.test_table(id INT);\\\"\r\n  ERROR: permission denied for schema stig_test_schema\r\n\r\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that the\r\n  denial was logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >ERROR:\r\n  permission denied for schema stig_test_schema at character 14\r\n  < 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >STATEMENT:\r\n  CREATE TABLE stig_test_schema.test_table(id INT);\r\n\r\n  If the denial is not logged, this is a finding.\r\n\r\n  #### INSERT\r\n  As role bob, attempt to INSERT into the table created earlier, stig_test_table\r\n  by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SET ROLE bob; INSERT INTO stig_test_schema.stig_test_table(id)\r\n  VALUES (0);\\\"\r\n\r\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that the\r\n  denial was logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-03-09 09:58:30.709 EST postgres 56e0393f.186b postgres: >ERROR:\r\n  permission denied for schema stig_test_schema at character 13\r\n  < 2016-03-09 09:58:30.709 EST postgres 56e0393f.186b postgres: >STATEMENT:\r\n  INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0);\r\n\r\n  If the denial is not logged, this is a finding.\r\n\r\n  #### SELECT\r\n  As role bob, attempt to SELECT from the table created earlier, stig_test_table\r\n  by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SET ROLE bob; SELECT * FROM stig_test_schema.stig_test_table;\\\"\r\n\r\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that the\r\n  denial was logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >ERROR:\r\n  permission denied for schema stig_test_schema at character 15\r\n  < 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >STATEMENT:\r\n  SELECT * FROM stig_test_schema.stig_test_table;\r\n\r\n  If the denial is not logged, this is a finding.\r\n\r\n  #### ALTER\r\n  As role bob, attempt to ALTER the table created earlier, stig_test_table by\r\n  running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SET ROLE bob; ALTER TABLE stig_test_schema.stig_test_table ADD\r\n  COLUMN name TEXT;\\\"\r\n\r\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that the\r\n  denial was logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-03-09 10:03:43.765 EST postgres 56e0393f.186b postgres: >STATEMENT:\r\n  ALTER TABLE stig_test_schema.stig_test_table ADD COLUMN name TEXT;\r\n\r\n  If the denial is not logged, this is a finding.\r\n\r\n  #### UPDATE\r\n  As role bob, attempt to UPDATE a row created earlier, stig_test_table by\r\n  running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SET ROLE bob; UPDATE stig_test_schema.stig_test_table SET id=1\r\n  WHERE id=0;\\\"\r\n\r\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that the\r\n  denial was logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >ERROR:\r\n  permission denied for schema stig_test_schema at character 8\r\n  < 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >STATEMENT:\r\n  UPDATE stig_test_schema.stig_test_table SET id=1 WHERE id=0;\r\n\r\n  If the denial is not logged, this is a finding.\r\n\r\n  #### DELETE\r\n  As role bob, attempt to DELETE a row created earlier, stig_test_table by\r\n  running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SET ROLE bob; DELETE FROM stig_test_schema.stig_test_table WHERE\r\n  id=0;\\\"\r\n\r\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that the\r\n  denial was logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >ERROR:\r\n  permission denied for schema stig_test_schema at character 13\r\n  < 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >STATEMENT:\r\n  DELETE FROM stig_test_schema.stig_test_table WHERE id=0;\r\n\r\n  If the denial is not logged, this is a finding.\r\n\r\n  #### PREPARE\r\n  As role bob, attempt to execute a prepared system using PREPARE by running the\r\n  following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SET ROLE bob; PREPARE stig_test_plan(int) AS SELECT id FROM\r\n  stig_test_schema.stig_test_table WHERE id=$1;\\\"\r\n\r\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that the\r\n  denial was logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >ERROR:\r\n  permission denied for schema stig_test_schema at character 46\r\n  < 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >STATEMENT:\r\n  PREPARE stig_test_plan(int) AS SELECT id FROM stig_test_schema.stig_test_table\r\n  WHERE id=$1;\r\n\r\n  If the denial is not logged, this is a finding.\r\n\r\n  #### DROP\r\n  As role bob, attempt to DROP the table created earlier stig_test_table by\r\n  running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SET ROLE bob; DROP TABLE stig_test_schema.stig_test_table;\\\"\r\n\r\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that the\r\n  denial was logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >ERROR:\r\n  permission denied for schema stig_test_schema\r\n  < 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >STATEMENT: DROP\r\n  TABLE stig_test_schema.stig_test_table;\r\n\r\n  If the denial is not logged, this is a finding.\"\r\n\r\n  desc \"fix\", \"Configure PostgreSQL to produce audit records when unsuccessful\r\n  attempts to access security objects occur.\r\n\r\n  All denials are logged if logging is enabled. To ensure that logging is\r\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\r\n  logging.\"\r\n\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"CREATE ROLE permdeniedtest; CREATE SCHEMA permdeniedschema; SET ROLE permdeniedtest; CREATE TABLE permdeniedschema.usertable(index int);\\\"\") do\r\n   its('stdout') { should match // }\r\n  end\r\n\r\n  #Find the most recently modified log file in the pg_audit_log_dir, grep for the syntax error statement, and then\r\n  #test to validate the output matches the regex.\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"permission denied for schema\\\"\") do\r\n    its('stdout') { should match /^.*permission denied for schema permdeniedschema..*$/ }\r\n  end\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"SET ROLE postgres; DROP SCHEMA IF EXISTS permdeniedschema; DROP ROLE IF EXISTS permdeniedtest;\\\"\") do\r\n   its('stdout') { should match // }\r\n  end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72921.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"CREATE ROLE permdeniedtest; CREATE SCHEMA permdeniedschema; SET ROLE permdeniedtest; CREATE TABLE permdeniedschema.usertable(index int);\"` stdout is expected to match //","run_time":0.436132435,"start_time":"2020-06-19T18:47:29+00:00"},{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"permission denied for schema\"` stdout is expected to match /^.*permission denied for schema permdeniedschema..*$/","run_time":0.42441469,"start_time":"2020-06-19T18:47:29+00:00"},{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"SET ROLE postgres; DROP SCHEMA IF EXISTS permdeniedschema; DROP ROLE IF EXISTS permdeniedtest;\"` stdout is expected to match //","run_time":0.430981788,"start_time":"2020-06-19T18:47:29+00:00"}]},{"id":"V-72923","title":"PostgreSQL must generate audit records when unsuccessful logons or\n  connection attempts occur.","desc":"For completeness of forensic analysis, it is necessary to track failed\n  attempts to log on to PostgreSQL. While positive identification may not be\n  possible in a case of failed authentication, as much information as possible\n  about the incident must be captured.","descriptions":[{"label":"default","data":"For completeness of forensic analysis, it is necessary to track failed\n  attempts to log on to PostgreSQL. While positive identification may not be\n  possible in a case of failed authentication, as much information as possible\n  about the incident must be captured."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  In this example the user joe will log into the Postgres database unsuccessfully:\n\n  $ psql -d postgres -U joe\n\n  As the database administrator (shown here as \"postgres\"), check pg_log for a\n  FATAL connection audit trail:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/postgresql-Tue.log\n  < 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >LOG: connection\n  authorized: user=joe database=postgres\n  < 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >FATAL: role \"joe\"\n  does not exist\n\n  If an audit record is not generated each time a user (or other principal)\n  attempts, but fails to log on or connect to PostgreSQL (including attempts\n  where the user ID is invalid/unknown), this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  If logging is enabled the following configurations must be made to log\n  unsuccessful connections, date/time, username, and session identifier. \n\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Edit the following parameters: \n\n  log_connections = on \n  log_line_prefix = '< %m %u %c: >'  \n\n  Where: \n  * %m is the time and date \n  * %u is the username \n  * %c is the session ID for the connection \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000503-DB-000351","gid":"V-72923","rid":"SV-87575r2_rule","stig_id":"PGS9-00-004600","fix_id":"F-79367r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72923\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful logons or\r\n  connection attempts occur.\"\r\n  desc  \"For completeness of forensic analysis, it is necessary to track failed\r\n  attempts to log on to PostgreSQL. While positive identification may not be\r\n  possible in a case of failed authentication, as much information as possible\r\n  about the incident must be captured.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000503-DB-000351\"\r\n  tag \"gid\": \"V-72923\"\r\n  tag \"rid\": \"SV-87575r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-004600\"\r\n  tag \"fix_id\": \"F-79367r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  In this example the user joe will log into the Postgres database unsuccessfully:\r\n\r\n  $ psql -d postgres -U joe\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), check pg_log for a\r\n  FATAL connection audit trail:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/postgresql-Tue.log\r\n  < 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >LOG: connection\r\n  authorized: user=joe database=postgres\r\n  < 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >FATAL: role \\\"joe\\\"\r\n  does not exist\r\n\r\n  If an audit record is not generated each time a user (or other principal)\r\n  attempts, but fails to log on or connect to PostgreSQL (including attempts\r\n  where the user ID is invalid/unknown), this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  If logging is enabled the following configurations must be made to log\r\n  unsuccessful connections, date/time, username, and session identifier. \r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), edit\r\n  postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Edit the following parameters: \r\n\r\n  log_connections = on \r\n  log_line_prefix = '< %m %u %c: >'  \r\n\r\n  Where: \r\n  * %m is the time and date \r\n  * %u is the username \r\n  * %c is the session ID for the connection \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"SET ROLE pgauditrolefailuretest;\\\"\") do\r\n    its('stdout') { should match // }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"does not exist\\\"\") do\r\n    its('stdout') { should match /^.*role .foo. does not exist.*$/ }\r\n  end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72923.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"SET ROLE pgauditrolefailuretest;\"` stdout is expected to match //","run_time":0.448583785,"start_time":"2020-06-19T18:47:30+00:00"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"does not exist\"` stdout is expected to match /^.*role .foo. does not exist.*$/","run_time":0.438478429,"start_time":"2020-06-19T18:47:30+00:00","message":"expected \"psql postgres db 113619 ::1(47768) 2020-06-19 15:55:07 UTC 5eecdfdb.1bbd3 ERROR:  role \\\"pgauditrole...230) 2020-06-19 18:47:30 UTC 5eed0842.7078 ERROR:  role \\\"pgauditrolefailuretest\\\" does not exist\\n\" to match /^.*role .foo. does not exist.*$/\nDiff:\n@@ -1,2 +1,11 @@\n-/^.*role .foo. does not exist.*$/\n+psql postgres db 113619 ::1(47768) 2020-06-19 15:55:07 UTC 5eecdfdb.1bbd3 ERROR:  role \"pgauditrolefailuretest\" does not exist\n+psql postgres db 117934 ::1(51182) 2020-06-19 15:58:35 UTC 5eece0ab.1ccae ERROR:  role \"pgauditrolefailuretest\" does not exist\n+psql postgres db 122255 ::1(54520) 2020-06-19 16:01:56 UTC 5eece174.1dd8f ERROR:  role \"pgauditrolefailuretest\" does not exist\n+psql postgres db 126651 ::1(51722) 2020-06-19 16:42:15 UTC 5eeceae7.1eebb ERROR:  role \"pgauditrolefailuretest\" does not exist\n+psql postgres db 3146 ::1(59542) 2020-06-19 16:51:28 UTC 5eeced10.c4a ERROR:  role \"pgauditrolefailuretest\" does not exist\n+psql postgres db 7605 ::1(52696) 2020-06-19 17:25:01 UTC 5eecf4ed.1db5 ERROR:  role \"pgauditrolefailuretest\" does not exist\n+psql postgres db 11928 ::1(59304) 2020-06-19 17:33:49 UTC 5eecf6fd.2e98 ERROR:  role \"pgauditrolefailuretest\" does not exist\n+psql postgres db 16558 ::1(45692) 2020-06-19 17:55:54 UTC 5eecfc2a.40ae ERROR:  role \"pgauditrolefailuretest\" does not exist\n+psql postgres db 24141 ::1(55688) 2020-06-19 18:08:38 UTC 5eecff26.5e4d ERROR:  role \"pgauditrolefailuretest\" does not exist\n+psql postgres db 28792 ::1(52230) 2020-06-19 18:47:30 UTC 5eed0842.7078 ERROR:  role \"pgauditrolefailuretest\" does not exist\n"}]},{"id":"V-72925","title":"PostgreSQL must generate audit records showing starting and ending\ntime for user access to the database(s).","desc":"For completeness of forensic analysis, it is necessary to know how\nlong a user's (or other principal's) connection to PostgreSQL lasts. This can\nbe achieved by recording disconnections, in addition to logons/connections, in\nthe audit logs.\n\n    Disconnection may be initiated by the user or forced by the system (as in a\ntimeout) or result from a system or network failure. To the greatest extent\npossible, all disconnections must be logged.","descriptions":[{"label":"default","data":"For completeness of forensic analysis, it is necessary to know how\nlong a user's (or other principal's) connection to PostgreSQL lasts. This can\nbe achieved by recording disconnections, in addition to logons/connections, in\nthe audit logs.\n\n    Disconnection may be initiated by the user or forced by the system (as in a\ntimeout) or result from a system or network failure. To the greatest extent\npossible, all disconnections must be logged."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  First, log into the database with the postgres user by running the following\n  commands:\n\n  $ sudo su - postgres\n  $ psql -U postgres\n\n  Next, as the database administrator, verify the log for a connection audit\n  trail:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/postgresql-Tue.log\n  < 2016-02-23 20:25:39.931 EST postgres 56cfa993.7a72 postgres: >LOG: connection\n  authorized: user=postgres database=postgres\n  < 2016-02-23 20:27:45.428 EST postgres 56cfa993.7a72 postgres: >LOG: AUDIT:\n  SESSION,1,1,READ,SELECT,,,SELECT current_user;,<none>\n  < 2016-02-23 20:27:47.988 EST postgres 56cfa993.7a72 postgres: >LOG:\n  disconnection: session time: 0:00:08.057 user=postgres database=postgres\n  host=[local]\n\n  If connections are not logged, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  If logging is enabled the following configurations must be made to log\n  connections, date/time, username, and session identifier. \n\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf by running the following: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Edit the following parameters: \n\n  log_connections = on \n  log_disconnections = on \n  log_line_prefix = '< %m %u %c: >'  \n\n  Where: \n  * %m is the time and date \n  * %u is the username \n  * %c is the session ID for the connection \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000505-DB-000352","gid":"V-72925","rid":"SV-87577r2_rule","stig_id":"PGS9-00-004700","fix_id":"F-79369r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72925\" do\r\n  title \"PostgreSQL must generate audit records showing starting and ending\r\ntime for user access to the database(s).\"\r\n  desc  \"For completeness of forensic analysis, it is necessary to know how\r\nlong a user's (or other principal's) connection to PostgreSQL lasts. This can\r\nbe achieved by recording disconnections, in addition to logons/connections, in\r\nthe audit logs.\r\n\r\n    Disconnection may be initiated by the user or forced by the system (as in a\r\ntimeout) or result from a system or network failure. To the greatest extent\r\npossible, all disconnections must be logged.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000505-DB-000352\"\r\n  tag \"gid\": \"V-72925\"\r\n  tag \"rid\": \"SV-87577r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-004700\"\r\n  tag \"fix_id\": \"F-79369r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  First, log into the database with the postgres user by running the following\r\n  commands:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -U postgres\r\n\r\n  Next, as the database administrator, verify the log for a connection audit\r\n  trail:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/postgresql-Tue.log\r\n  < 2016-02-23 20:25:39.931 EST postgres 56cfa993.7a72 postgres: >LOG: connection\r\n  authorized: user=postgres database=postgres\r\n  < 2016-02-23 20:27:45.428 EST postgres 56cfa993.7a72 postgres: >LOG: AUDIT:\r\n  SESSION,1,1,READ,SELECT,,,SELECT current_user;,<none>\r\n  < 2016-02-23 20:27:47.988 EST postgres 56cfa993.7a72 postgres: >LOG:\r\n  disconnection: session time: 0:00:08.057 user=postgres database=postgres\r\n  host=[local]\r\n\r\n  If connections are not logged, this is a finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  If logging is enabled the following configurations must be made to log\r\n  connections, date/time, username, and session identifier. \r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), edit\r\n  postgresql.conf by running the following: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Edit the following parameters: \r\n\r\n  log_connections = on \r\n  log_disconnections = on \r\n  log_line_prefix = '< %m %u %c: >'  \r\n\r\n  Where: \r\n  * %m is the time and date \r\n  * %u is the username \r\n  * %c is the session ID for the connection \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"connection authorized\\\"\") do\r\n    its('stdout') { should match /^.*user=postgres.*$/ }\r\n  end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72925.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"connection authorized\"` stdout is expected to match /^.*user=postgres.*$/","run_time":0.443867085,"start_time":"2020-06-19T18:47:31+00:00"}]},{"id":"V-72927","title":"PostgreSQL must generate audit records when unsuccessful attempts to\n  modify security objects occur.","desc":"Changes in the database objects (tables, views, procedures, functions)\n  that record and control permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized changes to the\n  security subsystem could go undetected. The database could be severely\n  compromised or rendered inoperative.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.","descriptions":[{"label":"default","data":"Changes in the database objects (tables, views, procedures, functions)\n  that record and control permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized changes to the\n  security subsystem could go undetected. The database could be severely\n  compromised or rendered inoperative.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  As the database administrator (shown here as \"postgres\"), create a test role\n  by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob\"\n\n  Next, to test if audit records are generated from unsuccessful attempts at\n  modifying security objects, run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; UPDATE pg_authid SET rolsuper = 't' WHERE rolname =\n  'bob';\"\n\n  Next, as the database administrator (shown here as \"postgres\"), verify that\n  the denials were logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >ERROR: permission\n  denied for relation pg_authid\n  < 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >STATEMENT: UPDATE\n  pg_authid SET rolsuper = 't' WHERE rolname = 'bob';\n\n  If denials are not logged, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to modify security objects occur.\n\n  Unsuccessful attempts to modifying security objects can be logged if logging is\n  enabled. To ensure that logging is enabled, review supplementary content\n  APPENDIX-C for instructions on enabling logging."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000496-DB-000335","gid":"V-72927","rid":"SV-87579r1_rule","stig_id":"PGS9-00-004800","fix_id":"F-79371r1_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72927\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\r\n  modify security objects occur.\"\r\n  desc  \"Changes in the database objects (tables, views, procedures, functions)\r\n  that record and control permissions, privileges, and roles granted to users and\r\n  roles must be tracked. Without an audit trail, unauthorized changes to the\r\n  security subsystem could go undetected. The database could be severely\r\n  compromised or rendered inoperative.\r\n\r\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\r\n  addition to the successful ones.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000496-DB-000335\"\r\n  tag \"gid\": \"V-72927\"\r\n  tag \"rid\": \"SV-87579r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-004800\"\r\n  tag \"fix_id\": \"F-79371r1_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), create a test role\r\n  by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"CREATE ROLE bob\\\"\r\n\r\n  Next, to test if audit records are generated from unsuccessful attempts at\r\n  modifying security objects, run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SET ROLE bob; UPDATE pg_authid SET rolsuper = 't' WHERE rolname =\r\n  'bob';\\\"\r\n\r\n  Next, as the database administrator (shown here as \\\"postgres\\\"), verify that\r\n  the denials were logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >ERROR: permission\r\n  denied for relation pg_authid\r\n  < 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >STATEMENT: UPDATE\r\n  pg_authid SET rolsuper = 't' WHERE rolname = 'bob';\r\n\r\n  If denials are not logged, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Configure PostgreSQL to produce audit records when unsuccessful\r\n  attempts to modify security objects occur.\r\n\r\n  Unsuccessful attempts to modifying security objects can be logged if logging is\r\n  enabled. To ensure that logging is enabled, review supplementary content\r\n  APPENDIX-C for instructions on enabling logging.\"\r\n\r\n  \r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"CREATE ROLE permdeniedtest; SET ROLE permdeniedtest; UPDATE pg_authid SET rolsuper = 't' WHERE rolname = 'permdeniedtest'; DROP ROLE IF EXISTS permdeniedtest;\\\"\") do\r\n    its('stdout') { should match // }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"permission denied for relation pg_authid\\\"\") do\r\n    its('stdout') { should match /^.*permission denied for relation pg_authid.*$/ }\r\n  end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72927.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"CREATE ROLE permdeniedtest; SET ROLE permdeniedtest; UPDATE pg_authid SET rolsuper = 't' WHERE rolname = 'permdeniedtest'; DROP ROLE IF EXISTS permdeniedtest;\"` stdout is expected to match //","run_time":0.508338417,"start_time":"2020-06-19T18:47:31+00:00"},{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"permission denied for relation pg_authid\"` stdout is expected to match /^.*permission denied for relation pg_authid.*$/","run_time":0.442312882,"start_time":"2020-06-19T18:47:32+00:00"}]},{"id":"V-72929","title":"PostgreSQL must generate audit records when privileges/permissions are\n  added.","desc":"Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n\n  In an SQL environment, adding permissions is typically done via the GRANT\n  command, or, in the negative, the REVOKE command.","descriptions":[{"label":"default","data":"Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n\n  In an SQL environment, adding permissions is typically done via the GRANT\n  command, or, in the negative, the REVOKE command."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  First, as the database administrator (shown here as \"postgres\"), create a\n  role by running the following SQL:\n\n  Change the privileges of another user:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob\"\n\n  Next, GRANT then REVOKE privileges from the role:\n\n  $ psql -c \"GRANT CONNECT ON DATABASE postgres TO bob\"\n  $ psql -c \"REVOKE CONNECT ON DATABASE postgres FROM bob\"\n\n  postgres=# REVOKE CONNECT ON DATABASE postgres FROM bob;\n  REVOKE\n\n  postgres=# GRANT CONNECT ON DATABASE postgres TO bob;\n  GRANT\n\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  events were logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-07-13 16:25:21.103 EDT postgres postgres LOG: > AUDIT:\n  SESSION,1,1,ROLE,GRANT,,,GRANT CONNECT ON DATABASE postgres TO bob,<none>\n  < 2016-07-13 16:25:25.520 EDT postgres postgres LOG: > AUDIT:\n  SESSION,1,1,ROLE,REVOKE,,,REVOKE CONNECT ON DATABASE postgres FROM bob,<none>\n\n  If the above steps cannot verify that audit records are produced when\n  privileges/permissions/role memberships are added, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log = 'role' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000495-DB-000326","gid":"V-72929","rid":"SV-87581r2_rule","stig_id":"PGS9-00-004900","fix_id":"F-79373r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72929\" do\r\n  title \"PostgreSQL must generate audit records when privileges/permissions are\r\n  added.\"\r\n  desc  \"Changes in the permissions, privileges, and roles granted to users and\r\n  roles must be tracked. Without an audit trail, unauthorized elevation or\r\n  restriction of privileges could go undetected. Elevated privileges give users\r\n  access to information and functionality that they should not have; restricted\r\n  privileges wrongly deny access to authorized users.\r\n\r\n  In an SQL environment, adding permissions is typically done via the GRANT\r\n  command, or, in the negative, the REVOKE command.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000495-DB-000326\"\r\n  tag \"gid\": \"V-72929\"\r\n  tag \"rid\": \"SV-87581r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-004900\"\r\n  tag \"fix_id\": \"F-79373r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), create a\r\n  role by running the following SQL:\r\n\r\n  Change the privileges of another user:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"CREATE ROLE bob\\\"\r\n\r\n  Next, GRANT then REVOKE privileges from the role:\r\n\r\n  $ psql -c \\\"GRANT CONNECT ON DATABASE postgres TO bob\\\"\r\n  $ psql -c \\\"REVOKE CONNECT ON DATABASE postgres FROM bob\\\"\r\n\r\n  postgres=# REVOKE CONNECT ON DATABASE postgres FROM bob;\r\n  REVOKE\r\n\r\n  postgres=# GRANT CONNECT ON DATABASE postgres TO bob;\r\n  GRANT\r\n\r\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  events were logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-07-13 16:25:21.103 EDT postgres postgres LOG: > AUDIT:\r\n  SESSION,1,1,ROLE,GRANT,,,GRANT CONNECT ON DATABASE postgres TO bob,<none>\r\n  < 2016-07-13 16:25:25.520 EDT postgres postgres LOG: > AUDIT:\r\n  SESSION,1,1,ROLE,REVOKE,,,REVOKE CONNECT ON DATABASE postgres FROM bob,<none>\r\n\r\n  If the above steps cannot verify that audit records are produced when\r\n  privileges/permissions/role memberships are added, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log = 'role' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"CREATE ROLE fooaudit; GRANT CONNECT ON DATABASE postgres TO fooaudit; REVOKE CONNECT ON DATABASE postgres FROM fooaudit;\\\"\") do\r\n    its('stdout') { should match // }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"GRANT CONNECT ON DATABASE postgres TO\\\"\") do\r\n    its('stdout') { should match /^.*fooaudit.*$/ }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"REVOKE CONNECT ON DATABASE postgres FROM\\\"\") do\r\n    its('stdout') { should match /^.*fooaudit.*$/ }\r\n  end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72929.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"CREATE ROLE fooaudit; GRANT CONNECT ON DATABASE postgres TO fooaudit; REVOKE CONNECT ON DATABASE postgres FROM fooaudit;\"` stdout is expected to match //","run_time":0.435631335,"start_time":"2020-06-19T18:47:32+00:00"},{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"GRANT CONNECT ON DATABASE postgres TO\"` stdout is expected to match /^.*fooaudit.*$/","run_time":0.404331826,"start_time":"2020-06-19T18:47:33+00:00"},{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"REVOKE CONNECT ON DATABASE postgres FROM\"` stdout is expected to match /^.*fooaudit.*$/","run_time":0.423190055,"start_time":"2020-06-19T18:47:33+00:00"}]},{"id":"V-72931","title":"PostgreSQL must generate audit records when unsuccessful attempts to\n  delete categorized information (e.g., classification levels/security levels)\n  occur.","desc":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.","descriptions":[{"label":"default","data":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems."},{"label":"check","data":"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If the output does not contain \"pgaudit\", this is a finding.\n\n  Next, verify that role, read, write, and ddl auditing are enabled:\n\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  All errors and denials are logged if logging is enabled. To ensure that logging\n  is enabled, review supplementary content APPENDIX-C for instructions on\n  enabling logging. \n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log='ddl, role, read, write' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000502-DB-000349","gid":"V-72931","rid":"SV-87583r2_rule","stig_id":"PGS9-00-005000","fix_id":"F-79375r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72931\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\r\n  delete categorized information (e.g., classification levels/security levels)\r\n  occur.\"\r\n  desc  \"Changes in categorized information must be tracked. Without an audit\r\n  trail, unauthorized access to protected data could go undetected.\r\n\r\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\r\n  addition to the successful ones.\r\n\r\n  For detailed information on categorizing information, refer to FIPS\r\n  Publication 199, Standards for Security Categorization of Federal Information\r\n  and Information Systems, and FIPS Publication 200, Minimum Security\r\n  Requirements for Federal Information and Information Systems.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000502-DB-000349\"\r\n  tag \"gid\": \"V-72931\"\r\n  tag \"rid\": \"SV-87583r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-005000\"\r\n  tag \"fix_id\": \"F-79375r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator, verify pgaudit is enabled\r\n  by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If the output does not contain \\\"pgaudit\\\", this is a finding.\r\n\r\n  Next, verify that role, read, write, and ddl auditing are enabled:\r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  All errors and denials are logged if logging is enabled. To ensure that logging\r\n  is enabled, review supplementary content APPENDIX-C for instructions on\r\n  enabling logging. \r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log='ddl, role, read, write' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  pgaudit_types = %w(ddl read role write)\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72931.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000352278,"start_time":"2020-06-19T18:47:33+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"ddl\"","run_time":0.000432789,"start_time":"2020-06-19T18:47:33+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"read\"","run_time":0.000331663,"start_time":"2020-06-19T18:47:33+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"read\"\nDiff:\n@@ -1,2 +1,4 @@\n-read\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.000346347,"start_time":"2020-06-19T18:47:33+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.000319308,"start_time":"2020-06-19T18:47:33+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-72933","title":"PostgreSQL must generate audit records when successful logons or\n  connections occur.","desc":"For completeness of forensic analysis, it is necessary to track\n  who/what (a user or other principal) logs on to PostgreSQL.","descriptions":[{"label":"default","data":"For completeness of forensic analysis, it is necessary to track\n  who/what (a user or other principal) logs on to PostgreSQL."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  First, as the database administrator (shown here as \"postgres\"), check if\n  log_connections is enabled by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_connections\"\n\n  If log_connections is off, this is a finding.\n\n  Next, verify the logs that the previous connection to the database was logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-02-16 15:54:03.934 EST postgres postgres 56c64b8b.aeb: >LOG: connection\n  authorized: user=postgres database=postgres\n\n  If an audit record is not generated each time a user (or other principal) logs\n  on or connects to PostgreSQL, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  If logging is enabled the following configurations must be made to log\n  connections, date/time, username, and session identifier. \n\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Edit the following parameters as such: \n\n  log_connections = on \n  log_line_prefix = '< %m %u %d %c: >'  \n\n  Where: \n  * %m is the time and date \n  * %u is the username \n  * %d is the database \n  * %c is the session ID for the connection \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000503-DB-000350","gid":"V-72933","rid":"SV-87585r2_rule","stig_id":"PGS9-00-005100","fix_id":"F-79377r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72933\" do\r\n  title \"PostgreSQL must generate audit records when successful logons or\r\n  connections occur.\"\r\n  desc  \"For completeness of forensic analysis, it is necessary to track\r\n  who/what (a user or other principal) logs on to PostgreSQL.\"\r\n  \r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000503-DB-000350\"\r\n  tag \"gid\": \"V-72933\"\r\n  tag \"rid\": \"SV-87585r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-005100\"\r\n  tag \"fix_id\": \"F-79377r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), check if\r\n  log_connections is enabled by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_connections\\\"\r\n\r\n  If log_connections is off, this is a finding.\r\n\r\n  Next, verify the logs that the previous connection to the database was logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-02-16 15:54:03.934 EST postgres postgres 56c64b8b.aeb: >LOG: connection\r\n  authorized: user=postgres database=postgres\r\n\r\n  If an audit record is not generated each time a user (or other principal) logs\r\n  on or connects to PostgreSQL, this is a finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  If logging is enabled the following configurations must be made to log\r\n  connections, date/time, username, and session identifier. \r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), edit\r\n  postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Edit the following parameters as such: \r\n\r\n  log_connections = on \r\n  log_line_prefix = '< %m %u %d %c: >'  \r\n\r\n  Where: \r\n  * %m is the time and date \r\n  * %u is the username \r\n  * %d is the database \r\n  * %c is the session ID for the connection \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"SHOW log_connections\\\"\") do\r\n   its('stdout') { should match /on/ }\r\n end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"connection authorized\\\"\") do\r\n    its('stdout') { should match /^.*user=postgres.*$/ }\r\n  end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72933.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"SHOW log_connections\"` stdout is expected to match /on/","run_time":0.430744151,"start_time":"2020-06-19T18:47:33+00:00"},{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"connection authorized\"` stdout is expected to match /^.*user=postgres.*$/","run_time":0.000163125,"start_time":"2020-06-19T18:47:34+00:00"}]},{"id":"V-72939","title":"PostgreSQL must generate audit records when security objects are\n  deleted.","desc":"The removal of security objects from the database/PostgreSQL would\n  seriously degrade a system's information assurance posture. If such an event\n  occurs, it must be logged.","descriptions":[{"label":"default","data":"The removal of security objects from the database/PostgreSQL would\n  seriously degrade a system's information assurance posture. If such an event\n  occurs, it must be logged."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  First, as the database administrator (shown here as \"postgres\"), create a\n  test table stig_test, enable row level security, and create a policy by running\n  the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE TABLE stig_test(id INT)\"\n  $ psql -c \"ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY\"\n  $ psql -c \"CREATE POLICY lock_table ON stig_test USING ('postgres' =\n  current_user)\"\n\n  Next, drop the policy and disable row level security:\n\n  $ psql -c \"DROP POLICY lock_table ON stig_test\"\n  $ psql -c \"ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY\"\n\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  security objects deletions were logged:\n\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  2016-03-30 14:54:18.991 EDT postgres postgres LOG: AUDIT: SESSION,11,1,DDL,DROP\n  POLICY,,,DROP POLICY lock_table ON stig_test;,<none>\n  2016-03-30 14:54:42.373 EDT postgres postgres LOG: AUDIT:\n  SESSION,12,1,DDL,ALTER TABLE,,,ALTER TABLE stig_test DISABLE ROW LEVEL\n  SECURITY;,<none>\n\n  If audit records are not produced when security objects are dropped, this is a\n  finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log = 'ddl' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000501-DB-000336","gid":"V-72939","rid":"SV-87591r2_rule","stig_id":"PGS9-00-005200","fix_id":"F-79383r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72939\" do\r\n  title \"PostgreSQL must generate audit records when security objects are\r\n  deleted.\"\r\n  desc  \"The removal of security objects from the database/PostgreSQL would\r\n  seriously degrade a system's information assurance posture. If such an event\r\n  occurs, it must be logged.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000501-DB-000336\"\r\n  tag \"gid\": \"V-72939\"\r\n  tag \"rid\": \"SV-87591r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-005200\"\r\n  tag \"fix_id\": \"F-79383r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), create a\r\n  test table stig_test, enable row level security, and create a policy by running\r\n  the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"CREATE TABLE stig_test(id INT)\\\"\r\n  $ psql -c \\\"ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY\\\"\r\n  $ psql -c \\\"CREATE POLICY lock_table ON stig_test USING ('postgres' =\r\n  current_user)\\\"\r\n\r\n  Next, drop the policy and disable row level security:\r\n\r\n  $ psql -c \\\"DROP POLICY lock_table ON stig_test\\\"\r\n  $ psql -c \\\"ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY\\\"\r\n\r\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  security objects deletions were logged:\r\n\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  2016-03-30 14:54:18.991 EDT postgres postgres LOG: AUDIT: SESSION,11,1,DDL,DROP\r\n  POLICY,,,DROP POLICY lock_table ON stig_test;,<none>\r\n  2016-03-30 14:54:42.373 EDT postgres postgres LOG: AUDIT:\r\n  SESSION,12,1,DDL,ALTER TABLE,,,ALTER TABLE stig_test DISABLE ROW LEVEL\r\n  SECURITY;,<none>\r\n\r\n  If audit records are not produced when security objects are dropped, this is a\r\n  finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log = 'ddl' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"CREATE TABLE stig_test(id INT); ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY; CREATE POLICY lock_table ON stig_test USING ('postgres' = current_user); DROP POLICY lock_table ON stig_test; ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY; DROP TABLE stig_test;\\\"\") do\r\n    its('stdout') { should match // }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"AUDIT: SESSION\\\"\") do\r\n    its('stdout') { should match /^.*CREATE TABLE,TABLE,public.stig_test.*$/ }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"AUDIT: SESSION\\\"\") do\r\n    its('stdout') { should match /^.*ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY.*$/ }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"AUDIT: SESSION\\\"\") do\r\n    its('stdout') { should match /^.*CREATE POLICY,POLICY,lock_table.*$/ }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"AUDIT: SESSION\\\"\") do\r\n    its('stdout') { should match /^.*DROP POLICY lock_table ON stig_test.*$/ }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"AUDIT: SESSION\\\"\") do\r\n    its('stdout') { should match /^.*ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY.*$/ }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"AUDIT: SESSION\\\"\") do\r\n    its('stdout') { should match /^.*DROP TABLE stig_test.*$/ }\r\n  end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72939.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"CREATE TABLE stig_test(id INT); ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY; CREATE POLICY lock_table ON stig_test USING ('postgres' = current_user); DROP POLICY lock_table ON stig_test; ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY; DROP TABLE stig_test;\"` stdout is expected to match //","run_time":0.425002816,"start_time":"2020-06-19T18:47:34+00:00"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"AUDIT: SESSION\"` stdout is expected to match /^.*CREATE TABLE,TABLE,public.stig_test.*$/","run_time":0.474854263,"start_time":"2020-06-19T18:47:34+00:00","message":"expected \"\" to match /^.*CREATE TABLE,TABLE,public.stig_test.*$/\nDiff:\n@@ -1,2 +1,2 @@\n-/^.*CREATE TABLE,TABLE,public.stig_test.*$/\n+\"\"\n"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"AUDIT: SESSION\"` stdout is expected to match /^.*ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY.*$/","run_time":0.000396617,"start_time":"2020-06-19T18:47:35+00:00","message":"expected \"\" to match /^.*ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY.*$/\nDiff:\n@@ -1,2 +1,2 @@\n-/^.*ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY.*$/\n+\"\"\n"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"AUDIT: SESSION\"` stdout is expected to match /^.*CREATE POLICY,POLICY,lock_table.*$/","run_time":0.000452045,"start_time":"2020-06-19T18:47:35+00:00","message":"expected \"\" to match /^.*CREATE POLICY,POLICY,lock_table.*$/\nDiff:\n@@ -1,2 +1,2 @@\n-/^.*CREATE POLICY,POLICY,lock_table.*$/\n+\"\"\n"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"AUDIT: SESSION\"` stdout is expected to match /^.*DROP POLICY lock_table ON stig_test.*$/","run_time":0.000421827,"start_time":"2020-06-19T18:47:35+00:00","message":"expected \"\" to match /^.*DROP POLICY lock_table ON stig_test.*$/\nDiff:\n@@ -1,2 +1,2 @@\n-/^.*DROP POLICY lock_table ON stig_test.*$/\n+\"\"\n"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"AUDIT: SESSION\"` stdout is expected to match /^.*ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY.*$/","run_time":0.000280249,"start_time":"2020-06-19T18:47:35+00:00","message":"expected \"\" to match /^.*ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY.*$/\nDiff:\n@@ -1,2 +1,2 @@\n-/^.*ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY.*$/\n+\"\"\n"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"AUDIT: SESSION\"` stdout is expected to match /^.*DROP TABLE stig_test.*$/","run_time":0.000287171,"start_time":"2020-06-19T18:47:35+00:00","message":"expected \"\" to match /^.*DROP TABLE stig_test.*$/\nDiff:\n@@ -1,2 +1,2 @@\n-/^.*DROP TABLE stig_test.*$/\n+\"\"\n"}]},{"id":"V-72941","title":"PostgreSQL must generate audit records when unsuccessful attempts to\n  retrieve privileges/permissions occur.","desc":"Under some circumstances, it may be useful to monitor who/what is\n  reading privilege/permission/role information. Therefore, it must be possible\n  to configure auditing to do this. PostgreSQLs typically make such information\n  available through views or functions.\n\n  This requirement addresses explicit requests for privilege/permission/role\n  membership information. It does not refer to the implicit retrieval of\n  privileges/permissions/role memberships that PostgreSQL continually performs to\n  determine if any and every action on the database is permitted.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.","descriptions":[{"label":"default","data":"Under some circumstances, it may be useful to monitor who/what is\n  reading privilege/permission/role information. Therefore, it must be possible\n  to configure auditing to do this. PostgreSQLs typically make such information\n  available through views or functions.\n\n  This requirement addresses explicit requests for privilege/permission/role\n  membership information. It does not refer to the implicit retrieval of\n  privileges/permissions/role memberships that PostgreSQL continually performs to\n  determine if any and every action on the database is permitted.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  First, as the database administrator (shown here as \"postgres\"), create a\n  role 'bob' by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob\"\n\n  Next, attempt to retrieve information from the pg_authid table:\n\n  $ psql -c \"SET ROLE bob; SELECT * FROM pg_authid\"\n\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  event was logged in pg_log:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-07-13 16:49:58.864 EDT postgres postgres ERROR: > permission denied for\n  relation pg_authid\n  < 2016-07-13 16:49:58.864 EDT postgres postgres STATEMENT: > SELECT * FROM\n  pg_authid;\n\n  If the above steps cannot verify that audit records are produced when\n  PostgreSQL denies retrieval of privileges/permissions/role memberships, this is\n  a finding."},{"label":"fix","data":"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access privileges occur.\n\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000091-DB-000325","gid":"V-72941","rid":"SV-87593r1_rule","stig_id":"PGS9-00-005300","fix_id":"F-79385r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72941\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\r\n  retrieve privileges/permissions occur.\"\r\n  desc  \"Under some circumstances, it may be useful to monitor who/what is\r\n  reading privilege/permission/role information. Therefore, it must be possible\r\n  to configure auditing to do this. PostgreSQLs typically make such information\r\n  available through views or functions.\r\n\r\n  This requirement addresses explicit requests for privilege/permission/role\r\n  membership information. It does not refer to the implicit retrieval of\r\n  privileges/permissions/role memberships that PostgreSQL continually performs to\r\n  determine if any and every action on the database is permitted.\r\n\r\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\r\n  addition to the successful ones.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000091-DB-000325\"\r\n  tag \"gid\": \"V-72941\"\r\n  tag \"rid\": \"SV-87593r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-005300\"\r\n  tag \"fix_id\": \"F-79385r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), create a\r\n  role 'bob' by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"CREATE ROLE bob\\\"\r\n\r\n  Next, attempt to retrieve information from the pg_authid table:\r\n\r\n  $ psql -c \\\"SET ROLE bob; SELECT * FROM pg_authid\\\"\r\n\r\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  event was logged in pg_log:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-07-13 16:49:58.864 EDT postgres postgres ERROR: > permission denied for\r\n  relation pg_authid\r\n  < 2016-07-13 16:49:58.864 EDT postgres postgres STATEMENT: > SELECT * FROM\r\n  pg_authid;\r\n\r\n  If the above steps cannot verify that audit records are produced when\r\n  PostgreSQL denies retrieval of privileges/permissions/role memberships, this is\r\n  a finding.\"\r\n\r\n  desc \"fix\", \"Configure PostgreSQL to produce audit records when unsuccessful\r\n  attempts to access privileges occur.\r\n\r\n  All denials are logged if logging is enabled. To ensure that logging is\r\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\r\n  logging.\"\r\n\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"CREATE ROLE fooaudit; SET ROLE fooaudit; SELECT * FROM pg_authid; SET ROLE postgres; DROP ROLE fooaudit;\\\"\") do\r\n    its('stdout') { should match // }\r\n  end\r\n\r\n describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"permission denied for relation\\\"\") do\r\n   its('stdout') { should match /^.*pg_authid.*$/ }\r\n end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72941.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"CREATE ROLE fooaudit; SET ROLE fooaudit; SELECT * FROM pg_authid; SET ROLE postgres; DROP ROLE fooaudit;\"` stdout is expected to match //","run_time":0.440878121,"start_time":"2020-06-19T18:47:35+00:00"},{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"permission denied for relation\"` stdout is expected to match /^.*pg_authid.*$/","run_time":0.425557286,"start_time":"2020-06-19T18:47:35+00:00"}]},{"id":"V-72945","title":"PostgreSQL must generate audit records when unsuccessful attempts to\n  delete privileges/permissions occur.","desc":"Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n\n  In an SQL environment, deleting permissions is typically done via the\n  REVOKE command.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.","descriptions":[{"label":"default","data":"Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n\n  In an SQL environment, deleting permissions is typically done via the\n  REVOKE command.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA. \n\n  First, as the database administrator (shown here as \"postgres\"), create the\n  roles joe and bob with LOGIN by running the following SQL: \n\n  $ sudo su - postgres \n  $ psql -c \"CREATE ROLE joe LOGIN\" \n  $ psql -c \"CREATE ROLE bob LOGIN\" \n\n  Next, set current role to bob and attempt to alter the role joe: \n\n  $ psql -c \"SET ROLE bob; ALTER ROLE joe NOLOGIN;\" \n\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  denials are logged: \n\n  $ sudo su - postgres \n  $ cat ${PGDATA?}/pg_log/<latest_log> \n  < 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres: >ERROR: permission\n  denied to alter role \n  < 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres: >STATEMENT: ALTER ROLE\n  joe; \n\n  If audit logs are not generated when unsuccessful attempts to delete\n  privileges/permissions occur, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to delete privileges occur.\n\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000499-DB-000331","gid":"V-72945","rid":"SV-87597r2_rule","stig_id":"PGS9-00-005400","fix_id":"F-79391r1_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72945\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\r\n  delete privileges/permissions occur.\"\r\n  desc  \"Failed attempts to change the permissions, privileges, and roles\r\n  granted to users and roles must be tracked. Without an audit trail,\r\n  unauthorized attempts to elevate or restrict privileges could go undetected.\r\n\r\n  In an SQL environment, deleting permissions is typically done via the\r\n  REVOKE command.\r\n\r\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\r\n  addition to the successful ones.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000499-DB-000331\"\r\n  tag \"gid\": \"V-72945\"\r\n  tag \"rid\": \"SV-87597r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-005400\"\r\n  tag \"fix_id\": \"F-79391r1_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA. \r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), create the\r\n  roles joe and bob with LOGIN by running the following SQL: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"CREATE ROLE joe LOGIN\\\" \r\n  $ psql -c \\\"CREATE ROLE bob LOGIN\\\" \r\n\r\n  Next, set current role to bob and attempt to alter the role joe: \r\n\r\n  $ psql -c \\\"SET ROLE bob; ALTER ROLE joe NOLOGIN;\\\" \r\n\r\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  denials are logged: \r\n\r\n  $ sudo su - postgres \r\n  $ cat ${PGDATA?}/pg_log/<latest_log> \r\n  < 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres: >ERROR: permission\r\n  denied to alter role \r\n  < 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres: >STATEMENT: ALTER ROLE\r\n  joe; \r\n\r\n  If audit logs are not generated when unsuccessful attempts to delete\r\n  privileges/permissions occur, this is a finding.\"\r\n\r\n  desc \"fix\", \"Configure PostgreSQL to produce audit records when unsuccessful\r\n  attempts to delete privileges occur.\r\n\r\n  All denials are logged if logging is enabled. To ensure that logging is\r\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\r\n  logging.\"\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"CREATE ROLE pgauditrolefailuretest; SET ROLE pgauditrolefailuretest; DROP ROLE postgres; SET ROLE postgres; DROP ROLE pgauditrolefailuretest;\\\"\") do\r\n    its('stdout') { should match // }\r\n  end\r\n\r\n describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"permission denied to drop role\\\"\") do\r\n   its('stdout') { should match /^.*permission denied to drop role.*$/ }\r\n end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72945.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"CREATE ROLE pgauditrolefailuretest; SET ROLE pgauditrolefailuretest; DROP ROLE postgres; SET ROLE postgres; DROP ROLE pgauditrolefailuretest;\"` stdout is expected to match //","run_time":0.458650855,"start_time":"2020-06-19T18:47:36+00:00"},{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"permission denied to drop role\"` stdout is expected to match /^.*permission denied to drop role.*$/","run_time":0.525644112,"start_time":"2020-06-19T18:47:36+00:00"}]},{"id":"V-72947","title":"PostgreSQL must be able to generate audit records when\n  privileges/permissions are retrieved.","desc":"Under some circumstances, it may be useful to monitor who/what is\n  reading privilege/permission/role information. Therefore, it must be possible\n  to configure auditing to do this. PostgreSQLs typically make such information\n  available through views or functions.\n\n  This requirement addresses explicit requests for privilege/permission/role\n  membership information. It does not refer to the implicit retrieval of\n  privileges/permissions/role memberships that PostgreSQL continually performs to\n  determine if any and every action on the database is permitted.","descriptions":[{"label":"default","data":"Under some circumstances, it may be useful to monitor who/what is\n  reading privilege/permission/role information. Therefore, it must be possible\n  to configure auditing to do this. PostgreSQLs typically make such information\n  available through views or functions.\n\n  This requirement addresses explicit requests for privilege/permission/role\n  membership information. It does not refer to the implicit retrieval of\n  privileges/permissions/role memberships that PostgreSQL continually performs to\n  determine if any and every action on the database is permitted."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  First, as the database administrator (shown here as \"postgres\"), check if\n  pgaudit is enabled by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If pgaudit is not found in the results, this is a finding.\n\n  Next, as the database administrator (shown here as \"postgres\"), list all role\n  memberships for the database:\n\n  $ sudo su - postgres\n  $ psql -c \"\\du\"\n\n  Next, verify the query was logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-01-28 19:43:12.126 UTC postgres postgres: >LOG: AUDIT:\n  SESSION,1,1,READ,SELECT,,,\"SELECT r.rolname, r.rolsuper, r.rolinherit,\n  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,\n  r.rolconnlimit, r.rolvaliduntil,\n  ARRAY(SELECT b.rolname\n  FROM pg_catalog.pg_auth_members m\n  JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)\n  WHERE m.member = r.oid) as memberof\n  , r.rolreplication\n  , r.rolbypassrls\n  FROM pg_catalog.pg_roles r\n  ORDER BY 1;\",<none>\n\n  If audit records are not produced, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log_catalog = 'on' \n  pgaudit.log = 'read' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n    \n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000091-DB-000066","gid":"V-72947","rid":"SV-87599r2_rule","stig_id":"PGS9-00-005500","fix_id":"F-79393r3_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72947\" do\r\n  title \"PostgreSQL must be able to generate audit records when\r\n  privileges/permissions are retrieved.\"\r\n  desc  \"Under some circumstances, it may be useful to monitor who/what is\r\n  reading privilege/permission/role information. Therefore, it must be possible\r\n  to configure auditing to do this. PostgreSQLs typically make such information\r\n  available through views or functions.\r\n\r\n  This requirement addresses explicit requests for privilege/permission/role\r\n  membership information. It does not refer to the implicit retrieval of\r\n  privileges/permissions/role memberships that PostgreSQL continually performs to\r\n  determine if any and every action on the database is permitted.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000091-DB-000066\"\r\n  tag \"gid\": \"V-72947\"\r\n  tag \"rid\": \"SV-87599r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-005500\"\r\n  tag \"fix_id\": \"F-79393r3_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), check if\r\n  pgaudit is enabled by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If pgaudit is not found in the results, this is a finding.\r\n\r\n  Next, as the database administrator (shown here as \\\"postgres\\\"), list all role\r\n  memberships for the database:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"\\\\du\\\"\r\n\r\n  Next, verify the query was logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-01-28 19:43:12.126 UTC postgres postgres: >LOG: AUDIT:\r\n  SESSION,1,1,READ,SELECT,,,\\\"SELECT r.rolname, r.rolsuper, r.rolinherit,\r\n  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,\r\n  r.rolconnlimit, r.rolvaliduntil,\r\n  ARRAY(SELECT b.rolname\r\n  FROM pg_catalog.pg_auth_members m\r\n  JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)\r\n  WHERE m.member = r.oid) as memberof\r\n  , r.rolreplication\r\n  , r.rolbypassrls\r\n  FROM pg_catalog.pg_roles r\r\n  ORDER BY 1;\\\",<none>\r\n\r\n  If audit records are not produced, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log_catalog = 'on' \r\n  pgaudit.log = 'read' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n    \r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"\\\\du\\\"\") do\r\n   its('stdout') { should match // }\r\n end\r\n\r\n describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"AUDIT\\\"\") do\r\n   its('stdout') { should match /^.*pg_catalog.pg_roles.*$/ }\r\n end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72947.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"\\du\"` stdout is expected to match //","run_time":0.429247704,"start_time":"2020-06-19T18:47:37+00:00"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"AUDIT\"` stdout is expected to match /^.*pg_catalog.pg_roles.*$/","run_time":0.453263308,"start_time":"2020-06-19T18:47:37+00:00","message":"expected \"\" to match /^.*pg_catalog.pg_roles.*$/\nDiff:\n@@ -1,2 +1,2 @@\n-/^.*pg_catalog.pg_roles.*$/\n+\"\"\n"}]},{"id":"V-72949","title":"PostgreSQL must generate audit records when unsuccessful attempts to\n  modify categorized information (e.g., classification levels/security levels)\n  occur.","desc":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.","descriptions":[{"label":"default","data":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems."},{"label":"check","data":"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If the output does not contain \"pgaudit\", this is a finding.\n\n  Next, verify that role, read, write, and ddl auditing are enabled:\n\n  $ psql -c \"SHOW pgaudit.log\"\n\n  If the output does not contain role, read, write, and ddl, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Configure PostgreSQL to produce audit records when unsuccessful attempts to\n  modify categories of information. \n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. All denials are logged when logging is\n  enabled. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log='ddl, role, read, write' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000498-DB-000347","gid":"V-72949","rid":"SV-87601r2_rule","stig_id":"PGS9-00-005600","fix_id":"F-79395r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72949\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\r\n  modify categorized information (e.g., classification levels/security levels)\r\n  occur.\"\r\n  desc  \"Changes in categorized information must be tracked. Without an audit\r\n  trail, unauthorized access to protected data could go undetected.\r\n\r\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\r\n  addition to the successful ones.\r\n\r\n  For detailed information on categorizing information, refer to FIPS\r\n  Publication 199, Standards for Security Categorization of Federal Information\r\n  and Information Systems, and FIPS Publication 200, Minimum Security\r\n  Requirements for Federal Information and Information Systems.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000498-DB-000347\"\r\n  tag \"gid\": \"V-72949\"\r\n  tag \"rid\": \"SV-87601r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-005600\"\r\n  tag \"fix_id\": \"F-79395r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator, verify pgaudit is enabled\r\n  by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If the output does not contain \\\"pgaudit\\\", this is a finding.\r\n\r\n  Next, verify that role, read, write, and ddl auditing are enabled:\r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n\r\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Configure PostgreSQL to produce audit records when unsuccessful attempts to\r\n  modify categories of information. \r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. All denials are logged when logging is\r\n  enabled. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log='ddl, role, read, write' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  pgaudit_types = %w(ddl read role write)\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72949.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000256051,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"ddl\"","run_time":0.000540487,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"read\"","run_time":0.000506038,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"read\"\nDiff:\n@@ -1,2 +1,4 @@\n-read\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.000295645,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.000308029,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-72893","title":"PostgreSQL must provide an immediate real-time alert to appropriate\n  support staff of all audit failure events requiring real-time alerts.","desc":"It is critical for the appropriate personnel to be aware if a system\n  is at risk of failing to process audit logs as required. Without a real-time\n  alert, security personnel may be unaware of an impending failure of the audit\n  capability, and system operation may be adversely affected.\n\n  The appropriate support staff include, at a minimum, the ISSO and the\n  DBA/SA.\n\n  Alerts provide organizations with urgent messages. Real-time alerts provide\n  these messages immediately (i.e., the time from event detection to alert occurs\n  in seconds or less).\n\n  The necessary monitoring and alerts may be implemented using features of\n  PostgreSQL, the OS, third-party software, custom code, or a combination of\n  these. The term \"the system\" is used to encompass all of these.","descriptions":[{"label":"default","data":"It is critical for the appropriate personnel to be aware if a system\n  is at risk of failing to process audit logs as required. Without a real-time\n  alert, security personnel may be unaware of an impending failure of the audit\n  capability, and system operation may be adversely affected.\n\n  The appropriate support staff include, at a minimum, the ISSO and the\n  DBA/SA.\n\n  Alerts provide organizations with urgent messages. Real-time alerts provide\n  these messages immediately (i.e., the time from event detection to alert occurs\n  in seconds or less).\n\n  The necessary monitoring and alerts may be implemented using features of\n  PostgreSQL, the OS, third-party software, custom code, or a combination of\n  these. The term \"the system\" is used to encompass all of these."},{"label":"check","data":"Review the system documentation to determine which audit failure\n  events require real-time alerts.\n\n  Review the system settings and code. If the real-time alerting that is\n  specified in the documentation is not enabled, this is a finding."},{"label":"fix","data":"Configure the system to provide an immediate real-time alert to\n  appropriate support staff when a specified audit failure occurs.\n\n  It is possible to create scripts or implement third-party tools to enable\n  real-time alerting for audit failures in PostgreSQL."}],"impact":0.5,"refs":[],"tags":{"severity":null,"gtitle":"SRG-APP-000360-DB-000320","gid":"V-72893","rid":"SV-87545r1_rule","stig_id":"PGS9-00-002700","fix_id":"F-79335r1_fix","cci":["CCI-001858"],"nist":["AU-5 (2)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72893\" do\r\n  title \"PostgreSQL must provide an immediate real-time alert to appropriate\r\n  support staff of all audit failure events requiring real-time alerts.\"\r\n  desc  \"It is critical for the appropriate personnel to be aware if a system\r\n  is at risk of failing to process audit logs as required. Without a real-time\r\n  alert, security personnel may be unaware of an impending failure of the audit\r\n  capability, and system operation may be adversely affected.\r\n\r\n  The appropriate support staff include, at a minimum, the ISSO and the\r\n  DBA/SA.\r\n\r\n  Alerts provide organizations with urgent messages. Real-time alerts provide\r\n  these messages immediately (i.e., the time from event detection to alert occurs\r\n  in seconds or less).\r\n\r\n  The necessary monitoring and alerts may be implemented using features of\r\n  PostgreSQL, the OS, third-party software, custom code, or a combination of\r\n  these. The term \\\"the system\\\" is used to encompass all of these.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": nil\r\n  tag \"gtitle\": \"SRG-APP-000360-DB-000320\"\r\n  tag \"gid\": \"V-72893\"\r\n  tag \"rid\": \"SV-87545r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-002700\"\r\n  tag \"fix_id\": \"F-79335r1_fix\"\r\n  tag \"cci\": [\"CCI-001858\"]\r\n  tag \"nist\": [\"AU-5 (2)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review the system documentation to determine which audit failure\r\n  events require real-time alerts.\r\n\r\n  Review the system settings and code. If the real-time alerting that is\r\n  specified in the documentation is not enabled, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Configure the system to provide an immediate real-time alert to\r\n  appropriate support staff when a specified audit failure occurs.\r\n\r\n  It is possible to create scripts or implement third-party tools to enable\r\n  real-time alerting for audit failures in PostgreSQL.\"\r\n\r\n  describe \"Review the system documentation to determine which audit failure events require real-time alerts.\" do\r\n    skip \"If the real-time alerting that is specified in the documentation is not enabled, this is a finding.\"\r\n  end \r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72893.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Review the system documentation to determine which audit failure events require real-time alerts.","run_time":6.25e-06,"start_time":"2020-06-19T18:47:38+00:00","resource":"","skip_message":"If the real-time alerting that is specified in the documentation is not enabled, this is a finding."}]},{"id":"V-72953","title":"PostgreSQL must generate audit records for all privileged activities\n  or other system-level access.","desc":"Without tracking privileged activity, it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n\n  System documentation should include a definition of the functionality\n  considered privileged.\n\n  A privileged function in this context is any operation that modifies the\n  structure of the database, its built-in logic, or its security settings. This\n  would include all Data Definition Language (DDL) statements and all\n  security-related statements. In an SQL environment, it encompasses, but is not\n  necessarily limited to:\n\n      CREATE\n      ALTER\n      DROP\n      GRANT\n      REVOKE\n\n  There may also be Data Manipulation Language (DML) statements that, subject\n  to context, should be regarded as privileged. Possible examples in SQL include:\n\n  TRUNCATE TABLE, DELETE, or DELETE affecting more than n rows, for some n,\n  or DELETE without a WHERE clause.\n\n  UPDATE or UPDATE affecting more than n rows, for some n, or UPDATE without\n  a WHERE clause.\n\n  Any SELECT, INSERT, UPDATE, or DELETE to an application-defined security\n  table executed by other than a security principal.\n\n  Depending on the capabilities of PostgreSQL and the design of the database\n  and associated applications, audit logging may be achieved by means of DBMS\n  auditing features, database triggers, other mechanisms, or a combination of\n  these.\n\n  Note: That it is particularly important to audit, and tightly control, any\n  action that weakens the implementation of this requirement itself, since the\n  objective is to have a complete audit trail of all administrative activity.","descriptions":[{"label":"default","data":"Without tracking privileged activity, it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n\n  System documentation should include a definition of the functionality\n  considered privileged.\n\n  A privileged function in this context is any operation that modifies the\n  structure of the database, its built-in logic, or its security settings. This\n  would include all Data Definition Language (DDL) statements and all\n  security-related statements. In an SQL environment, it encompasses, but is not\n  necessarily limited to:\n\n      CREATE\n      ALTER\n      DROP\n      GRANT\n      REVOKE\n\n  There may also be Data Manipulation Language (DML) statements that, subject\n  to context, should be regarded as privileged. Possible examples in SQL include:\n\n  TRUNCATE TABLE, DELETE, or DELETE affecting more than n rows, for some n,\n  or DELETE without a WHERE clause.\n\n  UPDATE or UPDATE affecting more than n rows, for some n, or UPDATE without\n  a WHERE clause.\n\n  Any SELECT, INSERT, UPDATE, or DELETE to an application-defined security\n  table executed by other than a security principal.\n\n  Depending on the capabilities of PostgreSQL and the design of the database\n  and associated applications, audit logging may be achieved by means of DBMS\n  auditing features, database triggers, other mechanisms, or a combination of\n  these.\n\n  Note: That it is particularly important to audit, and tightly control, any\n  action that weakens the implementation of this requirement itself, since the\n  objective is to have a complete audit trail of all administrative activity."},{"label":"check","data":"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If the output does not contain pgaudit, this is a finding.\n\n  Next, verify that role, read, write, and ddl auditing are enabled:\n\n  $ psql -c \"SHOW pgaudit.log\"\n\n  If the output does not contain role, read, write, and ddl, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n  shared_preload_libraries = ‘pgaudit’ \n  pgaudit.log='ddl, role, read, write' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000504-DB-000354","gid":"V-72953","rid":"SV-87605r2_rule","stig_id":"PGS9-00-005800","fix_id":"F-79399r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72953\" do\r\n  title \"PostgreSQL must generate audit records for all privileged activities\r\n  or other system-level access.\"\r\n  desc  \"Without tracking privileged activity, it would be difficult to\r\n  establish, correlate, and investigate the events relating to an incident or\r\n  identify those responsible for one.\r\n\r\n  System documentation should include a definition of the functionality\r\n  considered privileged.\r\n\r\n  A privileged function in this context is any operation that modifies the\r\n  structure of the database, its built-in logic, or its security settings. This\r\n  would include all Data Definition Language (DDL) statements and all\r\n  security-related statements. In an SQL environment, it encompasses, but is not\r\n  necessarily limited to:\r\n\r\n      CREATE\r\n      ALTER\r\n      DROP\r\n      GRANT\r\n      REVOKE\r\n\r\n  There may also be Data Manipulation Language (DML) statements that, subject\r\n  to context, should be regarded as privileged. Possible examples in SQL include:\r\n\r\n  TRUNCATE TABLE, DELETE, or DELETE affecting more than n rows, for some n,\r\n  or DELETE without a WHERE clause.\r\n\r\n  UPDATE or UPDATE affecting more than n rows, for some n, or UPDATE without\r\n  a WHERE clause.\r\n\r\n  Any SELECT, INSERT, UPDATE, or DELETE to an application-defined security\r\n  table executed by other than a security principal.\r\n\r\n  Depending on the capabilities of PostgreSQL and the design of the database\r\n  and associated applications, audit logging may be achieved by means of DBMS\r\n  auditing features, database triggers, other mechanisms, or a combination of\r\n  these.\r\n\r\n  Note: That it is particularly important to audit, and tightly control, any\r\n  action that weakens the implementation of this requirement itself, since the\r\n  objective is to have a complete audit trail of all administrative activity.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000504-DB-000354\"\r\n  tag \"gid\": \"V-72953\"\r\n  tag \"rid\": \"SV-87605r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-005800\"\r\n  tag \"fix_id\": \"F-79399r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator, verify pgaudit is enabled\r\n  by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If the output does not contain pgaudit, this is a finding.\r\n\r\n  Next, verify that role, read, write, and ddl auditing are enabled:\r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n\r\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n  shared_preload_libraries = ‘pgaudit’ \r\n  pgaudit.log='ddl, role, read, write' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  pgaudit_types = %w(ddl read role write)\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72953.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000174076,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"ddl\"","run_time":0.000287011,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"read\"","run_time":0.000264869,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"read\"\nDiff:\n@@ -1,2 +1,4 @@\n-read\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.00057825,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.000263071,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-72955","title":"PostgreSQL must generate audit records when unsuccessful attempts to\n  access categorized information (e.g., classification levels/security levels)\n  occur.","desc":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.","descriptions":[{"label":"default","data":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems."},{"label":"check","data":"First, as the database administrator (shown here as\n  \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW pgaudit.log\"\n\n  If pgaudit.log does not contain, \"ddl, write, role\", this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Configure PostgreSQL to produce audit records when unsuccessful attempts to\n  access categories of information. \n\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log = 'ddl, write, role' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000494-DB-000345","gid":"V-72955","rid":"SV-87607r2_rule","stig_id":"PGS9-00-005900","fix_id":"F-79401r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72955\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\r\n  access categorized information (e.g., classification levels/security levels)\r\n  occur.\"\r\n  desc  \"Changes in categorized information must be tracked. Without an audit\r\n  trail, unauthorized access to protected data could go undetected.\r\n\r\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\r\n  addition to the successful ones.\r\n\r\n  For detailed information on categorizing information, refer to FIPS\r\n  Publication 199, Standards for Security Categorization of Federal Information\r\n  and Information Systems, and FIPS Publication 200, Minimum Security\r\n  Requirements for Federal Information and Information Systems.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000494-DB-000345\"\r\n  tag \"gid\": \"V-72955\"\r\n  tag \"rid\": \"SV-87607r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-005900\"\r\n  tag \"fix_id\": \"F-79401r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator (shown here as\r\n  \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n\r\n  If pgaudit.log does not contain, \\\"ddl, write, role\\\", this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Configure PostgreSQL to produce audit records when unsuccessful attempts to\r\n  access categories of information. \r\n\r\n  All denials are logged if logging is enabled. To ensure that logging is\r\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\r\n  logging. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log = 'ddl, write, role' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  pgaudit_types = %w(ddl role write)\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72955.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"ddl\"","run_time":0.000293802,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.000264552,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.000338599,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-72957","title":"PostgreSQL must be able to generate audit records when security\n  objects are accessed.","desc":"Changes to the security configuration must be tracked.\n\n  This requirement applies to situations where security data is retrieved or\n  modified via data manipulation operations, as opposed to via specialized\n  security functionality.\n\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n\n    CREATE\n    SELECT\n    INSERT\n    UPDATE\n    DELETE\n    PREPARE\n    EXECUTE\n    ALTER\n    DROP","descriptions":[{"label":"default","data":"Changes to the security configuration must be tracked.\n\n  This requirement applies to situations where security data is retrieved or\n  modified via data manipulation operations, as opposed to via specialized\n  security functionality.\n\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n\n    CREATE\n    SELECT\n    INSERT\n    UPDATE\n    DELETE\n    PREPARE\n    EXECUTE\n    ALTER\n    DROP"},{"label":"check","data":"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If the output does not contain pgaudit, this is a finding.\n\n  Next, verify that role, read, write, and ddl auditing are enabled:\n\n  $ psql -c \"SHOW pgaudit.log\"\n\n  If the output does not contain role, read, write, and ddl, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for  PGVER.\n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log='ddl, role, read, write' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000492-DB-000332","gid":"V-72957","rid":"SV-87609r2_rule","stig_id":"PGS9-00-006000","fix_id":"F-79403r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72957\" do\r\n  title \"PostgreSQL must be able to generate audit records when security\r\n  objects are accessed.\"\r\n  desc  \"Changes to the security configuration must be tracked.\r\n\r\n  This requirement applies to situations where security data is retrieved or\r\n  modified via data manipulation operations, as opposed to via specialized\r\n  security functionality.\r\n\r\n  In an SQL environment, types of access include, but are not necessarily\r\n  limited to:\r\n\r\n    CREATE\r\n    SELECT\r\n    INSERT\r\n    UPDATE\r\n    DELETE\r\n    PREPARE\r\n    EXECUTE\r\n    ALTER\r\n    DROP\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000492-DB-000332\"\r\n  tag \"gid\": \"V-72957\"\r\n  tag \"rid\": \"SV-87609r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-006000\"\r\n  tag \"fix_id\": \"F-79403r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator, verify pgaudit is enabled\r\n  by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If the output does not contain pgaudit, this is a finding.\r\n\r\n  Next, verify that role, read, write, and ddl auditing are enabled:\r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n\r\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for  PGVER.\r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log='ddl, role, read, write' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  pgaudit_types = %w(ddl read role write)\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72957.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000176621,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"ddl\"","run_time":0.000259055,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"read\"","run_time":0.00027153,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"read\"\nDiff:\n@@ -1,2 +1,4 @@\n-read\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.000258917,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.00029775,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-72959","title":"PostgreSQL must generate audit records when privileges/permissions are\n  deleted.","desc":"Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n\n  In an SQL environment, deleting permissions is typically done via the\n  REVOKE command.","descriptions":[{"label":"default","data":"Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n\n  In an SQL environment, deleting permissions is typically done via the\n  REVOKE command."},{"label":"check","data":"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If the output does not contain pgaudit, this is a finding.\n\n  Next, verify that role, read, write, and ddl auditing are enabled:\n\n  $ psql -c \"SHOW pgaudit.log\"\n\n  If the output does not contain role, read, write, and ddl, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log = 'role' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000499-DB-000330","gid":"V-72959","rid":"SV-87611r2_rule","stig_id":"PGS9-00-006100","fix_id":"F-79405r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72959\" do\r\n  title \"PostgreSQL must generate audit records when privileges/permissions are\r\n  deleted.\"\r\n  desc  \"Changes in the permissions, privileges, and roles granted to users and\r\n  roles must be tracked. Without an audit trail, unauthorized elevation or\r\n  restriction of privileges could go undetected. Elevated privileges give users\r\n  access to information and functionality that they should not have; restricted\r\n  privileges wrongly deny access to authorized users.\r\n\r\n  In an SQL environment, deleting permissions is typically done via the\r\n  REVOKE command.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000499-DB-000330\"\r\n  tag \"gid\": \"V-72959\"\r\n  tag \"rid\": \"SV-87611r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-006100\"\r\n  tag \"fix_id\": \"F-79405r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator, verify pgaudit is enabled\r\n  by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If the output does not contain pgaudit, this is a finding.\r\n\r\n  Next, verify that role, read, write, and ddl auditing are enabled:\r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n\r\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log = 'role' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  pgaudit_types = %w(ddl read role write)\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72959.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000173141,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"ddl\"","run_time":0.00028769,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"read\"","run_time":0.000265131,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"read\"\nDiff:\n@@ -1,2 +1,4 @@\n-read\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.000438497,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.000272877,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-72961","title":"PostgreSQL must generate audit records when concurrent\n  logons/connections by the same user from different workstations occur.","desc":"For completeness of forensic analysis, it is necessary to track who\n  logs on to PostgreSQL.\n\n  Concurrent connections by the same user from multiple workstations may be\n  valid use of the system; or such connections may be due to improper\n  circumvention of the requirement to use the CAC for authentication; or they may\n  indicate unauthorized account sharing; or they may be because an account has\n  been compromised.\n\n  (If the fact of multiple, concurrent logons by a given user can be reliably\n  reconstructed from the log entries for other events (logons/connections;\n  voluntary and involuntary disconnections), then it is not mandatory to create\n  additional log entries specifically for this.)","descriptions":[{"label":"default","data":"For completeness of forensic analysis, it is necessary to track who\n  logs on to PostgreSQL.\n\n  Concurrent connections by the same user from multiple workstations may be\n  valid use of the system; or such connections may be due to improper\n  circumvention of the requirement to use the CAC for authentication; or they may\n  indicate unauthorized account sharing; or they may be because an account has\n  been compromised.\n\n  (If the fact of multiple, concurrent logons by a given user can be reliably\n  reconstructed from the log entries for other events (logons/connections;\n  voluntary and involuntary disconnections), then it is not mandatory to create\n  additional log entries specifically for this.)"},{"label":"check","data":"First, as the database administrator, verify that log_connections\n  and log_disconnections are enabled by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_connections\"\n  $ psql -c \"SHOW log_disconnections\"\n\n  If either is off, this is a finding.\n\n  Next, verify that log_line_prefix contains sufficient information by running\n  the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_line_prefix\"\n\n  If log_line_prefix does not contain at least %m %u %d %c, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Edit the following parameters as such: \n\n  log_connections = on \n  log_disconnections = on \n  log_line_prefix = '< %m %u %d %c: >' \n\n  Where: \n  * %m is the time and date \n  * %u is the username \n  * %d is the database \n  * %c is the session ID for the connection \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000506-DB-000353","gid":"V-72961","rid":"SV-87613r2_rule","stig_id":"PGS9-00-006200","fix_id":"F-79407r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72961\" do\r\n  title \"PostgreSQL must generate audit records when concurrent\r\n  logons/connections by the same user from different workstations occur.\"\r\n  desc  \"For completeness of forensic analysis, it is necessary to track who\r\n  logs on to PostgreSQL.\r\n\r\n  Concurrent connections by the same user from multiple workstations may be\r\n  valid use of the system; or such connections may be due to improper\r\n  circumvention of the requirement to use the CAC for authentication; or they may\r\n  indicate unauthorized account sharing; or they may be because an account has\r\n  been compromised.\r\n\r\n  (If the fact of multiple, concurrent logons by a given user can be reliably\r\n  reconstructed from the log entries for other events (logons/connections;\r\n  voluntary and involuntary disconnections), then it is not mandatory to create\r\n  additional log entries specifically for this.)\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000506-DB-000353\"\r\n  tag \"gid\": \"V-72961\"\r\n  tag \"rid\": \"SV-87613r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-006200\"\r\n  tag \"fix_id\": \"F-79407r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator, verify that log_connections\r\n  and log_disconnections are enabled by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_connections\\\"\r\n  $ psql -c \\\"SHOW log_disconnections\\\"\r\n\r\n  If either is off, this is a finding.\r\n\r\n  Next, verify that log_line_prefix contains sufficient information by running\r\n  the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_line_prefix\\\"\r\n\r\n  If log_line_prefix does not contain at least %m %u %d %c, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), edit\r\n  postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Edit the following parameters as such: \r\n\r\n  log_connections = on \r\n  log_disconnections = on \r\n  log_line_prefix = '< %m %u %d %c: >' \r\n\r\n  Where: \r\n  * %m is the time and date \r\n  * %u is the username \r\n  * %d is the database \r\n  * %c is the session ID for the connection \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW log_connections;', [pg_db]) do\r\n    its('output') { should_not match /off|false/i }\r\n  end\r\n\r\n  describe sql.query('SHOW log_disconnections;', [pg_db]) do\r\n    its('output') { should_not match /off|false/i }\r\n  end\r\n\r\n  log_line_prefix_escapes = %w(%m %u %d %c)\r\n\r\n  log_line_prefix_escapes.each do |escape|\r\n    describe sql.query('SHOW log_line_prefix;', [pg_db]) do\r\n      its('output') { should include escape }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72961.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SHOW log_connections; output is expected not to match /off|false/i","run_time":0.00023632,"start_time":"2020-06-19T18:47:38+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_disconnections; output is expected not to match /off|false/i","run_time":0.000103994,"start_time":"2020-06-19T18:47:38+00:00"},{"status":"failed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%m\"","run_time":0.000219684,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"%a %u %d %p %r %s %c\" to include \"%m\""},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%u\"","run_time":0.000110291,"start_time":"2020-06-19T18:47:38+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%d\"","run_time":0.000121665,"start_time":"2020-06-19T18:47:38+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%c\"","run_time":0.000102674,"start_time":"2020-06-19T18:47:38+00:00"}]},{"id":"V-72963","title":"PostgreSQL must generate audit records when unsuccessful attempts to\n  delete security objects occur.","desc":"The removal of security objects from the database/PostgreSQL would\n  seriously degrade a system's information assurance posture. If such an action\n  is attempted, it must be logged.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.","descriptions":[{"label":"default","data":"The removal of security objects from the database/PostgreSQL would\n  seriously degrade a system's information assurance posture. If such an action\n  is attempted, it must be logged.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones."},{"label":"check","data":"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL: \n\n  $ sudo su - postgres \n  $ psql -c \"SHOW shared_preload_libraries\" \n\n  If the output does not contain pgaudit, this is a finding. \n\n  Next, verify that role, read, write, and ddl auditing are enabled: \n\n  $ psql -c \"SHOW pgaudit.log\" \n\n  If the output does not contain role, read, write, and ddl, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Configure PostgreSQL to produce audit records when unsuccessful attempts to\n  delete security objects occur. \n\n  All errors and denials are logged if logging is enabled. To ensure that logging\n  is enabled, review supplementary content APPENDIX-C for instructions on\n  enabling logging. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log='ddl, role, read, write' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000501-DB-000337","gid":"V-72963","rid":"SV-87615r2_rule","stig_id":"PGS9-00-006300","fix_id":"F-79409r3_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72963\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\r\n  delete security objects occur.\"\r\n  desc  \"The removal of security objects from the database/PostgreSQL would\r\n  seriously degrade a system's information assurance posture. If such an action\r\n  is attempted, it must be logged.\r\n\r\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\r\n  addition to the successful ones.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000501-DB-000337\"\r\n  tag \"gid\": \"V-72963\"\r\n  tag \"rid\": \"SV-87615r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-006300\"\r\n  tag \"fix_id\": \"F-79409r3_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator, verify pgaudit is enabled\r\n  by running the following SQL: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\" \r\n\r\n  If the output does not contain pgaudit, this is a finding. \r\n\r\n  Next, verify that role, read, write, and ddl auditing are enabled: \r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\" \r\n\r\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Configure PostgreSQL to produce audit records when unsuccessful attempts to\r\n  delete security objects occur. \r\n\r\n  All errors and denials are logged if logging is enabled. To ensure that logging\r\n  is enabled, review supplementary content APPENDIX-C for instructions on\r\n  enabling logging. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log='ddl, role, read, write' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  pgaudit_types = %w(ddl read role write)\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72963.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000174451,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"ddl\"","run_time":0.000309149,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"read\"","run_time":0.000260954,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"read\"\nDiff:\n@@ -1,2 +1,4 @@\n-read\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.000288612,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.00025964,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-72965","title":"PostgreSQL must generate audit records when privileges/permissions are\n  modified.","desc":"Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n\n  In an SQL environment, modifying permissions is typically done via the\n  GRANT and REVOKE commands.","descriptions":[{"label":"default","data":"Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n\n  In an SQL environment, modifying permissions is typically done via the\n  GRANT and REVOKE commands."},{"label":"check","data":"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If the output does not contain pgaudit, this is a finding.\n\n  Next, verify that role is enabled:\n\n  $ psql -c \"SHOW pgaudit.log\"\n\n  If the output does not contain role, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n  \n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n  \n  With pgaudit installed the following configurations can be made: \n  \n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  \n  Add the following parameters (or edit existing parameters): \n  \n  pgaudit.log='role' \n  \n  Now, as the system administrator, reload the server with the new configuration: \n  \n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n  \n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000495-DB-000328","gid":"V-72965","rid":"SV-87617r2_rule","stig_id":"PGS9-00-006400","fix_id":"F-79413r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72965\" do\r\n  title \"PostgreSQL must generate audit records when privileges/permissions are\r\n  modified.\"\r\n  desc  \"Changes in the permissions, privileges, and roles granted to users and\r\n  roles must be tracked. Without an audit trail, unauthorized elevation or\r\n  restriction of privileges could go undetected. Elevated privileges give users\r\n  access to information and functionality that they should not have; restricted\r\n  privileges wrongly deny access to authorized users.\r\n\r\n  In an SQL environment, modifying permissions is typically done via the\r\n  GRANT and REVOKE commands.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000495-DB-000328\"\r\n  tag \"gid\": \"V-72965\"\r\n  tag \"rid\": \"SV-87617r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-006400\"\r\n  tag \"fix_id\": \"F-79413r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator, verify pgaudit is enabled\r\n  by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If the output does not contain pgaudit, this is a finding.\r\n\r\n  Next, verify that role is enabled:\r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n\r\n  If the output does not contain role, this is a finding.\"\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n  \r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n  \r\n  With pgaudit installed the following configurations can be made: \r\n  \r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  \r\n  Add the following parameters (or edit existing parameters): \r\n  \r\n  pgaudit.log='role' \r\n  \r\n  Now, as the system administrator, reload the server with the new configuration: \r\n  \r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n  \r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n  \r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  pgaudit_types = ['role']\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72965.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000224947,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.000262791,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-72969","title":"PostgreSQL must generate audit records when unsuccessful attempts to\nexecute privileged activities or other system-level access occur.","desc":"Without tracking privileged activity, it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n\n  System documentation should include a definition of the functionality\n  considered privileged.\n\n  A privileged function in this context is any operation that modifies the\n  structure of the database, its built-in logic, or its security settings. This\n  would include all Data Definition Language (DDL) statements and all\n  security-related statements. In an SQL environment, it encompasses, but is not\n  necessarily limited to:\n\n      CREATE\n      ALTER\n      DROP\n      GRANT\n      REVOKE\n\n  Note: That it is particularly important to audit, and tightly control, any\n  action that weakens the implementation of this requirement itself, since the\n  objective is to have a complete audit trail of all administrative activity.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.","descriptions":[{"label":"default","data":"Without tracking privileged activity, it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n\n  System documentation should include a definition of the functionality\n  considered privileged.\n\n  A privileged function in this context is any operation that modifies the\n  structure of the database, its built-in logic, or its security settings. This\n  would include all Data Definition Language (DDL) statements and all\n  security-related statements. In an SQL environment, it encompasses, but is not\n  necessarily limited to:\n\n      CREATE\n      ALTER\n      DROP\n      GRANT\n      REVOKE\n\n  Note: That it is particularly important to audit, and tightly control, any\n  action that weakens the implementation of this requirement itself, since the\n  objective is to have a complete audit trail of all administrative activity.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones."},{"label":"check","data":"As the database administrator (shown here as \"postgres\"),\n  create the role bob by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob\"\n\n  Next, change the current role to bob and attempt to execute privileged activity:\n\n  $ psql -c \"CREATE ROLE stig_test SUPERUSER\"\n  $ psql -c \"CREATE ROLE stig_test CREATEDB\"\n  $ psql -c \"CREATE ROLE stig_test CREATEROLE\"\n  $ psql -c \"CREATE ROLE stig_test CREATEUSER\"\n\n  Now, as the database administrator (shown here as \"postgres\"), verify that an\n  audit event was produced (use the latest log):\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >ERROR: must be\n  superuser to create superusers\n  < 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test SUPERUSER;\n  < 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >ERROR:\n  permission denied to create role\n  < 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEDB;\n  < 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >ERROR:\n  permission denied to create role\n  < 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEROLE;\n  < 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >ERROR: must be\n  superuser to create superusers\n  < 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEUSER;\n\n  If audit records are not produced, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to execute privileged SQL.\n\n  All denials are logged by default if logging is enabled. To ensure that logging\n  is enabled, review supplementary content APPENDIX-C for instructions on\n  enabling logging."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000504-DB-000355","gid":"V-72969","rid":"SV-87621r1_rule","stig_id":"PGS9-00-006500","fix_id":"F-79415r1_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72969\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\r\nexecute privileged activities or other system-level access occur.\"\r\n  desc  \"Without tracking privileged activity, it would be difficult to\r\n  establish, correlate, and investigate the events relating to an incident or\r\n  identify those responsible for one.\r\n\r\n  System documentation should include a definition of the functionality\r\n  considered privileged.\r\n\r\n  A privileged function in this context is any operation that modifies the\r\n  structure of the database, its built-in logic, or its security settings. This\r\n  would include all Data Definition Language (DDL) statements and all\r\n  security-related statements. In an SQL environment, it encompasses, but is not\r\n  necessarily limited to:\r\n\r\n      CREATE\r\n      ALTER\r\n      DROP\r\n      GRANT\r\n      REVOKE\r\n\r\n  Note: That it is particularly important to audit, and tightly control, any\r\n  action that weakens the implementation of this requirement itself, since the\r\n  objective is to have a complete audit trail of all administrative activity.\r\n\r\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\r\n  addition to the successful ones.\"\r\n  \r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000504-DB-000355\"\r\n  tag \"gid\": \"V-72969\"\r\n  tag \"rid\": \"SV-87621r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-006500\"\r\n  tag \"fix_id\": \"F-79415r1_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator (shown here as \\\"postgres\\\"),\r\n  create the role bob by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"CREATE ROLE bob\\\"\r\n\r\n  Next, change the current role to bob and attempt to execute privileged activity:\r\n\r\n  $ psql -c \\\"CREATE ROLE stig_test SUPERUSER\\\"\r\n  $ psql -c \\\"CREATE ROLE stig_test CREATEDB\\\"\r\n  $ psql -c \\\"CREATE ROLE stig_test CREATEROLE\\\"\r\n  $ psql -c \\\"CREATE ROLE stig_test CREATEUSER\\\"\r\n\r\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify that an\r\n  audit event was produced (use the latest log):\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >ERROR: must be\r\n  superuser to create superusers\r\n  < 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\r\n  CREATE ROLE stig_test SUPERUSER;\r\n  < 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >ERROR:\r\n  permission denied to create role\r\n  < 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\r\n  CREATE ROLE stig_test CREATEDB;\r\n  < 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >ERROR:\r\n  permission denied to create role\r\n  < 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\r\n  CREATE ROLE stig_test CREATEROLE;\r\n  < 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >ERROR: must be\r\n  superuser to create superusers\r\n  < 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\r\n  CREATE ROLE stig_test CREATEUSER;\r\n\r\n  If audit records are not produced, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Configure PostgreSQL to produce audit records when unsuccessful\r\n  attempts to execute privileged SQL.\r\n\r\n  All denials are logged by default if logging is enabled. To ensure that logging\r\n  is enabled, review supplementary content APPENDIX-C for instructions on\r\n  enabling logging.\"\r\n\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"CREATE ROLE fooaudit; SET ROLE fooaudit; CREATE ROLE fooauditbad SUPERUSER;\\\"\") do\r\n    its('stdout') { should match // }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"must be superuser to create superusers\\\"\") do\r\n    its('stdout') { should match /^.*must be superuser to create superusers.*$/ }\r\n  end\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"CREATE ROLE fooauditbad CREATEDB; CREATE ROLE fooauditbad CREATEROLE\\\"\") do\r\n    its('stdout') { should match // }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"permission denied to create role\\\"\") do\r\n    its('stdout') { should match /^.*permission denied to create role.*$/ }\r\n  end\r\n\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72969.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"CREATE ROLE fooaudit; SET ROLE fooaudit; CREATE ROLE fooauditbad SUPERUSER;\"` stdout is expected to match //","run_time":0.433905344,"start_time":"2020-06-19T18:47:38+00:00"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"must be superuser to create superusers\"` stdout is expected to match /^.*must be superuser to create superusers.*$/","run_time":0.415335045,"start_time":"2020-06-19T18:47:38+00:00","message":"expected \"\" to match /^.*must be superuser to create superusers.*$/\nDiff:\n@@ -1,2 +1,2 @@\n-/^.*must be superuser to create superusers.*$/\n+\"\"\n"},{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"CREATE ROLE fooauditbad CREATEDB; CREATE ROLE fooauditbad CREATEROLE\"` stdout is expected to match //","run_time":0.439839354,"start_time":"2020-06-19T18:47:38+00:00"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"permission denied to create role\"` stdout is expected to match /^.*permission denied to create role.*$/","run_time":0.412905162,"start_time":"2020-06-19T18:47:39+00:00","message":"expected \"\" to match /^.*permission denied to create role.*$/\nDiff:\n@@ -1,2 +1,2 @@\n-/^.*permission denied to create role.*$/\n+\"\"\n"}]},{"id":"V-72971","title":"PostgreSQL must generate audit records when security objects are\n  modified.","desc":"Changes in the database objects (tables, views, procedures, functions)\n  that record and control permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized changes to the\n  security subsystem could go undetected. The database could be severely\n  compromised or rendered inoperative.","descriptions":[{"label":"default","data":"Changes in the database objects (tables, views, procedures, functions)\n  that record and control permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized changes to the\n  security subsystem could go undetected. The database could be severely\n  compromised or rendered inoperative."},{"label":"check","data":"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL: \n\n  $ sudo su - postgres \n  $ psql -c \"SHOW shared_preload_libraries\" \n\n  If the results does not contain pgaudit, this is a finding. \n\n  Next, verify that role, read, write, and ddl auditing are enabled: \n\n  $ psql -c \"SHOW pgaudit.log\" \n\n  If the output does not contain role, read, write, and ddl, this is a finding. \n\n  Next, verify that accessing the catalog is audited by running the following\n  SQL: \n\n  $ psql -c \"SHOW pgaudit.log_catalog\" \n\n  If log_catalog is not on, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  Using pgaudit the DBMS (PostgreSQL) can be configured to audit these requests.\n  See supplementary content `APPENDIX-B` for documentation on installing\n  `pgaudit`. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log_catalog = 'on' \n  pgaudit.log='ddl, role, read, write' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000496-DB-000334","gid":"V-72971","rid":"SV-87623r2_rule","stig_id":"PGS9-00-006600","fix_id":"F-79417r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72971\" do\r\n  title \"PostgreSQL must generate audit records when security objects are\r\n  modified.\"\r\n  desc  \"Changes in the database objects (tables, views, procedures, functions)\r\n  that record and control permissions, privileges, and roles granted to users and\r\n  roles must be tracked. Without an audit trail, unauthorized changes to the\r\n  security subsystem could go undetected. The database could be severely\r\n  compromised or rendered inoperative.\"\r\n  \r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000496-DB-000334\"\r\n  tag \"gid\": \"V-72971\"\r\n  tag \"rid\": \"SV-87623r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-006600\"\r\n  tag \"fix_id\": \"F-79417r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator, verify pgaudit is enabled\r\n  by running the following SQL: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\" \r\n\r\n  If the results does not contain pgaudit, this is a finding. \r\n\r\n  Next, verify that role, read, write, and ddl auditing are enabled: \r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\" \r\n\r\n  If the output does not contain role, read, write, and ddl, this is a finding. \r\n\r\n  Next, verify that accessing the catalog is audited by running the following\r\n  SQL: \r\n\r\n  $ psql -c \\\"SHOW pgaudit.log_catalog\\\" \r\n\r\n  If log_catalog is not on, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  Using pgaudit the DBMS (PostgreSQL) can be configured to audit these requests.\r\n  See supplementary content `APPENDIX-B` for documentation on installing\r\n  `pgaudit`. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log_catalog = 'on' \r\n  pgaudit.log='ddl, role, read, write' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  pgaudit_types = %w(ddl read role write)\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\n\r\n  describe sql.query('SHOW pgaudit.log_catalog;', [pg_db]) do\r\n    its('output') { should match /on|true/i }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72971.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000271922,"start_time":"2020-06-19T18:47:39+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"ddl\"","run_time":0.000283041,"start_time":"2020-06-19T18:47:39+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"read\"","run_time":0.000271575,"start_time":"2020-06-19T18:47:39+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"read\"\nDiff:\n@@ -1,2 +1,4 @@\n-read\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.00028294,"start_time":"2020-06-19T18:47:39+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.000267235,"start_time":"2020-06-19T18:47:39+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"passed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log_catalog; output is expected to match /on|true/i","run_time":0.000131055,"start_time":"2020-06-19T18:47:39+00:00"}]},{"id":"V-72973","title":"PostgreSQL must generate audit records when categorized information\n  (e.g., classification levels/security levels) is modified.","desc":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.","descriptions":[{"label":"default","data":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems."},{"label":"check","data":"If category tracking is not required in the database, this is not\n  applicable.\n\n  First, as the database administrator, verify pgaudit is enabled by running the\n  following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If the output does not contain pgaudit, this is a finding.\n\n  Next, verify that role, read, write, and ddl auditing are enabled:\n\n  $ psql -c \"SHOW pgaudit.log\"\n\n  If the output does not contain role, read, write, and ddl, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log='ddl, role, read, write' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000498-DB-000346","gid":"V-72973","rid":"SV-87625r2_rule","stig_id":"PGS9-00-006700","fix_id":"F-79419r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72973\" do\r\n  title \"PostgreSQL must generate audit records when categorized information\r\n  (e.g., classification levels/security levels) is modified.\"\r\n  desc  \"Changes in categorized information must be tracked. Without an audit\r\n  trail, unauthorized access to protected data could go undetected.\r\n\r\n  For detailed information on categorizing information, refer to FIPS\r\n  Publication 199, Standards for Security Categorization of Federal Information\r\n  and Information Systems, and FIPS Publication 200, Minimum Security\r\n  Requirements for Federal Information and Information Systems.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000498-DB-000346\"\r\n  tag \"gid\": \"V-72973\"\r\n  tag \"rid\": \"SV-87625r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-006700\"\r\n  tag \"fix_id\": \"F-79419r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"If category tracking is not required in the database, this is not\r\n  applicable.\r\n\r\n  First, as the database administrator, verify pgaudit is enabled by running the\r\n  following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If the output does not contain pgaudit, this is a finding.\r\n\r\n  Next, verify that role, read, write, and ddl auditing are enabled:\r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n\r\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log='ddl, role, read, write' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  pgaudit_types = %w(ddl read role write)\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72973.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000180814,"start_time":"2020-06-19T18:47:39+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"ddl\"","run_time":0.000263548,"start_time":"2020-06-19T18:47:39+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"read\"","run_time":0.000347339,"start_time":"2020-06-19T18:47:39+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"read\"\nDiff:\n@@ -1,2 +1,4 @@\n-read\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.000264351,"start_time":"2020-06-19T18:47:39+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.00028902,"start_time":"2020-06-19T18:47:39+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-72975","title":"PostgreSQL must generate audit records when unsuccessful attempts to\n  modify privileges/permissions occur.","desc":"Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n\n  Modifying permissions is done via the GRANT and REVOKE commands.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.","descriptions":[{"label":"default","data":"Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n\n  Modifying permissions is done via the GRANT and REVOKE commands.\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones."},{"label":"check","data":"First, as the database administrator (shown here as\n  \"postgres\"), create a role 'bob' and a test table by running the following\n  SQL: \n\n  $ sudo su - postgres \n  $ psql -c \"CREATE ROLE bob; CREATE TABLE test(id INT)\" \n\n  Next, set current role to bob and attempt to modify privileges: \n\n  $ psql -c \"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\" \n  $ psql -c \"SET ROLE bob; REVOKE ALL PRIVILEGES ON test FROM bob;\" \n\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  unsuccessful attempt was logged: \n  \n  $ sudo su - postgres \n  $ cat ${PGDATA?}/pg_log/<latest_log> \n  2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for\n  relation test \n  2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES\n  ON test TO bob; \n  2016-07-14 18:14:52.895 EDT postgres postgres ERROR: permission denied for\n  relation test \n  2016-07-14 18:14:52.895 EDT postgres postgres STATEMENT: REVOKE ALL PRIVILEGES\n  ON test FROM bob; \n\n  If audit logs are not generated when unsuccessful attempts to modify\n  privileges/permissions occur, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to modify privileges occur.\n\n  All denials are logged by default if logging is enabled. To ensure that logging\n  is enabled, review supplementary content APPENDIX-C for instructions on\n  enabling logging."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000495-DB-000329","gid":"V-72975","rid":"SV-87627r2_rule","stig_id":"PGS9-00-006800","fix_id":"F-79421r1_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72975\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\r\n  modify privileges/permissions occur.\"\r\n  desc  \"Failed attempts to change the permissions, privileges, and roles\r\n  granted to users and roles must be tracked. Without an audit trail,\r\n  unauthorized attempts to elevate or restrict privileges could go undetected.\r\n\r\n  Modifying permissions is done via the GRANT and REVOKE commands.\r\n\r\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\r\n  addition to the successful ones.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000495-DB-000329\"\r\n  tag \"gid\": \"V-72975\"\r\n  tag \"rid\": \"SV-87627r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-006800\"\r\n  tag \"fix_id\": \"F-79421r1_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator (shown here as\r\n  \\\"postgres\\\"), create a role 'bob' and a test table by running the following\r\n  SQL: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"CREATE ROLE bob; CREATE TABLE test(id INT)\\\" \r\n\r\n  Next, set current role to bob and attempt to modify privileges: \r\n\r\n  $ psql -c \\\"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\\\" \r\n  $ psql -c \\\"SET ROLE bob; REVOKE ALL PRIVILEGES ON test FROM bob;\\\" \r\n\r\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  unsuccessful attempt was logged: \r\n  \r\n  $ sudo su - postgres \r\n  $ cat ${PGDATA?}/pg_log/<latest_log> \r\n  2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for\r\n  relation test \r\n  2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES\r\n  ON test TO bob; \r\n  2016-07-14 18:14:52.895 EDT postgres postgres ERROR: permission denied for\r\n  relation test \r\n  2016-07-14 18:14:52.895 EDT postgres postgres STATEMENT: REVOKE ALL PRIVILEGES\r\n  ON test FROM bob; \r\n\r\n  If audit logs are not generated when unsuccessful attempts to modify\r\n  privileges/permissions occur, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Configure PostgreSQL to produce audit records when unsuccessful\r\n  attempts to modify privileges occur.\r\n\r\n  All denials are logged by default if logging is enabled. To ensure that logging\r\n  is enabled, review supplementary content APPENDIX-C for instructions on\r\n  enabling logging.\"\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"CREATE ROLE fooaudit; CREATE TABLE fooaudittest (id int); SET ROLE fooaudit; GRANT ALL PRIVILEGES ON fooaudittest TO fooaudit; DROP TABLE IF EXISTS fooaudittest;\\\"\") do\r\n    its('stdout') { should match // }\r\n  end\r\n\r\n  describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"permission denied for relation\\\"\") do\r\n    its('stdout') { should match /^.*fooaudittest.*$/ }\r\n  end   \r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72975.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"CREATE ROLE fooaudit; CREATE TABLE fooaudittest (id int); SET ROLE fooaudit; GRANT ALL PRIVILEGES ON fooaudittest TO fooaudit; DROP TABLE IF EXISTS fooaudittest;\"` stdout is expected to match //","run_time":0.457933939,"start_time":"2020-06-19T18:47:39+00:00"},{"status":"failed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"permission denied for relation\"` stdout is expected to match /^.*fooaudittest.*$/","run_time":0.001108221,"start_time":"2020-06-19T18:47:40+00:00","message":"expected \"psql postgres db 112259 ::1(46760) 2020-06-19 15:54:08 UTC 5eecdfa0.1b683 ERROR:  permission denied ...::1(52252) 2020-06-19 18:47:32 UTC 5eed0844.70a0 ERROR:  permission denied for relation pg_authid\\n\" to match /^.*fooaudittest.*$/\nDiff:\n@@ -1,2 +1,42 @@\n-/^.*fooaudittest.*$/\n+psql postgres db 112259 ::1(46760) 2020-06-19 15:54:08 UTC 5eecdfa0.1b683 ERROR:  permission denied for relation test\n+psql postgres db 113138 ::1(47390) 2020-06-19 15:54:44 UTC 5eecdfc4.1b9f2 ERROR:  permission denied for relation stig_test\n+psql postgres db 113165 ::1(47408) 2020-06-19 15:54:44 UTC 5eecdfc4.1ba0d ERROR:  permission denied for relation stig_test\n+psql postgres db 113660 ::1(47780) 2020-06-19 15:55:08 UTC 5eecdfdc.1bbfc ERROR:  permission denied for relation pg_authid\n+psql postgres db 116634 ::1(50208) 2020-06-19 15:57:38 UTC 5eece072.1c79a ERROR:  permission denied for relation test\n+psql postgres db 117455 ::1(50810) 2020-06-19 15:58:12 UTC 5eece094.1cacf ERROR:  permission denied for relation stig_test\n+psql postgres db 117479 ::1(50826) 2020-06-19 15:58:13 UTC 5eece095.1cae7 ERROR:  permission denied for relation stig_test\n+psql postgres db 117974 ::1(51204) 2020-06-19 15:58:36 UTC 5eece0ac.1ccd6 ERROR:  permission denied for relation pg_authid\n+psql postgres db 120958 ::1(53544) 2020-06-19 16:00:59 UTC 5eece13b.1d87e ERROR:  permission denied for relation test\n+psql postgres db 121779 ::1(54154) 2020-06-19 16:01:32 UTC 5eece15c.1dbb3 ERROR:  permission denied for relation stig_test\n+psql postgres db 121803 ::1(54162) 2020-06-19 16:01:33 UTC 5eece15d.1dbcb ERROR:  permission denied for relation stig_test\n+psql postgres db 122295 ::1(54542) 2020-06-19 16:01:57 UTC 5eece175.1ddb7 ERROR:  permission denied for relation pg_authid\n+psql postgres db 125347 ::1(50780) 2020-06-19 16:41:20 UTC 5eeceab0.1e9a3 ERROR:  permission denied for relation test\n+psql postgres db 126172 ::1(51380) 2020-06-19 16:41:52 UTC 5eecead0.1ecdc ERROR:  permission denied for relation stig_test\n+psql postgres db 126196 ::1(51392) 2020-06-19 16:41:53 UTC 5eecead1.1ecf4 ERROR:  permission denied for relation stig_test\n+psql postgres db 126691 ::1(51748) 2020-06-19 16:42:16 UTC 5eeceae8.1eee3 ERROR:  permission denied for relation pg_authid\n+psql postgres db 1785 ::1(58538) 2020-06-19 16:50:30 UTC 5eececd6.6f9 ERROR:  permission denied for relation test\n+psql postgres db 2617 ::1(59142) 2020-06-19 16:51:03 UTC 5eececf7.a39 ERROR:  permission denied for relation stig_test\n+psql postgres db 2641 ::1(59152) 2020-06-19 16:51:04 UTC 5eececf8.a51 ERROR:  permission denied for relation stig_test\n+psql postgres db 3186 ::1(59550) 2020-06-19 16:51:29 UTC 5eeced11.c72 ERROR:  permission denied for relation pg_authid\n+psql postgres db 6305 ::1(51774) 2020-06-19 17:24:08 UTC 5eecf4b8.18a1 ERROR:  permission denied for relation test\n+psql postgres db 7114 ::1(52340) 2020-06-19 17:24:39 UTC 5eecf4d7.1bca ERROR:  permission denied for relation stig_test\n+psql postgres db 7138 ::1(52350) 2020-06-19 17:24:40 UTC 5eecf4d8.1be2 ERROR:  permission denied for relation stig_test\n+psql postgres db 7646 ::1(52732) 2020-06-19 17:25:03 UTC 5eecf4ef.1dde ERROR:  permission denied for relation pg_authid\n+psql postgres db 10638 ::1(58364) 2020-06-19 17:32:55 UTC 5eecf6c7.298e ERROR:  permission denied for relation test\n+psql postgres db 11440 ::1(58926) 2020-06-19 17:33:26 UTC 5eecf6e6.2cb0 ERROR:  permission denied for relation stig_test\n+psql postgres db 11464 ::1(58942) 2020-06-19 17:33:27 UTC 5eecf6e7.2cc8 ERROR:  permission denied for relation stig_test\n+psql postgres db 11969 ::1(59314) 2020-06-19 17:33:50 UTC 5eecf6fe.2ec1 ERROR:  permission denied for relation pg_authid\n+psql postgres db 15263 ::1(44736) 2020-06-19 17:54:59 UTC 5eecfbf3.3b9f ERROR:  permission denied for relation test\n+psql postgres db 16080 ::1(45304) 2020-06-19 17:55:31 UTC 5eecfc13.3ed0 ERROR:  permission denied for relation stig_test\n+psql postgres db 16104 ::1(45330) 2020-06-19 17:55:32 UTC 5eecfc14.3ee8 ERROR:  permission denied for relation stig_test\n+psql postgres db 16598 ::1(45702) 2020-06-19 17:55:55 UTC 5eecfc2b.40d6 ERROR:  permission denied for relation pg_authid\n+psql postgres db 19734 ::1(49572) 2020-06-19 18:00:48 UTC 5eecfd50.4d16 ERROR:  permission denied for relation test\n+psql postgres db 22850 ::1(54756) 2020-06-19 18:07:44 UTC 5eecfef0.5942 ERROR:  permission denied for relation test\n+psql postgres db 23665 ::1(55320) 2020-06-19 18:08:16 UTC 5eecff10.5c71 ERROR:  permission denied for relation stig_test\n+psql postgres db 23689 ::1(55328) 2020-06-19 18:08:16 UTC 5eecff10.5c89 ERROR:  permission denied for relation stig_test\n+psql postgres db 24181 ::1(55708) 2020-06-19 18:08:40 UTC 5eecff28.5e75 ERROR:  permission denied for relation pg_authid\n+psql postgres db 27470 ::1(51268) 2020-06-19 18:46:35 UTC 5eed080b.6b4e ERROR:  permission denied for relation test\n+psql postgres db 28316 ::1(51864) 2020-06-19 18:47:08 UTC 5eed082c.6e9c ERROR:  permission denied for relation stig_test\n+psql postgres db 28340 ::1(51882) 2020-06-19 18:47:09 UTC 5eed082d.6eb4 ERROR:  permission denied for relation stig_test\n+psql postgres db 28832 ::1(52252) 2020-06-19 18:47:32 UTC 5eed0844.70a0 ERROR:  permission denied for relation pg_authid\n"}]},{"id":"V-73039","title":"PostgreSQL must protect its audit features from unauthorized access.","desc":"Protecting audit data also includes identifying and protecting the\n  tools used to view and manipulate log data.\n\n  Depending upon the log format and application, system and application log\n  tools may provide the only means to manipulate and manage application and\n  system log data. It is, therefore, imperative that access to audit tools be\n  controlled and protected from unauthorized access.\n\n  Applications providing tools to interface with audit data will leverage\n  user permissions and roles identifying the user accessing the tools and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the access to audit tools.\n\n  Audit tools include, but are not limited to, OS-provided audit tools,\n  vendor-provided audit tools, and open source audit tools needed to successfully\n  view and manipulate audit information system activity and records.\n\n  If an attacker were to gain access to audit tools, he could analyze audit\n  logs for system weaknesses or weaknesses in the auditing itself. An attacker\n  could also manipulate logs to hide evidence of malicious activity.","descriptions":[{"label":"default","data":"Protecting audit data also includes identifying and protecting the\n  tools used to view and manipulate log data.\n\n  Depending upon the log format and application, system and application log\n  tools may provide the only means to manipulate and manage application and\n  system log data. It is, therefore, imperative that access to audit tools be\n  controlled and protected from unauthorized access.\n\n  Applications providing tools to interface with audit data will leverage\n  user permissions and roles identifying the user accessing the tools and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the access to audit tools.\n\n  Audit tools include, but are not limited to, OS-provided audit tools,\n  vendor-provided audit tools, and open source audit tools needed to successfully\n  view and manipulate audit information system activity and records.\n\n  If an attacker were to gain access to audit tools, he could analyze audit\n  logs for system weaknesses or weaknesses in the auditing itself. An attacker\n  could also manipulate logs to hide evidence of malicious activity."},{"label":"check","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER. Only the database owner and\n  superuser can alter configuration of PostgreSQL. \n\n  Make sure the pg_log directory are owned by postgres user and group: \n\n  $ sudo su - postgres \n  $ ls -la ${PGDATA?}/pg_log \n\n  If pg_log is not owned by the database owner, this is a finding. \n\n  Make sure the data directory are owned by postgres user and group. \n\n  $ sudo su - postgres \n  $ ls -la ${PGDATA?} \n\n  If PGDATA is not owned by the database owner, this is a finding. \n\n  Make sure pgaudit installation is owned by root: \n\n  $ sudo su - postgres \n  $ ls -la /usr/pgsql-${PGVER?}/share/contrib/pgaudit \n\n  If pgaudit installation is not owned by root, this is a finding. \n\n  Next, as the database administrator (shown here as \"postgres\"), run the\n  following SQL to list all roles and their privileges: \n\n  $ sudo su - postgres \n  $ psql -x -c \"\\du\" \n\n  If any role has \"superuser\" that should not, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  If pg_log or data directory are not owned by postgres user and group, configure\n  them as follows: \n\n  $ sudo chown -R postgres:postgres ${PGDATA?} \n\n  If the pgaudit installation is not owned by root user and group, configure it\n  as follows: \n\n  $ sudo chown -R root:root /usr/pgsql-${PGVER?}/share/contrib/pgaudit\n\n  To remove superuser from a role, as the database administrator (shown here as\n  \"postgres\"), run the following SQL: \n\n  $ sudo su - postgres \n  $ psql -c \"ALTER ROLE <role-name> WITH NOSUPERUSER\""}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000121-DB-000202","gid":"V-73039","rid":"SV-87691r2_rule","stig_id":"PGS9-00-010700","fix_id":"F-79485r2_fix","cci":["CCI-001493"],"nist":["AU-9","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73039\" do\n  title \"PostgreSQL must protect its audit features from unauthorized access.\"\n  desc  \"Protecting audit data also includes identifying and protecting the\n  tools used to view and manipulate log data.\n\n  Depending upon the log format and application, system and application log\n  tools may provide the only means to manipulate and manage application and\n  system log data. It is, therefore, imperative that access to audit tools be\n  controlled and protected from unauthorized access.\n\n  Applications providing tools to interface with audit data will leverage\n  user permissions and roles identifying the user accessing the tools and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the access to audit tools.\n\n  Audit tools include, but are not limited to, OS-provided audit tools,\n  vendor-provided audit tools, and open source audit tools needed to successfully\n  view and manipulate audit information system activity and records.\n\n  If an attacker were to gain access to audit tools, he could analyze audit\n  logs for system weaknesses or weaknesses in the auditing itself. An attacker\n  could also manipulate logs to hide evidence of malicious activity.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000121-DB-000202\"\n  tag \"gid\": \"V-73039\"\n  tag \"rid\": \"SV-87691r2_rule\"\n  tag \"stig_id\": \"PGS9-00-010700\"\n  tag \"fix_id\": \"F-79485r2_fix\"\n  tag \"cci\": [\"CCI-001493\"]\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\n  tag \"false_negatives\": nil\n  tag \"false_positives\": nil\n  tag \"documentable\": false\n  tag \"mitigations\": nil\n  tag \"severity_override_guidance\": false\n  tag \"potential_impacts\": nil\n  tag \"third_party_tools\": nil\n  tag \"mitigation_controls\": nil\n  tag \"responsibility\": nil\n  tag \"ia_controls\": nil\n  desc \"check\", \"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER. Only the database owner and\n  superuser can alter configuration of PostgreSQL. \n\n  Make sure the pg_log directory are owned by postgres user and group: \n\n  $ sudo su - postgres \n  $ ls -la ${PGDATA?}/pg_log \n\n  If pg_log is not owned by the database owner, this is a finding. \n\n  Make sure the data directory are owned by postgres user and group. \n\n  $ sudo su - postgres \n  $ ls -la ${PGDATA?} \n\n  If PGDATA is not owned by the database owner, this is a finding. \n\n  Make sure pgaudit installation is owned by root: \n\n  $ sudo su - postgres \n  $ ls -la /usr/pgsql-${PGVER?}/share/contrib/pgaudit \n\n  If pgaudit installation is not owned by root, this is a finding. \n\n  Next, as the database administrator (shown here as \\\"postgres\\\"), run the\n  following SQL to list all roles and their privileges: \n\n  $ sudo su - postgres \n  $ psql -x -c \\\"\\\\du\\\" \n\n  If any role has \\\"superuser\\\" that should not, this is a finding.\"\n  \n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  If pg_log or data directory are not owned by postgres user and group, configure\n  them as follows: \n\n  $ sudo chown -R postgres:postgres ${PGDATA?} \n\n  If the pgaudit installation is not owned by root user and group, configure it\n  as follows: \n\n  $ sudo chown -R root:root /usr/pgsql-${PGVER?}/share/contrib/pgaudit\n\n  To remove superuser from a role, as the database administrator (shown here as\n  \\\"postgres\\\"), run the following SQL: \n\n  $ sudo su - postgres \n  $ psql -c \\\"ALTER ROLE <role-name> WITH NOSUPERUSER\\\"\"\n\n  describe directory(pg_log_dir) do\n    it { should be_owned_by pg_owner }\n    it { should be_grouped_into pg_group }\n  end \n\n  describe file(pgaudit_installation) do\n    it { should_not be_owned_by 'root' }\n  end \n\n  describe directory(pg_data_dir) do\n    it { should be_owned_by pg_owner }\n    it { should be_grouped_into pg_group }\n  end \n\n  describe file(pgaudit_installation) do\n    it { should_not be_owned_by 'root' }\n  end\n\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\n\n  roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r;'\n  roles_query = sql.query(roles_sql, [pg_db])\n  roles = roles_query.lines\n\n  roles.each do |role|\n    unless pg_superusers.include?(role)\n      superuser_sql = \"SELECT r.rolsuper FROM pg_catalog.pg_roles r \"\\\n        \"WHERE r.rolname = '#{role}';\"\n\n      describe sql.query(superuser_sql, [pg_db]) do\n        its('output') { should_not eq 't' }\n      end\n    end\n  end\nend\n","source_location":{"line":21,"ref":"controls/V-73039.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be owned by \"postgres\"","run_time":0.008101261,"start_time":"2020-06-19T18:47:40+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be grouped into \"postgres\"","run_time":0.008559764,"start_time":"2020-06-19T18:47:40+00:00"},{"status":"passed","code_desc":"File  is expected not to be owned by \"root\"","run_time":0.433589415,"start_time":"2020-06-19T18:47:40+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data is expected to be owned by \"postgres\"","run_time":0.00894405,"start_time":"2020-06-19T18:47:40+00:00"},{"status":"failed","code_desc":"Directory /var/lib/pgsql/data is expected to be grouped into \"postgres\"","run_time":0.007835895,"start_time":"2020-06-19T18:47:40+00:00","message":"expected `Directory /var/lib/pgsql/data.grouped_into?(\"postgres\")` to return true, got false"},{"status":"passed","code_desc":"File  is expected not to be owned by \"root\"","run_time":0.007208865,"start_time":"2020-06-19T18:47:40+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'pg_signal_backend'; output is expected not to eq \"t\"","run_time":0.000131528,"start_time":"2020-06-19T18:47:40+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'bob'; output is expected not to eq \"t\"","run_time":9.8537e-05,"start_time":"2020-06-19T18:47:40+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'fooaudit'; output is expected not to eq \"t\"","run_time":9.4959e-05,"start_time":"2020-06-19T18:47:40+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'test'; output is expected not to eq \"t\"","run_time":9.1384e-05,"start_time":"2020-06-19T18:47:40+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'user'; output is expected not to eq \"t\"","run_time":0.000125586,"start_time":"2020-06-19T18:47:40+00:00"}]},{"id":"V-72979","title":"PostgreSQL, when utilizing PKI-based authentication, must validate\n  certificates by performing RFC 5280-compliant certification path validation.","desc":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n  A certificate’s certification path is the path from the end entity\n  certificate to a trusted root certification authority (CA). Certification path\n  validation is necessary for a relying party to make an informed decision\n  regarding acceptance of an end entity certificate. Certification path\n  validation includes checks such as certificate issuer trust, time validity and\n  revocation status for each certificate in the certification path. Revocation\n  status information for CA and subject certificates in a certification path is\n  commonly provided via certificate revocation lists (CRLs) or online certificate\n  status protocol (OCSP) responses.\n\n  Database Management Systems that do not validate certificates by performing\n  RFC 5280-compliant certification path validation are in danger of accepting\n  certificates that are invalid and/or counterfeit. This could allow unauthorized\n  access to the database.","descriptions":[{"label":"default","data":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n  A certificate’s certification path is the path from the end entity\n  certificate to a trusted root certification authority (CA). Certification path\n  validation is necessary for a relying party to make an informed decision\n  regarding acceptance of an end entity certificate. Certification path\n  validation includes checks such as certificate issuer trust, time validity and\n  revocation status for each certificate in the certification path. Revocation\n  status information for CA and subject certificates in a certification path is\n  commonly provided via certificate revocation lists (CRLs) or online certificate\n  status protocol (OCSP) responses.\n\n  Database Management Systems that do not validate certificates by performing\n  RFC 5280-compliant certification path validation are in danger of accepting\n  certificates that are invalid and/or counterfeit. This could allow unauthorized\n  access to the database."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA. \n\n  To verify that a CRL file exists, as the database administrator (shown here as\n  \"postgres\"), run the following: \n\n  $ sudo su - postgres \n  $ psql -c \"SHOW ssl_crl_file\" \n\n  If this is not set to a CRL file, this is a finding. \n\n  Next verify the existence of the CRL file by checking the directory set in\n  postgresql.conf in the ssl_crl_file parameter from above: \n\n  Note: If no directory is specified, then the CRL file should be located in the\n  same directory as postgresql.conf (PGDATA). \n\n  If the CRL file does not exist, this is a finding. \n\n  Next, verify that hostssl entries in pg_hba.conf have \"cert\" and\n  \"clientcert=1\" enabled: \n\n  $ sudo su - postgres \n  $ grep hostssl ${PGDATA?}/pg_hba.conf \n\n  If hostssl entries do not contain cert or clientcert=1, this is a finding. \n\n  If certificates are not being validated by performing RFC 5280-compliant\n  certification path validation, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G. \n\n  To generate a Certificate Revocation List, see the official Red Hat\n  Documentation:\n  https://access.redhat.com/documentation/en-US/Red_Hat_Update_Infrastructure/2.1/html/Administration_Guide/chap-Red_Hat_Update_Infrastructure-Administration_Guide-Certification_Revocation_List_CRL.html \n\n  As the database administrator (shown here as \"postgres\"), copy the CRL file\n  into the data directory: \n\n  First, as the system administrator, copy the CRL file into the PostgreSQL Data\n  Directory: \n\n  $ sudo cp root.crl ${PGDATA?}/root.crl \n\n  As the database administrator (shown here as \"postgres\"), set the\n  ssl_crl_file parameter to the filename of the CRL: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  ssl_crl_file = 'root.crl' \n\n  Next, in pg_hba.conf, require ssl authentication: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/pg_hba.conf \n  hostssl <database> <user> <address> cert clientcert=1 \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000175-DB-000067","gid":"V-72979","rid":"SV-87631r2_rule","stig_id":"PGS9-00-007000","fix_id":"F-79425r6_fix","cci":["CCI-000185"],"nist":["IA-5 (2) (a)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72979\" do\r\n  title \"PostgreSQL, when utilizing PKI-based authentication, must validate\r\n  certificates by performing RFC 5280-compliant certification path validation.\"\r\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\r\n\r\n  A certificate’s certification path is the path from the end entity\r\n  certificate to a trusted root certification authority (CA). Certification path\r\n  validation is necessary for a relying party to make an informed decision\r\n  regarding acceptance of an end entity certificate. Certification path\r\n  validation includes checks such as certificate issuer trust, time validity and\r\n  revocation status for each certificate in the certification path. Revocation\r\n  status information for CA and subject certificates in a certification path is\r\n  commonly provided via certificate revocation lists (CRLs) or online certificate\r\n  status protocol (OCSP) responses.\r\n\r\n  Database Management Systems that do not validate certificates by performing\r\n  RFC 5280-compliant certification path validation are in danger of accepting\r\n  certificates that are invalid and/or counterfeit. This could allow unauthorized\r\n  access to the database.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000175-DB-000067\"\r\n  tag \"gid\": \"V-72979\"\r\n  tag \"rid\": \"SV-87631r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-007000\"\r\n  tag \"fix_id\": \"F-79425r6_fix\"\r\n  tag \"cci\": [\"CCI-000185\"]\r\n  tag \"nist\": [\"IA-5 (2) (a)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA. \r\n\r\n  To verify that a CRL file exists, as the database administrator (shown here as\r\n  \\\"postgres\\\"), run the following: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"SHOW ssl_crl_file\\\" \r\n\r\n  If this is not set to a CRL file, this is a finding. \r\n\r\n  Next verify the existence of the CRL file by checking the directory set in\r\n  postgresql.conf in the ssl_crl_file parameter from above: \r\n\r\n  Note: If no directory is specified, then the CRL file should be located in the\r\n  same directory as postgresql.conf (PGDATA). \r\n\r\n  If the CRL file does not exist, this is a finding. \r\n\r\n  Next, verify that hostssl entries in pg_hba.conf have \\\"cert\\\" and\r\n  \\\"clientcert=1\\\" enabled: \r\n\r\n  $ sudo su - postgres \r\n  $ grep hostssl ${PGDATA?}/pg_hba.conf \r\n\r\n  If hostssl entries do not contain cert or clientcert=1, this is a finding. \r\n\r\n  If certificates are not being validated by performing RFC 5280-compliant\r\n  certification path validation, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G. \r\n\r\n  To generate a Certificate Revocation List, see the official Red Hat\r\n  Documentation:\r\n  https://access.redhat.com/documentation/en-US/Red_Hat_Update_Infrastructure/2.1/html/Administration_Guide/chap-Red_Hat_Update_Infrastructure-Administration_Guide-Certification_Revocation_List_CRL.html \r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), copy the CRL file\r\n  into the data directory: \r\n\r\n  First, as the system administrator, copy the CRL file into the PostgreSQL Data\r\n  Directory: \r\n\r\n  $ sudo cp root.crl ${PGDATA?}/root.crl \r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), set the\r\n  ssl_crl_file parameter to the filename of the CRL: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  ssl_crl_file = 'root.crl' \r\n\r\n  Next, in pg_hba.conf, require ssl authentication: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/pg_hba.conf \r\n  hostssl <database> <user> <address> cert clientcert=1 \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  ssl_crl_file_query = sql.query('SHOW ssl_crl_file;', [pg_db])\r\n\r\n  describe ssl_crl_file_query do\r\n    its('output') { should match /^\\w+\\.crl$/ }\r\n  end\r\n\r\n  ssl_crl_file = ssl_crl_file_query.output\r\n\r\n  if ssl_crl_file.empty?\r\n    ssl_crl_file = \"#{pg_data_dir}/root.crl\"\r\n  elsif File.dirname(ssl_crl_file) == '.'\r\n    ssl_crl_file = \"#{pg_data_dir}/#{ssl_crl_file}\"\r\n  end\r\n\r\n  describe file(ssl_crl_file) do\r\n    it { should be_file }\r\n  end\r\n\r\n  describe.one do\r\n    describe postgres_hba_conf(pg_hba_conf_file).where { type == 'hostssl' } do\r\n      its('auth_method') { should include 'cert' }\r\n    end\r\n    describe postgres_hba_conf(pg_hba_conf_file).where { type == 'hostssl' } do\r\n      its('auth_params') { should match [/clientcert=1.*/] }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72979.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW ssl_crl_file; output is expected to match /^\\w+\\.crl$/","run_time":0.000410097,"start_time":"2020-06-19T18:47:40+00:00","message":"expected \"\" to match /^\\w+\\.crl$/\nDiff:\n@@ -1,2 +1,2 @@\n-/^\\w+\\.crl$/\n+\"\"\n"},{"status":"failed","code_desc":"File /var/lib/pgsql/data/root.crl is expected to be file","run_time":0.409599968,"start_time":"2020-06-19T18:47:40+00:00","message":"expected `File /var/lib/pgsql/data/root.crl.file?` to return true, got false"},{"status":"failed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with type == \"hostssl\" auth_method is expected to include \"cert\"","run_time":0.00030958,"start_time":"2020-06-19T18:47:41+00:00","message":"expected [] to include \"cert\"","exception":"RSpec::Core::MultipleExceptionError"},{"status":"failed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with type == \"hostssl\" auth_params is expected to match [/clientcert=1.*/]","run_time":0.00042796,"start_time":"2020-06-19T18:47:41+00:00","message":"expected [] to match [/clientcert=1.*/]\nDiff:\n@@ -1,2 +1,2 @@\n-[/clientcert=1.*/]\n+[]\n","exception":"RSpec::Core::MultipleExceptionError"}]},{"id":"V-72981","title":"PostgreSQL must maintain the confidentiality and integrity of\n  information during preparation for transmission.","desc":"Information can be either unintentionally or maliciously disclosed or\n  modified during preparation for transmission, including, for example, during\n  aggregation, at protocol transformation points, and during packing/unpacking.\n  These unauthorized disclosures or modifications compromise the confidentiality\n  or integrity of the information.\n\n  Use of this requirement will be limited to situations where the data owner\n  has a strict requirement for ensuring data integrity and confidentiality is\n  maintained at every step of the data transfer and handling process.\n\n  When transmitting data, PostgreSQL, associated applications, and\n  infrastructure must leverage transmission protection mechanisms.\n\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c, while the\n  name is misleading, this function enables only TLS encryption methods, not SSL.\n\n  See OpenSSL:\n  https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html","descriptions":[{"label":"default","data":"Information can be either unintentionally or maliciously disclosed or\n  modified during preparation for transmission, including, for example, during\n  aggregation, at protocol transformation points, and during packing/unpacking.\n  These unauthorized disclosures or modifications compromise the confidentiality\n  or integrity of the information.\n\n  Use of this requirement will be limited to situations where the data owner\n  has a strict requirement for ensuring data integrity and confidentiality is\n  maintained at every step of the data transfer and handling process.\n\n  When transmitting data, PostgreSQL, associated applications, and\n  infrastructure must leverage transmission protection mechanisms.\n\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c, while the\n  name is misleading, this function enables only TLS encryption methods, not SSL.\n\n  See OpenSSL:\n  https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html"},{"label":"check","data":"If the data owner does not have a strict requirement for ensuring\n  data integrity and confidentiality is maintained at every step of the data\n  transfer and handling process, this is not a finding.\n\n  As the database administrator (shown here as \"postgres\"), verify SSL is\n  enabled by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl\"\n\n  If SSL is not enabled, this is a finding.\n\n  If PostgreSQL does not employ protective measures against unauthorized\n  disclosure and modification during preparation for transmission, this is a\n  finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Implement protective measures against unauthorized disclosure and modification\n  during preparation for transmission. \n\n  To configure PostgreSQL to use SSL, as a database administrator (shown here as\n  \"postgres\"), edit postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameter: \n\n  ssl = on \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload \n\n  For more information on configuring PostgreSQL to use SSL, see supplementary\ncontent APPENDIX-G."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000441-DB-000378","gid":"V-72981","rid":"SV-87633r2_rule","stig_id":"PGS9-00-007200","fix_id":"F-79427r2_fix","cci":["CCI-002420"],"nist":["SC-8 (2)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72981\" do\r\n  title \"PostgreSQL must maintain the confidentiality and integrity of\r\n  information during preparation for transmission.\"\r\n  desc  \"Information can be either unintentionally or maliciously disclosed or\r\n  modified during preparation for transmission, including, for example, during\r\n  aggregation, at protocol transformation points, and during packing/unpacking.\r\n  These unauthorized disclosures or modifications compromise the confidentiality\r\n  or integrity of the information.\r\n\r\n  Use of this requirement will be limited to situations where the data owner\r\n  has a strict requirement for ensuring data integrity and confidentiality is\r\n  maintained at every step of the data transfer and handling process.\r\n\r\n  When transmitting data, PostgreSQL, associated applications, and\r\n  infrastructure must leverage transmission protection mechanisms.\r\n\r\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c, while the\r\n  name is misleading, this function enables only TLS encryption methods, not SSL.\r\n\r\n  See OpenSSL:\r\n  https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000441-DB-000378\"\r\n  tag \"gid\": \"V-72981\"\r\n  tag \"rid\": \"SV-87633r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-007200\"\r\n  tag \"fix_id\": \"F-79427r2_fix\"\r\n  tag \"cci\": [\"CCI-002420\"]\r\n  tag \"nist\": [\"SC-8 (2)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"If the data owner does not have a strict requirement for ensuring\r\n  data integrity and confidentiality is maintained at every step of the data\r\n  transfer and handling process, this is not a finding.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), verify SSL is\r\n  enabled by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW ssl\\\"\r\n\r\n  If SSL is not enabled, this is a finding.\r\n\r\n  If PostgreSQL does not employ protective measures against unauthorized\r\n  disclosure and modification during preparation for transmission, this is a\r\n  finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Implement protective measures against unauthorized disclosure and modification\r\n  during preparation for transmission. \r\n\r\n  To configure PostgreSQL to use SSL, as a database administrator (shown here as\r\n  \\\"postgres\\\"), edit postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameter: \r\n\r\n  ssl = on \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload \r\n\r\n  For more information on configuring PostgreSQL to use SSL, see supplementary\r\ncontent APPENDIX-G.\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW ssl;', [pg_db]) do\r\n    its('output') { should match /on|true/i }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72981.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW ssl; output is expected to match /on|true/i","run_time":0.000292067,"start_time":"2020-06-19T18:47:41+00:00","message":"expected \"off\" to match /on|true/i\nDiff:\n@@ -1,2 +1,2 @@\n-/on|true/i\n+\"off\"\n"}]},{"id":"V-72997","title":"PostgreSQL must prohibit user installation of logic modules\n  (functions, trigger procedures, views, etc.) without explicit privileged\n  status.","desc":"Allowing regular users to install software, without explicit\n  privileges, creates the risk that untested or potentially malicious software\n  will be installed on the system. Explicit privileges (escalated or\n  administrative privileges) provide the regular user with explicit capabilities\n  and control that exceed the rights of a regular user.\n  \n  PostgreSQL functionality and the nature and requirements of databases will\n  vary; so while users are not permitted to install unapproved software, there\n  may be instances where the organization allows the user to install approved\n  software packages such as from an approved software repository. The\n  requirements for production servers will be more restrictive than those used\n  for development and research.\n  \n  PostgreSQL must enforce software installation by users based upon what\n  types of software installations are permitted (e.g., updates and security\n  patches to existing software) and what types of installations are prohibited\n  (e.g., software whose pedigree with regard to being potentially malicious is\n  unknown or suspect) by the organization).\n  \n  In the case of a database management system, this requirement covers stored\n  procedures, functions, triggers, views, etc.","descriptions":[{"label":"default","data":"Allowing regular users to install software, without explicit\n  privileges, creates the risk that untested or potentially malicious software\n  will be installed on the system. Explicit privileges (escalated or\n  administrative privileges) provide the regular user with explicit capabilities\n  and control that exceed the rights of a regular user.\n  \n  PostgreSQL functionality and the nature and requirements of databases will\n  vary; so while users are not permitted to install unapproved software, there\n  may be instances where the organization allows the user to install approved\n  software packages such as from an approved software repository. The\n  requirements for production servers will be more restrictive than those used\n  for development and research.\n  \n  PostgreSQL must enforce software installation by users based upon what\n  types of software installations are permitted (e.g., updates and security\n  patches to existing software) and what types of installations are prohibited\n  (e.g., software whose pedigree with regard to being potentially malicious is\n  unknown or suspect) by the organization).\n  \n  In the case of a database management system, this requirement covers stored\n  procedures, functions, triggers, views, etc."},{"label":"check","data":"If PostgreSQL supports only software development, experimentation\n  and/or developer-level testing (that is, excluding production systems,\n  integration testing, stress testing, and user acceptance testing), this is not\n  a finding.\n  \n  Review PostgreSQL and database security settings with respect to\n  non-administrative users' ability to create, alter, or replace logic modules,\n  to include but not necessarily only stored procedures, functions, triggers, and\n  views.\n  \n  To list the privileges for all tables and schemas, as the database\n  administrator (shown here as \"postgres\"), run the following:\n  \n  $ sudo su - postgres\n  $ psql -c \"\\dp\"\n  $ psql -c \"\\dn+\"\n  \n  The privileges are as follows:\n  \n  rolename=xxxx -- privileges granted to a role\n  =xxxx -- privileges granted to PUBLIC\n  \n  r -- SELECT (\"read\")\n  w -- UPDATE (\"write\")\n  a -- INSERT (\"append\")\n  d -- DELETE\n  D -- TRUNCATE\n  x -- REFERENCES\n  t -- TRIGGER\n  X -- EXECUTE\n  U -- USAGE\n  C -- CREATE\n  c -- CONNECT\n  T -- TEMPORARY\n  arwdDxt -- ALL PRIVILEGES (for tables, varies for other objects)\n  * -- grant option for preceding privilege\n  \n  /yyyy -- role that granted this privilege\n\n  If any such permissions exist and are not documented and approved, this is a\n  finding."},{"label":"fix","data":"Document and obtain approval for any non-administrative users who\n  require the ability to create, alter or replace logic modules.\n\n  Implement the approved permissions. Revoke any unapproved permissions."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000378-DB-000365","gid":"V-72997","rid":"SV-87649r1_rule","stig_id":"PGS9-00-008400","fix_id":"F-79443r1_fix","cci":["CCI-001812"],"nist":["CM-11 (2)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72997\" do\r\n  title \"PostgreSQL must prohibit user installation of logic modules\r\n  (functions, trigger procedures, views, etc.) without explicit privileged\r\n  status.\"\r\n  desc  \"Allowing regular users to install software, without explicit\r\n  privileges, creates the risk that untested or potentially malicious software\r\n  will be installed on the system. Explicit privileges (escalated or\r\n  administrative privileges) provide the regular user with explicit capabilities\r\n  and control that exceed the rights of a regular user.\r\n  \r\n  PostgreSQL functionality and the nature and requirements of databases will\r\n  vary; so while users are not permitted to install unapproved software, there\r\n  may be instances where the organization allows the user to install approved\r\n  software packages such as from an approved software repository. The\r\n  requirements for production servers will be more restrictive than those used\r\n  for development and research.\r\n  \r\n  PostgreSQL must enforce software installation by users based upon what\r\n  types of software installations are permitted (e.g., updates and security\r\n  patches to existing software) and what types of installations are prohibited\r\n  (e.g., software whose pedigree with regard to being potentially malicious is\r\n  unknown or suspect) by the organization).\r\n  \r\n  In the case of a database management system, this requirement covers stored\r\n  procedures, functions, triggers, views, etc.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000378-DB-000365\"\r\n  tag \"gid\": \"V-72997\"\r\n  tag \"rid\": \"SV-87649r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-008400\"\r\n  tag \"fix_id\": \"F-79443r1_fix\"\r\n  tag \"cci\": [\"CCI-001812\"]\r\n  tag \"nist\": [\"CM-11 (2)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"If PostgreSQL supports only software development, experimentation\r\n  and/or developer-level testing (that is, excluding production systems,\r\n  integration testing, stress testing, and user acceptance testing), this is not\r\n  a finding.\r\n  \r\n  Review PostgreSQL and database security settings with respect to\r\n  non-administrative users' ability to create, alter, or replace logic modules,\r\n  to include but not necessarily only stored procedures, functions, triggers, and\r\n  views.\r\n  \r\n  To list the privileges for all tables and schemas, as the database\r\n  administrator (shown here as \\\"postgres\\\"), run the following:\r\n  \r\n  $ sudo su - postgres\r\n  $ psql -c \\\"\\\\dp\\\"\r\n  $ psql -c \\\"\\\\dn+\\\"\r\n  \r\n  The privileges are as follows:\r\n  \r\n  rolename=xxxx -- privileges granted to a role\r\n  =xxxx -- privileges granted to PUBLIC\r\n  \r\n  r -- SELECT (\\\"read\\\")\r\n  w -- UPDATE (\\\"write\\\")\r\n  a -- INSERT (\\\"append\\\")\r\n  d -- DELETE\r\n  D -- TRUNCATE\r\n  x -- REFERENCES\r\n  t -- TRIGGER\r\n  X -- EXECUTE\r\n  U -- USAGE\r\n  C -- CREATE\r\n  c -- CONNECT\r\n  T -- TEMPORARY\r\n  arwdDxt -- ALL PRIVILEGES (for tables, varies for other objects)\r\n  * -- grant option for preceding privilege\r\n  \r\n  /yyyy -- role that granted this privilege\r\n\r\n  If any such permissions exist and are not documented and approved, this is a\r\n  finding.\"\r\n  desc \"fix\", \"Document and obtain approval for any non-administrative users who\r\n  require the ability to create, alter or replace logic modules.\r\n\r\n  Implement the approved permissions. Revoke any unapproved permissions.\"\r\n  \r\n  describe \"Review PostgreSQL and database security settings with respect to non-administrative users' permissions.\" do\r\n    skip \"If any such permissions exist and are not documented and approved, this is a finding\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72997.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Review PostgreSQL and database security settings with respect to non-administrative users' permissions.","run_time":6.36e-06,"start_time":"2020-06-19T18:47:41+00:00","resource":"","skip_message":"If any such permissions exist and are not documented and approved, this is a finding"}]},{"id":"V-72861","title":"PostgreSQL must associate organization-defined types of security\n  labels having organization-defined security label values with information in\n  transmission.","desc":"Without the association of security labels to information, there is no\n  basis for PostgreSQL to make security-related access-control decisions.\n\n  Security labels are abstractions representing the basic properties or\n  characteristics of an entity (e.g., subjects and objects) with respect to\n  safeguarding information.\n\n  These labels are typically associated with internal data structures (e.g.,\n  tables, rows) within the database and are used to enable the implementation of\n  access control and flow control policies, reflect special dissemination,\n  handling or distribution instructions, or support other aspects of the\n  information security policy.\n\n  One example includes marking data as classified or FOUO. These security\n  labels may be assigned manually or during data processing, but, either way, it\n  is imperative these assignments are maintained while the data is in storage. If\n  the security labels are lost when the data is stored, there is the risk of a\n  data compromise.","descriptions":[{"label":"default","data":"Without the association of security labels to information, there is no\n  basis for PostgreSQL to make security-related access-control decisions.\n\n  Security labels are abstractions representing the basic properties or\n  characteristics of an entity (e.g., subjects and objects) with respect to\n  safeguarding information.\n\n  These labels are typically associated with internal data structures (e.g.,\n  tables, rows) within the database and are used to enable the implementation of\n  access control and flow control policies, reflect special dissemination,\n  handling or distribution instructions, or support other aspects of the\n  information security policy.\n\n  One example includes marking data as classified or FOUO. These security\n  labels may be assigned manually or during data processing, but, either way, it\n  is imperative these assignments are maintained while the data is in storage. If\n  the security labels are lost when the data is stored, there is the risk of a\n  data compromise."},{"label":"check","data":"If security labeling is not required, this is not a finding.\n\n  First, as the database administrator (shown here as \"postgres\"), run the\n  following SQL against each table that requires security labels:\n\n  $ sudo su - postgres\n  $ psql -c \"\\d+ <schema_name>.<table_name>\"\n\n  If security labeling is required and the results of the SQL above do not show a\n  policy attached to the table, this is a finding.\n\n  If security labeling is required and not implemented according to the system\n  documentation, such as SSP, this is a finding.\n\n  If security labeling requirements have been specified, but the security\n  labeling is not implemented or does not reliably maintain labels on information\n  in storage, this is a finding."},{"label":"fix","data":"In addition to the SQL-standard privilege system available through\n  GRANT, tables can have row security policies that restrict, on a per-user\n  basis, which rows can be returned by normal queries or inserted, updated, or\n  deleted by data modification commands. This feature is also known as Row-Level\n  Security(RLS).\n\n  RLS policies can be very different depending on their use case. For one example\n  of using RLS for Security Labels, see supplementary content APPENDIX-D."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000314-DB-000310","gid":"V-72861","rid":"SV-87513r1_rule","stig_id":"PGS9-00-001100","fix_id":"F-79303r2_fix","cci":["CCI-002264"],"nist":["AC-16 a","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72861\" do\r\n  title \"PostgreSQL must associate organization-defined types of security\r\n  labels having organization-defined security label values with information in\r\n  transmission.\"\r\n  desc  \"Without the association of security labels to information, there is no\r\n  basis for PostgreSQL to make security-related access-control decisions.\r\n\r\n  Security labels are abstractions representing the basic properties or\r\n  characteristics of an entity (e.g., subjects and objects) with respect to\r\n  safeguarding information.\r\n\r\n  These labels are typically associated with internal data structures (e.g.,\r\n  tables, rows) within the database and are used to enable the implementation of\r\n  access control and flow control policies, reflect special dissemination,\r\n  handling or distribution instructions, or support other aspects of the\r\n  information security policy.\r\n\r\n  One example includes marking data as classified or FOUO. These security\r\n  labels may be assigned manually or during data processing, but, either way, it\r\n  is imperative these assignments are maintained while the data is in storage. If\r\n  the security labels are lost when the data is stored, there is the risk of a\r\n  data compromise.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000314-DB-000310\"\r\n  tag \"gid\": \"V-72861\"\r\n  tag \"rid\": \"SV-87513r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-001100\"\r\n  tag \"fix_id\": \"F-79303r2_fix\"\r\n  tag \"cci\": [\"CCI-002264\"]\r\n  tag \"nist\": [\"AC-16 a\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"If security labeling is not required, this is not a finding.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), run the\r\n  following SQL against each table that requires security labels:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"\\\\d+ <schema_name>.<table_name>\\\"\r\n\r\n  If security labeling is required and the results of the SQL above do not show a\r\n  policy attached to the table, this is a finding.\r\n\r\n  If security labeling is required and not implemented according to the system\r\n  documentation, such as SSP, this is a finding.\r\n\r\n  If security labeling requirements have been specified, but the security\r\n  labeling is not implemented or does not reliably maintain labels on information\r\n  in storage, this is a finding.\"\r\n\r\n  desc \"fix\", \"In addition to the SQL-standard privilege system available through\r\n  GRANT, tables can have row security policies that restrict, on a per-user\r\n  basis, which rows can be returned by normal queries or inserted, updated, or\r\n  deleted by data modification commands. This feature is also known as Row-Level\r\n  Security(RLS).\r\n\r\n  RLS policies can be very different depending on their use case. For one example\r\n  of using RLS for Security Labels, see supplementary content APPENDIX-D.\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe \"Check security labeling is implemented according to the system documentation\" do\r\n    skip \"If security labeling is required and the results of the SQL above do not show a policy attached to the table, this is a finding.\"\r\n  end\r\nend\r\n","source_location":{"line":9,"ref":"controls/V-72861.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Check security labeling is implemented according to the system documentation","run_time":3.963e-06,"start_time":"2020-06-19T18:47:41+00:00","resource":"","skip_message":"If security labeling is required and the results of the SQL above do not show a policy attached to the table, this is a finding."}]},{"id":"V-72987","title":"PostgreSQL must produce audit records containing sufficient\n  information to establish the identity of any user/subject or process associated\n  with the event.","desc":"Information system auditing capability is critical for accurate\n  forensic analysis. Without information that establishes the identity of the\n  subjects (i.e., users or processes acting on behalf of users) associated with\n  the events, security personnel cannot determine responsibility for the\n  potentially harmful event.\n\n  Identifiers (if authenticated or otherwise known) include, but are not\n  limited to, user database tables, primary key values, user names, or process\n  identifiers.\n\n  1) Linux's sudo and su feature enables a user (with sufficient OS\n  privileges) to emulate another user, and it is the identity of the emulated\n  user that is seen by PostgreSQL and logged in the audit trail. Therefore, care\n  must be taken (outside of Postgresql) to restrict sudo/su to the minimum set of\n  users necessary.\n\n  2) PostgreSQL's SET ROLE feature enables a user (with sufficient PostgreSQL\n  privileges) to emulate another user running statements under the permission set\n  of the emulated user. In this case, it is the emulating user's identity, and\n  not that of the emulated user, that gets logged in the audit trail. While this\n  is definitely better than the other way around, ideally, both identities would\n  be recorded.","descriptions":[{"label":"default","data":"Information system auditing capability is critical for accurate\n  forensic analysis. Without information that establishes the identity of the\n  subjects (i.e., users or processes acting on behalf of users) associated with\n  the events, security personnel cannot determine responsibility for the\n  potentially harmful event.\n\n  Identifiers (if authenticated or otherwise known) include, but are not\n  limited to, user database tables, primary key values, user names, or process\n  identifiers.\n\n  1) Linux's sudo and su feature enables a user (with sufficient OS\n  privileges) to emulate another user, and it is the identity of the emulated\n  user that is seen by PostgreSQL and logged in the audit trail. Therefore, care\n  must be taken (outside of Postgresql) to restrict sudo/su to the minimum set of\n  users necessary.\n\n  2) PostgreSQL's SET ROLE feature enables a user (with sufficient PostgreSQL\n  privileges) to emulate another user running statements under the permission set\n  of the emulated user. In this case, it is the emulating user's identity, and\n  not that of the emulated user, that gets logged in the audit trail. While this\n  is definitely better than the other way around, ideally, both identities would\n  be recorded."},{"label":"check","data":"Check PostgreSQL settings and existing audit records to verify a\n  user name associated with the event is being captured and stored with the audit\n  records. If audit records exist without specific user information, this is a\n  finding.\n\n  First, as the database administrator (shown here as \"postgres\"), verify the\n  current setting of log_line_prefix by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_line_prefix\"\n\n  If log_line_prefix does not contain %m, %u, %d, %p, %r, %a, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Logging must be enabled in order to capture the identity of any user/subject or\n  process associated with an event. To ensure that logging is enabled, review\n  supplementary content APPENDIX-C for instructions on enabling logging. \n\n  To enable username, database name, process ID, remote host/port and application\n  name in logging, as the database administrator (shown here as \"postgres\"),\n  edit the following in postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  log_line_prefix = '< %m %u %d %p %r %a >' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000100-DB-000201","gid":"V-72987","rid":"SV-87639r2_rule","stig_id":"PGS9-00-007800","fix_id":"F-79433r2_fix","cci":["CCI-001487"],"nist":["AU-3","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72987\" do\r\n  title \"PostgreSQL must produce audit records containing sufficient\r\n  information to establish the identity of any user/subject or process associated\r\n  with the event.\"\r\n  desc  \"Information system auditing capability is critical for accurate\r\n  forensic analysis. Without information that establishes the identity of the\r\n  subjects (i.e., users or processes acting on behalf of users) associated with\r\n  the events, security personnel cannot determine responsibility for the\r\n  potentially harmful event.\r\n\r\n  Identifiers (if authenticated or otherwise known) include, but are not\r\n  limited to, user database tables, primary key values, user names, or process\r\n  identifiers.\r\n\r\n  1) Linux's sudo and su feature enables a user (with sufficient OS\r\n  privileges) to emulate another user, and it is the identity of the emulated\r\n  user that is seen by PostgreSQL and logged in the audit trail. Therefore, care\r\n  must be taken (outside of Postgresql) to restrict sudo/su to the minimum set of\r\n  users necessary.\r\n\r\n  2) PostgreSQL's SET ROLE feature enables a user (with sufficient PostgreSQL\r\n  privileges) to emulate another user running statements under the permission set\r\n  of the emulated user. In this case, it is the emulating user's identity, and\r\n  not that of the emulated user, that gets logged in the audit trail. While this\r\n  is definitely better than the other way around, ideally, both identities would\r\n  be recorded.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000100-DB-000201\"\r\n  tag \"gid\": \"V-72987\"\r\n  tag \"rid\": \"SV-87639r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-007800\"\r\n  tag \"fix_id\": \"F-79433r2_fix\"\r\n  tag \"cci\": [\"CCI-001487\"]\r\n  tag \"nist\": [\"AU-3\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Check PostgreSQL settings and existing audit records to verify a\r\n  user name associated with the event is being captured and stored with the audit\r\n  records. If audit records exist without specific user information, this is a\r\n  finding.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  current setting of log_line_prefix by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_line_prefix\\\"\r\n\r\n  If log_line_prefix does not contain %m, %u, %d, %p, %r, %a, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Logging must be enabled in order to capture the identity of any user/subject or\r\n  process associated with an event. To ensure that logging is enabled, review\r\n  supplementary content APPENDIX-C for instructions on enabling logging. \r\n\r\n  To enable username, database name, process ID, remote host/port and application\r\n  name in logging, as the database administrator (shown here as \\\"postgres\\\"),\r\n  edit the following in postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  log_line_prefix = '< %m %u %d %p %r %a >' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  log_line_prefix_escapes = %w(%m %u %d %p %r %a)\r\n\r\n  log_line_prefix_escapes.each do |escape|\r\n    describe sql.query('SHOW log_line_prefix;', [pg_db]) do\r\n      its('output') { should include escape }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72987.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%m\"","run_time":0.000194691,"start_time":"2020-06-19T18:47:41+00:00","message":"expected \"%a %u %d %p %r %s %c\" to include \"%m\""},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%u\"","run_time":0.000116676,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%d\"","run_time":0.000109885,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%p\"","run_time":0.000105406,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%r\"","run_time":0.000101785,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%a\"","run_time":0.000168621,"start_time":"2020-06-19T18:47:41+00:00"}]},{"id":"V-72989","title":"PostgreSQL must implement NIST FIPS 140-2 validated cryptographic\n  modules to generate and validate cryptographic hashes.","desc":"Use of weak or untested encryption algorithms undermines the purposes\n  of utilizing encryption to protect data. The application must implement\n  cryptographic modules adhering to the higher standards approved by the federal\n  government since this provides assurance they have been tested and validated.\n\n      For detailed information, refer to NIST FIPS Publication 140-2, Security\n  Requirements For Cryptographic Modules. Note that the product's cryptographic\n  modules must be validated and certified by NIST as FIPS-compliant.","descriptions":[{"label":"default","data":"Use of weak or untested encryption algorithms undermines the purposes\n  of utilizing encryption to protect data. The application must implement\n  cryptographic modules adhering to the higher standards approved by the federal\n  government since this provides assurance they have been tested and validated.\n\n      For detailed information, refer to NIST FIPS Publication 140-2, Security\n  Requirements For Cryptographic Modules. Note that the product's cryptographic\n  modules must be validated and certified by NIST as FIPS-compliant."},{"label":"check","data":"First, as the system administrator, run the following to see if\n  FIPS is enabled:\n\n  $ cat /proc/sys/crypto/fips_enabled\n\n  If fips_enabled is not 1, this is a finding."},{"label":"fix","data":"Configure OpenSSL to be FIPS compliant.\n\n  PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be\n  FIPS 140-2 compliant, see the official RHEL Documentation:\n  https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Processing_Standard.html\n\n  For more information on configuring PostgreSQL to use SSL, see supplementary\n  content APPENDIX-G."}],"impact":0.7,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000514-DB-000381","gid":"V-72989","rid":"SV-87641r1_rule","stig_id":"PGS9-00-008000","fix_id":"F-79435r1_fix","cci":["CCI-002450"],"nist":["SC-13","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72989\" do\r\n  title \"PostgreSQL must implement NIST FIPS 140-2 validated cryptographic\r\n  modules to generate and validate cryptographic hashes.\"\r\n  desc  \"Use of weak or untested encryption algorithms undermines the purposes\r\n  of utilizing encryption to protect data. The application must implement\r\n  cryptographic modules adhering to the higher standards approved by the federal\r\n  government since this provides assurance they have been tested and validated.\r\n\r\n      For detailed information, refer to NIST FIPS Publication 140-2, Security\r\n  Requirements For Cryptographic Modules. Note that the product's cryptographic\r\n  modules must be validated and certified by NIST as FIPS-compliant.\"\r\n\r\n  impact 0.7\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000514-DB-000381\"\r\n  tag \"gid\": \"V-72989\"\r\n  tag \"rid\": \"SV-87641r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-008000\"\r\n  tag \"fix_id\": \"F-79435r1_fix\"\r\n  tag \"cci\": [\"CCI-002450\"]\r\n  tag \"nist\": [\"SC-13\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the system administrator, run the following to see if\r\n  FIPS is enabled:\r\n\r\n  $ cat /proc/sys/crypto/fips_enabled\r\n\r\n  If fips_enabled is not 1, this is a finding.\"\r\n\r\n  desc \"fix\", \"Configure OpenSSL to be FIPS compliant.\r\n\r\n  PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be\r\n  FIPS 140-2 compliant, see the official RHEL Documentation:\r\n  https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Processing_Standard.html\r\n\r\n  For more information on configuring PostgreSQL to use SSL, see supplementary\r\n  content APPENDIX-G.\"\r\n\r\n  describe kernel_parameter('crypto.fips_enabled') do\r\n    its('value') { should cmp 1 }\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72989.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Kernel Parameter crypto.fips_enabled value is expected to cmp == 1","run_time":0.39896103,"start_time":"2020-06-19T18:47:41+00:00"}]},{"id":"V-72991","title":"PostgreSQL must use NSA-approved cryptography to protect classified\n  information in accordance with the data owners requirements.","desc":"Use of weak or untested encryption algorithms undermines the purposes\n  of utilizing encryption to protect data. The application must implement\n  cryptographic modules adhering to the higher standards approved by the federal\n  government since this provides assurance they have been tested and validated.\n\n  It is the responsibility of the data owner to assess the cryptography\n  requirements in light of applicable federal laws, Executive Orders, directives,\n  policies, regulations, and standards.\n\n  NSA-approved cryptography for classified networks is hardware based. This\n  requirement addresses the compatibility of PostgreSQL with the encryption\n  devices.","descriptions":[{"label":"default","data":"Use of weak or untested encryption algorithms undermines the purposes\n  of utilizing encryption to protect data. The application must implement\n  cryptographic modules adhering to the higher standards approved by the federal\n  government since this provides assurance they have been tested and validated.\n\n  It is the responsibility of the data owner to assess the cryptography\n  requirements in light of applicable federal laws, Executive Orders, directives,\n  policies, regulations, and standards.\n\n  NSA-approved cryptography for classified networks is hardware based. This\n  requirement addresses the compatibility of PostgreSQL with the encryption\n  devices."},{"label":"check","data":"If PostgreSQL is deployed in an unclassified environment, this is\n  not applicable (NA).\n\n  If PostgreSQL is not using NSA-approved cryptography to protect classified\n  information in accordance with applicable federal laws, Executive Orders,\n  directives, policies, regulations, and standards, this is a finding.\n\n  To check if PostgreSQL is configured to use SSL, as the database administrator\n  (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl\"\n\n  If SSL is off, this is a finding.\n\n  Consult network administration staff to determine whether the server is\n  protected by NSA-approved encrypting devices. If not, this a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To configure PostgreSQL to use SSL, as a database administrator (shown here as\n  \"postgres\"), edit postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameter: \n\n  ssl = on \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload \n\n  For more information on configuring PostgreSQL to use SSL, see supplementary\n  content APPENDIX-G. \n\n  Deploy NSA-approved encrypting devices to protect the server on the network."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000416-DB-000380","gid":"V-72991","rid":"SV-87643r2_rule","stig_id":"PGS9-00-008100","fix_id":"F-79437r2_fix","cci":["CCI-002450"],"nist":["SC-13","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72991\" do\r\n  title \"PostgreSQL must use NSA-approved cryptography to protect classified\r\n  information in accordance with the data owners requirements.\"\r\n  desc  \"Use of weak or untested encryption algorithms undermines the purposes\r\n  of utilizing encryption to protect data. The application must implement\r\n  cryptographic modules adhering to the higher standards approved by the federal\r\n  government since this provides assurance they have been tested and validated.\r\n\r\n  It is the responsibility of the data owner to assess the cryptography\r\n  requirements in light of applicable federal laws, Executive Orders, directives,\r\n  policies, regulations, and standards.\r\n\r\n  NSA-approved cryptography for classified networks is hardware based. This\r\n  requirement addresses the compatibility of PostgreSQL with the encryption\r\n  devices.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000416-DB-000380\"\r\n  tag \"gid\": \"V-72991\"\r\n  tag \"rid\": \"SV-87643r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-008100\"\r\n  tag \"fix_id\": \"F-79437r2_fix\"\r\n  tag \"cci\": [\"CCI-002450\"]\r\n  tag \"nist\": [\"SC-13\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"If PostgreSQL is deployed in an unclassified environment, this is\r\n  not applicable (NA).\r\n\r\n  If PostgreSQL is not using NSA-approved cryptography to protect classified\r\n  information in accordance with applicable federal laws, Executive Orders,\r\n  directives, policies, regulations, and standards, this is a finding.\r\n\r\n  To check if PostgreSQL is configured to use SSL, as the database administrator\r\n  (shown here as \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW ssl\\\"\r\n\r\n  If SSL is off, this is a finding.\r\n\r\n  Consult network administration staff to determine whether the server is\r\n  protected by NSA-approved encrypting devices. If not, this a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To configure PostgreSQL to use SSL, as a database administrator (shown here as\r\n  \\\"postgres\\\"), edit postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameter: \r\n\r\n  ssl = on \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload \r\n\r\n  For more information on configuring PostgreSQL to use SSL, see supplementary\r\n  content APPENDIX-G. \r\n\r\n  Deploy NSA-approved encrypting devices to protect the server on the network.\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW ssl;', [pg_db]) do\r\n    its('output') { should match /on|true/i }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72991.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW ssl; output is expected to match /on|true/i","run_time":0.000501366,"start_time":"2020-06-19T18:47:41+00:00","message":"expected \"off\" to match /on|true/i\nDiff:\n@@ -1,2 +1,2 @@\n-/on|true/i\n+\"off\"\n"}]},{"id":"V-72993","title":"PostgreSQL must implement NIST FIPS 140-2 validated cryptographic\n  modules to protect unclassified information requiring confidentiality and\n  cryptographic protection, in accordance with the data owners requirements.","desc":"Use of weak or untested encryption algorithms undermines the purposes\n  of utilizing encryption to protect data. The application must implement\n  cryptographic modules adhering to the higher standards approved by the federal\n  government since this provides assurance they have been tested and validated.\n\n  It is the responsibility of the data owner to assess the cryptography\n  requirements in light of applicable federal laws, Executive Orders, directives,\n  policies, regulations, and standards.\n\n  For detailed information, refer to NIST FIPS Publication 140-2, Security\n  Requirements For Cryptographic Modules. Note that the product's cryptographic\n  modules must be validated and certified by NIST as FIPS-compliant.","descriptions":[{"label":"default","data":"Use of weak or untested encryption algorithms undermines the purposes\n  of utilizing encryption to protect data. The application must implement\n  cryptographic modules adhering to the higher standards approved by the federal\n  government since this provides assurance they have been tested and validated.\n\n  It is the responsibility of the data owner to assess the cryptography\n  requirements in light of applicable federal laws, Executive Orders, directives,\n  policies, regulations, and standards.\n\n  For detailed information, refer to NIST FIPS Publication 140-2, Security\n  Requirements For Cryptographic Modules. Note that the product's cryptographic\n  modules must be validated and certified by NIST as FIPS-compliant."},{"label":"check","data":"First, as the system administrator, run the following to see if\n  FIPS is enabled:\n\n  $ cat /proc/sys/crypto/fips_enabled\n\n  If fips_enabled is not 1, this is a finding."},{"label":"fix","data":"Configure OpenSSL to be FIPS compliant.\n\n  PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be\n  FIPS 140-2 compliant, see the official RHEL Documentation:\n  https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Processing_Standard.html\n\n  For more information on configuring PostgreSQL to use SSL, see supplementary\n  content APPENDIX-G."}],"impact":0.7,"refs":[],"tags":{"severity":"high","gtitle":"SRG-APP-000514-DB-000383","gid":"V-72993","rid":"SV-87645r1_rule","stig_id":"PGS9-00-008200","fix_id":"F-79439r1_fix","cci":["CCI-002450"],"nist":["SC-13","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72993\" do\r\n  title \"PostgreSQL must implement NIST FIPS 140-2 validated cryptographic\r\n  modules to protect unclassified information requiring confidentiality and\r\n  cryptographic protection, in accordance with the data owners requirements.\"\r\n  desc  \"Use of weak or untested encryption algorithms undermines the purposes\r\n  of utilizing encryption to protect data. The application must implement\r\n  cryptographic modules adhering to the higher standards approved by the federal\r\n  government since this provides assurance they have been tested and validated.\r\n\r\n  It is the responsibility of the data owner to assess the cryptography\r\n  requirements in light of applicable federal laws, Executive Orders, directives,\r\n  policies, regulations, and standards.\r\n\r\n  For detailed information, refer to NIST FIPS Publication 140-2, Security\r\n  Requirements For Cryptographic Modules. Note that the product's cryptographic\r\n  modules must be validated and certified by NIST as FIPS-compliant.\"\r\n\r\n  impact 0.7\r\n  tag \"severity\": \"high\"\r\n  tag \"gtitle\": \"SRG-APP-000514-DB-000383\"\r\n  tag \"gid\": \"V-72993\"\r\n  tag \"rid\": \"SV-87645r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-008200\"\r\n  tag \"fix_id\": \"F-79439r1_fix\"\r\n  tag \"cci\": [\"CCI-002450\"]\r\n  tag \"nist\": [\"SC-13\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the system administrator, run the following to see if\r\n  FIPS is enabled:\r\n\r\n  $ cat /proc/sys/crypto/fips_enabled\r\n\r\n  If fips_enabled is not 1, this is a finding.\"\r\n\r\n  desc \"fix\", \"Configure OpenSSL to be FIPS compliant.\r\n\r\n  PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be\r\n  FIPS 140-2 compliant, see the official RHEL Documentation:\r\n  https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Processing_Standard.html\r\n\r\n  For more information on configuring PostgreSQL to use SSL, see supplementary\r\n  content APPENDIX-G.\"\r\n\r\n\r\n  describe kernel_parameter('crypto.fips_enabled') do\r\n    its('value') { should cmp 1 }\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-72993.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Kernel Parameter crypto.fips_enabled value is expected to cmp == 1","run_time":0.000426572,"start_time":"2020-06-19T18:47:41+00:00"}]},{"id":"V-72995","title":"PostgreSQL must protect the confidentiality and integrity of all\n  information at rest.","desc":"This control is intended to address the confidentiality and integrity\n  of information at rest in non-mobile devices and covers user information and\n  system information. Information at rest refers to the state of information when\n  it is located on a secondary storage device (e.g., disk drive, tape drive)\n  within an organizational information system. Applications and application users\n  generate information throughout the course of their application use.\n\n  User data generated, as well as application-specific configuration data,\n  needs to be protected. Organizations may choose to employ different mechanisms\n  to achieve confidentiality and integrity protections, as appropriate.\n\n  If the confidentiality and integrity of application data is not protected,\n  the data will be open to compromise and unauthorized modification.","descriptions":[{"label":"default","data":"This control is intended to address the confidentiality and integrity\n  of information at rest in non-mobile devices and covers user information and\n  system information. Information at rest refers to the state of information when\n  it is located on a secondary storage device (e.g., disk drive, tape drive)\n  within an organizational information system. Applications and application users\n  generate information throughout the course of their application use.\n\n  User data generated, as well as application-specific configuration data,\n  needs to be protected. Organizations may choose to employ different mechanisms\n  to achieve confidentiality and integrity protections, as appropriate.\n\n  If the confidentiality and integrity of application data is not protected,\n  the data will be open to compromise and unauthorized modification."},{"label":"check","data":"If the application owner and Authorizing Official have determined\n  that encryption of data at rest is NOT required, this is not a finding.\n\n  One possible way to encrypt data within PostgreSQL is to use the pgcrypto\n  extension.\n\n  To check if pgcrypto is installed on PostgreSQL, as a database administrator\n  (shown here as \"postgres\"), run the following command:\n\n  $ sudo su - postgres\n  $ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\n  If data in the database requires encryption and pgcrypto is not available, this\n  is a finding.\n\n  If disk or filesystem requires encryption, ask the system owner, DBA, and SA to\n  demonstrate the use of disk-level encryption. If this is required and is not\n  found, this is a finding.\n\n  If controls do not exist or are not enabled, this is a finding."},{"label":"fix","data":"Apply appropriate controls to protect the confidentiality and\n  integrity of data at rest in the database.\n\n  The pgcrypto module provides cryptographic functions for PostgreSQL. See\n  supplementary content APPENDIX-E for documentation on installing pgcrypto.\n\n  With pgcrypto installed, it is possible to insert encrypted data into the\n  database:\n\n  INSERT INTO accounts(username, password) VALUES ('bob',\n  crypt('a_secure_password', gen_salt('xdes')));"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000231-DB-000154","gid":"V-72995","rid":"SV-87647r2_rule","stig_id":"PGS9-00-008300","fix_id":"F-79441r1_fix","cci":["CCI-001199"],"nist":["SC-28","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72995\" do\r\n  title \"PostgreSQL must protect the confidentiality and integrity of all\r\n  information at rest.\"\r\n  desc  \"This control is intended to address the confidentiality and integrity\r\n  of information at rest in non-mobile devices and covers user information and\r\n  system information. Information at rest refers to the state of information when\r\n  it is located on a secondary storage device (e.g., disk drive, tape drive)\r\n  within an organizational information system. Applications and application users\r\n  generate information throughout the course of their application use.\r\n\r\n  User data generated, as well as application-specific configuration data,\r\n  needs to be protected. Organizations may choose to employ different mechanisms\r\n  to achieve confidentiality and integrity protections, as appropriate.\r\n\r\n  If the confidentiality and integrity of application data is not protected,\r\n  the data will be open to compromise and unauthorized modification.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000231-DB-000154\"\r\n  tag \"gid\": \"V-72995\"\r\n  tag \"rid\": \"SV-87647r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-008300\"\r\n  tag \"fix_id\": \"F-79441r1_fix\"\r\n  tag \"cci\": [\"CCI-001199\"]\r\n  tag \"nist\": [\"SC-28\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"If the application owner and Authorizing Official have determined\r\n  that encryption of data at rest is NOT required, this is not a finding.\r\n\r\n  One possible way to encrypt data within PostgreSQL is to use the pgcrypto\r\n  extension.\r\n\r\n  To check if pgcrypto is installed on PostgreSQL, as a database administrator\r\n  (shown here as \\\"postgres\\\"), run the following command:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SELECT * FROM pg_available_extensions where name='pgcrypto'\\\"\r\n\r\n  If data in the database requires encryption and pgcrypto is not available, this\r\n  is a finding.\r\n\r\n  If disk or filesystem requires encryption, ask the system owner, DBA, and SA to\r\n  demonstrate the use of disk-level encryption. If this is required and is not\r\n  found, this is a finding.\r\n\r\n  If controls do not exist or are not enabled, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Apply appropriate controls to protect the confidentiality and\r\n  integrity of data at rest in the database.\r\n\r\n  The pgcrypto module provides cryptographic functions for PostgreSQL. See\r\n  supplementary content APPENDIX-E for documentation on installing pgcrypto.\r\n\r\n  With pgcrypto installed, it is possible to insert encrypted data into the\r\n  database:\r\n\r\n  INSERT INTO accounts(username, password) VALUES ('bob',\r\n  crypt('a_secure_password', gen_salt('xdes')));\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  pgcrypto_sql = \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\r\n\r\n  describe sql.query(pgcrypto_sql, [pg_db]) do\r\n    its('output') { should_not eq '' }\r\n  end\r\nend\r\n","source_location":{"line":9,"ref":"controls/V-72995.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SELECT * FROM pg_available_extensions where name='pgcrypto' output is expected not to eq \"\"","run_time":0.000110121,"start_time":"2020-06-19T18:47:41+00:00"}]},{"id":"V-73013","title":"PostgreSQL must associate organization-defined types of security\n  labels having organization-defined security label values with information in\n  process.","desc":"Without the association of security labels to information, there is no\n  basis for PostgreSQL to make security-related access-control decisions.\n\n  Security labels are abstractions representing the basic properties or\n  characteristics of an entity (e.g., subjects and objects) with respect to\n  safeguarding information.\n\n  These labels are typically associated with internal data structures (e.g.,\n  tables, rows) within the database and are used to enable the implementation of\n  access control and flow control policies, reflect special dissemination,\n  handling or distribution instructions, or support other aspects of the\n  information security policy.\n\n  One example includes marking data as classified or FOUO. These security\n  labels may be assigned manually or during data processing, but, either way, it\n  is imperative these assignments are maintained while the data is in storage. If\n  the security labels are lost when the data is stored, there is the risk of a\n  data compromise.\n\n  The mechanism used to support security labeling may be the sepgsql feature\n  of PostgreSQL, a third-party product, or custom application code.","descriptions":[{"label":"default","data":"Without the association of security labels to information, there is no\n  basis for PostgreSQL to make security-related access-control decisions.\n\n  Security labels are abstractions representing the basic properties or\n  characteristics of an entity (e.g., subjects and objects) with respect to\n  safeguarding information.\n\n  These labels are typically associated with internal data structures (e.g.,\n  tables, rows) within the database and are used to enable the implementation of\n  access control and flow control policies, reflect special dissemination,\n  handling or distribution instructions, or support other aspects of the\n  information security policy.\n\n  One example includes marking data as classified or FOUO. These security\n  labels may be assigned manually or during data processing, but, either way, it\n  is imperative these assignments are maintained while the data is in storage. If\n  the security labels are lost when the data is stored, there is the risk of a\n  data compromise.\n\n  The mechanism used to support security labeling may be the sepgsql feature\n  of PostgreSQL, a third-party product, or custom application code."},{"label":"check","data":"If security labeling is not required, this is not a finding.\n\n  First, as the database administrator (shown here as \"postgres\"), run the\n  following SQL against each table that requires security labels:\n\n  $ sudo su - postgres\n  $ psql -c \"\\d+ <schema_name>.<table_name>\"\n\n  If security labeling requirements have been specified, but the security\n  labeling is not implemented or does not reliably maintain labels on information\n  in process, this is a finding."},{"label":"fix","data":"In addition to the SQL-standard privilege system available through\n  GRANT, tables can have row security policies that restrict, on a per-user\n  basis, which rows can be returned by normal queries or inserted, updated, or\n  deleted by data modification commands. This feature is also known as Row-Level\n  Security (RLS).\n\n  RLS policies can be very different depending on their use case. For one example\n  of using RLS for Security Labels, see supplementary content APPENDIX-D."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000313-DB-000309","gid":"V-73013","rid":"SV-87665r1_rule","stig_id":"PGS9-00-009400","fix_id":"F-79459r1_fix","cci":["CCI-002263"],"nist":["AC-16 a","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73013\" do\n  title \"PostgreSQL must associate organization-defined types of security\n  labels having organization-defined security label values with information in\n  process.\"\n  desc  \"Without the association of security labels to information, there is no\n  basis for PostgreSQL to make security-related access-control decisions.\n\n  Security labels are abstractions representing the basic properties or\n  characteristics of an entity (e.g., subjects and objects) with respect to\n  safeguarding information.\n\n  These labels are typically associated with internal data structures (e.g.,\n  tables, rows) within the database and are used to enable the implementation of\n  access control and flow control policies, reflect special dissemination,\n  handling or distribution instructions, or support other aspects of the\n  information security policy.\n\n  One example includes marking data as classified or FOUO. These security\n  labels may be assigned manually or during data processing, but, either way, it\n  is imperative these assignments are maintained while the data is in storage. If\n  the security labels are lost when the data is stored, there is the risk of a\n  data compromise.\n\n  The mechanism used to support security labeling may be the sepgsql feature\n  of PostgreSQL, a third-party product, or custom application code.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000313-DB-000309\"\n  tag \"gid\": \"V-73013\"\n  tag \"rid\": \"SV-87665r1_rule\"\n  tag \"stig_id\": \"PGS9-00-009400\"\n  tag \"fix_id\": \"F-79459r1_fix\"\n  tag \"cci\": [\"CCI-002263\"]\n  tag \"nist\": [\"AC-16 a\", \"Rev_4\"]\n  tag \"false_negatives\": nil\n  tag \"false_positives\": nil\n  tag \"documentable\": false\n  tag \"mitigations\": nil\n  tag \"severity_override_guidance\": false\n  tag \"potential_impacts\": nil\n  tag \"third_party_tools\": nil\n  tag \"mitigation_controls\": nil\n  tag \"responsibility\": nil\n  tag \"ia_controls\": nil\n  desc \"check\", \"If security labeling is not required, this is not a finding.\n\n  First, as the database administrator (shown here as \\\"postgres\\\"), run the\n  following SQL against each table that requires security labels:\n\n  $ sudo su - postgres\n  $ psql -c \\\"\\\\d+ <schema_name>.<table_name>\\\"\n\n  If security labeling requirements have been specified, but the security\n  labeling is not implemented or does not reliably maintain labels on information\n  in process, this is a finding.\"\n\n  desc \"fix\", \"In addition to the SQL-standard privilege system available through\n  GRANT, tables can have row security policies that restrict, on a per-user\n  basis, which rows can be returned by normal queries or inserted, updated, or\n  deleted by data modification commands. This feature is also known as Row-Level\n  Security (RLS).\n\n  RLS policies can be very different depending on their use case. For one example\n  of using RLS for Security Labels, see supplementary content APPENDIX-D.\"\n\n  describe \"Check security labeling requirements\" do\n    skip \"If security labeling is not implemented or does not reliably maintain labels on information in process, this is a finding.\"\n  end\nend\n","source_location":{"line":1,"ref":"controls/V-73013.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Check security labeling requirements","run_time":5.718e-06,"start_time":"2020-06-19T18:47:41+00:00","resource":"","skip_message":"If security labeling is not implemented or does not reliably maintain labels on information in process, this is a finding."}]},{"id":"V-72999","title":"PostgreSQL must separate user functionality (including user interface\n  services) from database management functionality.","desc":"Information system management functionality includes functions\n  necessary to administer databases, network components, workstations, or servers\n  and typically requires privileged user access.\n\n  The separation of user functionality from information system management\n  functionality is either physical or logical and is accomplished by using\n  different computers, different central processing units, different instances of\n  the operating system, different network addresses, combinations of these\n  methods, or other methods, as appropriate.\n\n  An example of this type of separation is observed in web administrative\n  interfaces that use separate authentication methods for users of any other\n  information system resources.\n\n  This may include isolating the administrative interface on a different\n  domain and with additional access controls.\n\n  If administrative functionality or information regarding PostgreSQL\n  management is presented on an interface available for users, information on\n  DBMS settings may be inadvertently made available to the user.","descriptions":[{"label":"default","data":"Information system management functionality includes functions\n  necessary to administer databases, network components, workstations, or servers\n  and typically requires privileged user access.\n\n  The separation of user functionality from information system management\n  functionality is either physical or logical and is accomplished by using\n  different computers, different central processing units, different instances of\n  the operating system, different network addresses, combinations of these\n  methods, or other methods, as appropriate.\n\n  An example of this type of separation is observed in web administrative\n  interfaces that use separate authentication methods for users of any other\n  information system resources.\n\n  This may include isolating the administrative interface on a different\n  domain and with additional access controls.\n\n  If administrative functionality or information regarding PostgreSQL\n  management is presented on an interface available for users, information on\n  DBMS settings may be inadvertently made available to the user."},{"label":"check","data":"Check PostgreSQL settings and vendor documentation to verify that\n  administrative functionality is separate from user functionality.\n\n  As the database administrator (shown here as \"postgres\"), list all roles and\n  permissions for the database:\n  \n  $ sudo su - postgres\n  $ psql -c \"\\du\"\n  \n  If any non-administrative role has the attribute \"Superuser\", \"Create\n  role\", \"Create DB\" or \"Bypass RLS\", this is a finding.\n  \n  If administrator and general user functionality are not separated either\n  physically or logically, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to separate database administration and\n  general user functionality.\n  \n  Do not grant superuser, create role, create db or bypass rls role attributes to\n  users that do not require it.\n  \n  To remove privileges, see the following example:\n  \n  ALTER ROLE <username> NOSUPERUSER NOCREATEDB NOCREATEROLE NOBYPASSRLS;"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000211-DB-000122","gid":"V-72999","rid":"SV-87651r1_rule","stig_id":"PGS9-00-008500","fix_id":"F-79445r1_fix","cci":["CCI-001082"],"nist":["SC-2","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72999\" do\r\n  title \"PostgreSQL must separate user functionality (including user interface\r\n  services) from database management functionality.\"\r\n  desc  \"Information system management functionality includes functions\r\n  necessary to administer databases, network components, workstations, or servers\r\n  and typically requires privileged user access.\r\n\r\n  The separation of user functionality from information system management\r\n  functionality is either physical or logical and is accomplished by using\r\n  different computers, different central processing units, different instances of\r\n  the operating system, different network addresses, combinations of these\r\n  methods, or other methods, as appropriate.\r\n\r\n  An example of this type of separation is observed in web administrative\r\n  interfaces that use separate authentication methods for users of any other\r\n  information system resources.\r\n\r\n  This may include isolating the administrative interface on a different\r\n  domain and with additional access controls.\r\n\r\n  If administrative functionality or information regarding PostgreSQL\r\n  management is presented on an interface available for users, information on\r\n  DBMS settings may be inadvertently made available to the user.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000211-DB-000122\"\r\n  tag \"gid\": \"V-72999\"\r\n  tag \"rid\": \"SV-87651r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-008500\"\r\n  tag \"fix_id\": \"F-79445r1_fix\"\r\n  tag \"cci\": [\"CCI-001082\"]\r\n  tag \"nist\": [\"SC-2\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Check PostgreSQL settings and vendor documentation to verify that\r\n  administrative functionality is separate from user functionality.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), list all roles and\r\n  permissions for the database:\r\n  \r\n  $ sudo su - postgres\r\n  $ psql -c \\\"\\\\du\\\"\r\n  \r\n  If any non-administrative role has the attribute \\\"Superuser\\\", \\\"Create\r\n  role\\\", \\\"Create DB\\\" or \\\"Bypass RLS\\\", this is a finding.\r\n  \r\n  If administrator and general user functionality are not separated either\r\n  physically or logically, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Configure PostgreSQL to separate database administration and\r\n  general user functionality.\r\n  \r\n  Do not grant superuser, create role, create db or bypass rls role attributes to\r\n  users that do not require it.\r\n  \r\n  To remove privileges, see the following example:\r\n  \r\n  ALTER ROLE <username> NOSUPERUSER NOCREATEDB NOCREATEROLE NOBYPASSRLS;\"\r\n    \r\n  privileges = %w(rolcreatedb rolcreaterole rolsuper)\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r;'\r\n  roles_query = sql.query(roles_sql, [pg_db])\r\n  roles = roles_query.lines\r\n\r\n  roles.each do |role|\r\n    unless pg_superusers.include?(role)\r\n      privileges.each do |privilege|\r\n        privilege_sql = \"SELECT r.#{privilege} FROM pg_catalog.pg_roles r \"\\\r\n          \"WHERE r.rolname = '#{role}';\"\r\n\r\n        describe sql.query(privilege_sql, [pg_db]) do\r\n          its('output') { should_not eq 't' }\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":13,"ref":"controls/V-72999.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolcreatedb FROM pg_catalog.pg_roles r WHERE r.rolname = 'pg_signal_backend'; output is expected not to eq \"t\"","run_time":9.7339e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolcreaterole FROM pg_catalog.pg_roles r WHERE r.rolname = 'pg_signal_backend'; output is expected not to eq \"t\"","run_time":0.000102133,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'pg_signal_backend'; output is expected not to eq \"t\"","run_time":9.2291e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolcreatedb FROM pg_catalog.pg_roles r WHERE r.rolname = 'bob'; output is expected not to eq \"t\"","run_time":9.089e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolcreaterole FROM pg_catalog.pg_roles r WHERE r.rolname = 'bob'; output is expected not to eq \"t\"","run_time":0.000100017,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'bob'; output is expected not to eq \"t\"","run_time":9.51e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolcreatedb FROM pg_catalog.pg_roles r WHERE r.rolname = 'fooaudit'; output is expected not to eq \"t\"","run_time":8.7934e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolcreaterole FROM pg_catalog.pg_roles r WHERE r.rolname = 'fooaudit'; output is expected not to eq \"t\"","run_time":8.7882e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'fooaudit'; output is expected not to eq \"t\"","run_time":8.478e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolcreatedb FROM pg_catalog.pg_roles r WHERE r.rolname = 'test'; output is expected not to eq \"t\"","run_time":8.6775e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolcreaterole FROM pg_catalog.pg_roles r WHERE r.rolname = 'test'; output is expected not to eq \"t\"","run_time":8.9953e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'test'; output is expected not to eq \"t\"","run_time":8.5767e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolcreatedb FROM pg_catalog.pg_roles r WHERE r.rolname = 'user'; output is expected not to eq \"t\"","run_time":8.5854e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolcreaterole FROM pg_catalog.pg_roles r WHERE r.rolname = 'user'; output is expected not to eq \"t\"","run_time":8.5107e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'user'; output is expected not to eq \"t\"","run_time":0.000101831,"start_time":"2020-06-19T18:47:41+00:00"}]},{"id":"V-73001","title":"PostgreSQL must initiate session auditing upon startup.","desc":"Session auditing is for use when a user's activities are under\n  investigation. To be sure of capturing all activity during those periods when\n  session auditing is in use, it needs to be in operation for the whole time\n  PostgreSQL is running.","descriptions":[{"label":"default","data":"Session auditing is for use when a user's activities are under\n  investigation. To be sure of capturing all activity during those periods when\n  session auditing is in use, it needs to be in operation for the whole time\n  PostgreSQL is running."},{"label":"check","data":"As the database administrator (shown here as \"postgres\"), check\n  the current settings by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If pgaudit is not in the current setting, this is a finding.\n\n  As the database administrator (shown here as \"postgres\"), check the current\n  settings by running the following SQL:\n\n  $ psql -c \"SHOW log_destination\"\n\n  If stderr or syslog are not in the current setting, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to enable auditing.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  \n  For session logging we suggest using pgaudit. For instructions on how to setup\n  pgaudit, see supplementary content APPENDIX-B."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000092-DB-000208","gid":"V-73001","rid":"SV-87653r2_rule","stig_id":"PGS9-00-008600","fix_id":"F-79447r1_fix","cci":["CCI-001464"],"nist":["AU-14 (1)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73001\" do\r\n  title \"PostgreSQL must initiate session auditing upon startup.\"\r\n  desc  \"Session auditing is for use when a user's activities are under\r\n  investigation. To be sure of capturing all activity during those periods when\r\n  session auditing is in use, it needs to be in operation for the whole time\r\n  PostgreSQL is running.\"\r\n  \r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000092-DB-000208\"\r\n  tag \"gid\": \"V-73001\"\r\n  tag \"rid\": \"SV-87653r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-008600\"\r\n  tag \"fix_id\": \"F-79447r1_fix\"\r\n  tag \"cci\": [\"CCI-001464\"]\r\n  tag \"nist\": [\"AU-14 (1)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator (shown here as \\\"postgres\\\"), check\r\n  the current settings by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If pgaudit is not in the current setting, this is a finding.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), check the current\r\n  settings by running the following SQL:\r\n\r\n  $ psql -c \\\"SHOW log_destination\\\"\r\n\r\n  If stderr or syslog are not in the current setting, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Configure PostgreSQL to enable auditing.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging.\r\n  \r\n  For session logging we suggest using pgaudit. For instructions on how to setup\r\n  pgaudit, see supplementary content APPENDIX-B.\"\r\n  \r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  describe sql.query('SHOW log_destination;', [pg_db]) do\r\n    its('output') { should match /stderr|syslog/i }\r\n  end\r\nend\r\n","source_location":{"line":10,"ref":"controls/V-73001.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000200206,"start_time":"2020-06-19T18:47:41+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_destination; output is expected to match /stderr|syslog/i","run_time":9.775e-05,"start_time":"2020-06-19T18:47:41+00:00"}]},{"id":"V-73003","title":"PostgreSQL must implement cryptographic mechanisms to prevent\n  unauthorized modification of organization-defined information at rest (to\n  include, at a minimum, PII and classified information) on organization-defined\n  information system components.","desc":"PostgreSQLs handling data requiring \"data at rest\" protections must\n  employ cryptographic mechanisms to prevent unauthorized disclosure and\n  modification of the information at rest. These cryptographic mechanisms may be\n  native to PostgreSQL or implemented via additional software or operating\n  system/file system settings, as appropriate to the situation.\n\n  Selection of a cryptographic mechanism is based on the need to protect the\n  integrity of organizational information. The strength of the mechanism is\n  commensurate with the security category and/or classification of the\n  information. Organizations have the flexibility to either encrypt all\n  information on storage devices (i.e., full disk encryption) or encrypt specific\n  data structures (e.g., files, records, or fields).\n\n  The decision whether and what to encrypt rests with the data owner and is\n  also influenced by the physical measures taken to secure the equipment and\n  media on which the information resides.","descriptions":[{"label":"default","data":"PostgreSQLs handling data requiring \"data at rest\" protections must\n  employ cryptographic mechanisms to prevent unauthorized disclosure and\n  modification of the information at rest. These cryptographic mechanisms may be\n  native to PostgreSQL or implemented via additional software or operating\n  system/file system settings, as appropriate to the situation.\n\n  Selection of a cryptographic mechanism is based on the need to protect the\n  integrity of organizational information. The strength of the mechanism is\n  commensurate with the security category and/or classification of the\n  information. Organizations have the flexibility to either encrypt all\n  information on storage devices (i.e., full disk encryption) or encrypt specific\n  data structures (e.g., files, records, or fields).\n\n  The decision whether and what to encrypt rests with the data owner and is\n  also influenced by the physical measures taken to secure the equipment and\n  media on which the information resides."},{"label":"check","data":"Review the system documentation to determine whether the\n  organization has defined the information at rest that is to be protected from\n  modification, which must include, at a minimum, PII and classified information.\n  If no information is identified as requiring such protection, this is not a\n  finding.\n\n  Review the configuration of PostgreSQL, operating system/file system, and\n  additional software as relevant.\n\n  If any of the information defined as requiring cryptographic protection from\n  modification is not encrypted in a manner that provides the required level of\n  protection, this is a finding.\n\n  One possible way to encrypt data within PostgreSQL is to use pgcrypto extension.\n\n  To check if pgcrypto is installed on PostgreSQL, as a database administrator\n  (shown here as \"postgres\"), run the following command:\n\n  $ sudo su - postgres\n  $ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\n  If data in the database requires encryption and pgcrypto is not available, this\n  is a finding.\n\n  If disk or filesystem requires encryption, ask the system owner, DBA, and SA to\n  demonstrate filesystem or disk level encryption.\n\n  If this is required and is not found, this is a finding."},{"label":"fix","data":"Configure PostgreSQL, operating system/file system, and additional\n  software as relevant, to provide the required level of cryptographic protection.\n\n  The pgcrypto module provides cryptographic functions for PostgreSQL. See\n  supplementary content APPENDIX-E for documentation on installing pgcrypto.\n\n  With pgcrypto installed, it's possible to insert encrypted data into the\n  database:\n\n  INSERT INTO accounts(username, password) VALUES ('bob',\ncrypt('a_secure_password', gen_salt('md5')));"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000428-DB-000386","gid":"V-73003","rid":"SV-87655r1_rule","stig_id":"PGS9-00-008700","fix_id":"F-79449r1_fix","cci":["CCI-002475"],"nist":["SC-28 (1)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73003\" do\r\n  title \"PostgreSQL must implement cryptographic mechanisms to prevent\r\n  unauthorized modification of organization-defined information at rest (to\r\n  include, at a minimum, PII and classified information) on organization-defined\r\n  information system components.\"\r\n  desc  \"PostgreSQLs handling data requiring \\\"data at rest\\\" protections must\r\n  employ cryptographic mechanisms to prevent unauthorized disclosure and\r\n  modification of the information at rest. These cryptographic mechanisms may be\r\n  native to PostgreSQL or implemented via additional software or operating\r\n  system/file system settings, as appropriate to the situation.\r\n\r\n  Selection of a cryptographic mechanism is based on the need to protect the\r\n  integrity of organizational information. The strength of the mechanism is\r\n  commensurate with the security category and/or classification of the\r\n  information. Organizations have the flexibility to either encrypt all\r\n  information on storage devices (i.e., full disk encryption) or encrypt specific\r\n  data structures (e.g., files, records, or fields).\r\n\r\n  The decision whether and what to encrypt rests with the data owner and is\r\n  also influenced by the physical measures taken to secure the equipment and\r\n  media on which the information resides.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000428-DB-000386\"\r\n  tag \"gid\": \"V-73003\"\r\n  tag \"rid\": \"SV-87655r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-008700\"\r\n  tag \"fix_id\": \"F-79449r1_fix\"\r\n  tag \"cci\": [\"CCI-002475\"]\r\n  tag \"nist\": [\"SC-28 (1)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review the system documentation to determine whether the\r\n  organization has defined the information at rest that is to be protected from\r\n  modification, which must include, at a minimum, PII and classified information.\r\n  If no information is identified as requiring such protection, this is not a\r\n  finding.\r\n\r\n  Review the configuration of PostgreSQL, operating system/file system, and\r\n  additional software as relevant.\r\n\r\n  If any of the information defined as requiring cryptographic protection from\r\n  modification is not encrypted in a manner that provides the required level of\r\n  protection, this is a finding.\r\n\r\n  One possible way to encrypt data within PostgreSQL is to use pgcrypto extension.\r\n\r\n  To check if pgcrypto is installed on PostgreSQL, as a database administrator\r\n  (shown here as \\\"postgres\\\"), run the following command:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SELECT * FROM pg_available_extensions where name='pgcrypto'\\\"\r\n\r\n  If data in the database requires encryption and pgcrypto is not available, this\r\n  is a finding.\r\n\r\n  If disk or filesystem requires encryption, ask the system owner, DBA, and SA to\r\n  demonstrate filesystem or disk level encryption.\r\n\r\n  If this is required and is not found, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Configure PostgreSQL, operating system/file system, and additional\r\n  software as relevant, to provide the required level of cryptographic protection.\r\n\r\n  The pgcrypto module provides cryptographic functions for PostgreSQL. See\r\n  supplementary content APPENDIX-E for documentation on installing pgcrypto.\r\n\r\n  With pgcrypto installed, it's possible to insert encrypted data into the\r\n  database:\r\n\r\n  INSERT INTO accounts(username, password) VALUES ('bob',\r\ncrypt('a_secure_password', gen_salt('md5')));\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  pgcrypto_sql = \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\r\n\r\n  describe sql.query(pgcrypto_sql, [pg_db]) do\r\n    its('output') { should_not eq '' }\r\n  end\r\n\r\nend\r\n","source_location":{"line":10,"ref":"controls/V-73003.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SELECT * FROM pg_available_extensions where name='pgcrypto' output is expected not to eq \"\"","run_time":8.9742e-05,"start_time":"2020-06-19T18:47:41+00:00"}]},{"id":"V-73005","title":"PostgreSQL must produce audit records containing sufficient\n  information to establish the sources (origins) of the events.","desc":"Information system auditing capability is critical for accurate\n  forensic analysis. Without establishing the source of the event, it is\n  impossible to establish, correlate, and investigate the events relating to an\n  incident.\n\n  In order to compile an accurate risk assessment and provide forensic\n  analysis, it is essential for security personnel to know where events occurred,\n  such as application components, modules, session identifiers, filenames, host\n  names, and functionality.\n\n  In addition to logging where events occur within the application, the\n  application must also produce audit records that identify the application\n  itself as the source of the event.\n\n  Associating information about the source of the event within the\n  application provides a means of investigating an attack; recognizing resource\n  utilization or capacity thresholds; or identifying an improperly configured\n  application.","descriptions":[{"label":"default","data":"Information system auditing capability is critical for accurate\n  forensic analysis. Without establishing the source of the event, it is\n  impossible to establish, correlate, and investigate the events relating to an\n  incident.\n\n  In order to compile an accurate risk assessment and provide forensic\n  analysis, it is essential for security personnel to know where events occurred,\n  such as application components, modules, session identifiers, filenames, host\n  names, and functionality.\n\n  In addition to logging where events occur within the application, the\n  application must also produce audit records that identify the application\n  itself as the source of the event.\n\n  Associating information about the source of the event within the\n  application provides a means of investigating an attack; recognizing resource\n  utilization or capacity thresholds; or identifying an improperly configured\n  application."},{"label":"check","data":"Check PostgreSQL settings and existing audit records to verify\n  information specific to the source (origin) of the event is being captured and\n  stored with audit records. \n\n  As the database administrator (usually postgres, check the current\n  log_line_prefix and log_hostname setting by running the following SQL: \n\n  $ sudo su - postgres \n  $ psql -c \"SHOW log_line_prefix\" \n  $ psql -c \"SHOW log_hostname\" \n\n  For a complete list of extra information that can be added to log_line_prefix,\n  see the official documentation:\n  https://www.postgresql.org/docs/current/static/runtime-config-logging.html#GUC-LOG-LINE-PREFIX \n\n  If the current settings do not provide enough information regarding the source\n  of the event, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  If logging is enabled the following configurations can be made to log the\n  source of an event. \n\n  First, as the database administrator, edit postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  ###### Log Line Prefix \n\n  Extra parameters can be added to the setting log_line_prefix to log source of\n  event: \n\n  # %a = application name \n  # %u = user name \n  # %d = database name \n  # %r = remote host and port \n  # %p = process ID \n  # %m = timestamp with milliseconds \n\n  For example: \n  log_line_prefix = '< %m %a %u %d %r %p %m >' \n\n  ###### Log Hostname \n\n  By default only IP address is logged. To also log the hostname the following\n  parameter can also be set in postgresql.conf: \n\n  log_hostname = on \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000098-DB-000042","gid":"V-73005","rid":"SV-87657r2_rule","stig_id":"PGS9-00-008800","fix_id":"F-79451r2_fix","cci":["CCI-000133"],"nist":["AU-3","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73005\" do\r\n  title \"PostgreSQL must produce audit records containing sufficient\r\n  information to establish the sources (origins) of the events.\"\r\n  desc  \"Information system auditing capability is critical for accurate\r\n  forensic analysis. Without establishing the source of the event, it is\r\n  impossible to establish, correlate, and investigate the events relating to an\r\n  incident.\r\n\r\n  In order to compile an accurate risk assessment and provide forensic\r\n  analysis, it is essential for security personnel to know where events occurred,\r\n  such as application components, modules, session identifiers, filenames, host\r\n  names, and functionality.\r\n\r\n  In addition to logging where events occur within the application, the\r\n  application must also produce audit records that identify the application\r\n  itself as the source of the event.\r\n\r\n  Associating information about the source of the event within the\r\n  application provides a means of investigating an attack; recognizing resource\r\n  utilization or capacity thresholds; or identifying an improperly configured\r\n  application.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000098-DB-000042\"\r\n  tag \"gid\": \"V-73005\"\r\n  tag \"rid\": \"SV-87657r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-008800\"\r\n  tag \"fix_id\": \"F-79451r2_fix\"\r\n  tag \"cci\": [\"CCI-000133\"]\r\n  tag \"nist\": [\"AU-3\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Check PostgreSQL settings and existing audit records to verify\r\n  information specific to the source (origin) of the event is being captured and\r\n  stored with audit records. \r\n\r\n  As the database administrator (usually postgres, check the current\r\n  log_line_prefix and log_hostname setting by running the following SQL: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"SHOW log_line_prefix\\\" \r\n  $ psql -c \\\"SHOW log_hostname\\\" \r\n\r\n  For a complete list of extra information that can be added to log_line_prefix,\r\n  see the official documentation:\r\n  https://www.postgresql.org/docs/current/static/runtime-config-logging.html#GUC-LOG-LINE-PREFIX \r\n\r\n  If the current settings do not provide enough information regarding the source\r\n  of the event, this is a finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  If logging is enabled the following configurations can be made to log the\r\n  source of an event. \r\n\r\n  First, as the database administrator, edit postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  ###### Log Line Prefix \r\n\r\n  Extra parameters can be added to the setting log_line_prefix to log source of\r\n  event: \r\n\r\n  # %a = application name \r\n  # %u = user name \r\n  # %d = database name \r\n  # %r = remote host and port \r\n  # %p = process ID \r\n  # %m = timestamp with milliseconds \r\n\r\n  For example: \r\n  log_line_prefix = '< %m %a %u %d %r %p %m >' \r\n\r\n  ###### Log Hostname \r\n\r\n  By default only IP address is logged. To also log the hostname the following\r\n  parameter can also be set in postgresql.conf: \r\n\r\n  log_hostname = on \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  log_line_prefix_escapes = %w(%m %u %d %s)\r\n  log_line_prefix_escapes.each do |escape|\r\n    describe sql.query('SHOW log_line_prefix;', [pg_db]) do\r\n      its('output') { should include escape }\r\n    end\r\n  end\r\n\r\n  describe sql.query('SHOW log_hostname;', [pg_db]) do\r\n    its('output') { should match /(on|true)/i }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73005.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%m\"","run_time":0.000203853,"start_time":"2020-06-19T18:47:41+00:00","message":"expected \"%a %u %d %p %r %s %c\" to include \"%m\""},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%u\"","run_time":0.000105825,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%d\"","run_time":9.7217e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%s\"","run_time":9.8016e-05,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"failed","code_desc":"PostgreSQL query: SHOW log_hostname; output is expected to match /(on|true)/i","run_time":0.000337705,"start_time":"2020-06-19T18:47:41+00:00","message":"expected \"off\" to match /(on|true)/i\nDiff:\n@@ -1,2 +1,2 @@\n-/(on|true)/i\n+\"off\"\n"}]},{"id":"V-73007","title":"Unused database components, PostgreSQL software, and database objects\n  must be removed.","desc":"Information systems are capable of providing a wide variety of\n  functions and services. Some of the functions and services, provided by\n  default, may not be necessary to support essential organizational operations\n  (e.g., key missions, functions). \n\n  It is detrimental for software products to provide, or install by default,\n  functionality exceeding requirements or mission objectives.  \n\n  PostgreSQL must adhere to the principles of least functionality by\n  providing only essential capabilities.","descriptions":[{"label":"default","data":"Information systems are capable of providing a wide variety of\n  functions and services. Some of the functions and services, provided by\n  default, may not be necessary to support essential organizational operations\n  (e.g., key missions, functions). \n\n  It is detrimental for software products to provide, or install by default,\n  functionality exceeding requirements or mission objectives.  \n\n  PostgreSQL must adhere to the principles of least functionality by\n  providing only essential capabilities."},{"label":"check","data":"To get a list of all extensions installed, use the following\n  commands: \n\n  $ sudo su - postgres \n  $ psql -c \"select * from pg_extension where extname != 'plpgsql'\" \n\n  If any extensions exist that are not approved, this is a finding."},{"label":"fix","data":"To remove extensions, use the following commands:\n\n  $ sudo su - postgres\n  $ psql -c \"DROP EXTENSION <extension_name>\"\n\n  Note: It is recommended that plpgsql not be removed."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000141-DB-000091","gid":"V-73007","rid":"SV-87659r2_rule","stig_id":"PGS9-00-008900","fix_id":"F-79453r2_fix","cci":["CCI-000381"],"nist":["CM-7 a","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73007\" do\r\n  title \"Unused database components, PostgreSQL software, and database objects\r\n  must be removed.\"\r\n  desc  \"Information systems are capable of providing a wide variety of\r\n  functions and services. Some of the functions and services, provided by\r\n  default, may not be necessary to support essential organizational operations\r\n  (e.g., key missions, functions). \r\n\r\n  It is detrimental for software products to provide, or install by default,\r\n  functionality exceeding requirements or mission objectives.  \r\n\r\n  PostgreSQL must adhere to the principles of least functionality by\r\n  providing only essential capabilities.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000141-DB-000091\"\r\n  tag \"gid\": \"V-73007\"\r\n  tag \"rid\": \"SV-87659r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-008900\"\r\n  tag \"fix_id\": \"F-79453r2_fix\"\r\n  tag \"cci\": [\"CCI-000381\"]\r\n  tag \"nist\": [\"CM-7 a\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"To get a list of all extensions installed, use the following\r\n  commands: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"select * from pg_extension where extname != 'plpgsql'\\\" \r\n\r\n  If any extensions exist that are not approved, this is a finding.\"\r\n  \r\n  desc \"fix\", \"To remove extensions, use the following commands:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"DROP EXTENSION <extension_name>\\\"\r\n\r\n  Note: It is recommended that plpgsql not be removed.\"\r\n\r\n# @todo executed the SELECT statement in psql, got no output, psql not hardended? fix the stdout code, as needed.\r\n\r\ndbs = nil\r\ndb = nil\r\n\r\nif !(\"#{pg_db}\".to_s.empty?)\r\n  db = [\"#{pg_db}\"]\r\n  dbs = db.map { |x| \"-d #{x}\" }.join(' ')\r\nend\r\n\r\n# @todo need SSP data to compare that no extensions are present that are not approved?\r\n\r\n  describe.one do\r\n    approved_ext.each do |extension|\r\n      describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"SELECT * from pg_extension where extname != 'plpgsql';\\\" | cut -d'|' -f 1\") do\r\n        its('stdout.strip') { should match extension }\r\n      end\r\n    end\r\n    describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"SELECT * from pg_extension where extname != 'plpgsql';\\\"\") do\r\n      its('stdout.strip') { should be \"\" }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":25,"ref":"controls/V-73007.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"SELECT * from pg_extension where extname != 'plpgsql';\" | cut -d'|' -f 1` stdout.strip is expected to match \"\"","run_time":8.9062e-05,"start_time":"2020-06-19T18:47:41+00:00"}]},{"id":"V-73009","title":"Access to external executables must be disabled or restricted.","desc":"Information systems are capable of providing a wide variety of\n  functions and services. Some of the functions and services, provided by\n  default, may not be necessary to support essential organizational operations\n  (e.g., key missions, functions).\n\n  It is detrimental for applications to provide, or install by default,\n  functionality exceeding requirements or mission objectives.\n\n  Applications must adhere to the principles of least functionality by\n  providing only essential capabilities.\n\n  PostgreSQLs may spawn additional external processes to execute procedures\n  that are defined in PostgreSQL but stored in external host files (external\n  procedures). The spawned process used to execute the external procedure may\n  operate within a different OS security context than PostgreSQL and provide\n  unauthorized access to the host system.","descriptions":[{"label":"default","data":"Information systems are capable of providing a wide variety of\n  functions and services. Some of the functions and services, provided by\n  default, may not be necessary to support essential organizational operations\n  (e.g., key missions, functions).\n\n  It is detrimental for applications to provide, or install by default,\n  functionality exceeding requirements or mission objectives.\n\n  Applications must adhere to the principles of least functionality by\n  providing only essential capabilities.\n\n  PostgreSQLs may spawn additional external processes to execute procedures\n  that are defined in PostgreSQL but stored in external host files (external\n  procedures). The spawned process used to execute the external procedure may\n  operate within a different OS security context than PostgreSQL and provide\n  unauthorized access to the host system."},{"label":"check","data":"PostgreSQL’s Copy command can interact with the underlying OS.\n  Only superuser has access to this command.\n\n  First, as the database administrator (shown here as \"postgres\"), run the\n  following SQL to list all roles and their privileges:\n\n  $ sudo su - postgres\n  $ psql -x -c \"\\du\"\n\n  If any role has \"superuser\" that should not, this is a finding.\n\n  It is possible for an extension to contain code that could access external\n  executables via SQL. To list all installed extensions, as the database\n  administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -x -c \"SELECT * FROM pg_available_extensions WHERE installed_version IS\n  NOT NULL\"\n\n  If any extensions are installed that are not approved, this is a finding."},{"label":"fix","data":"To remove superuser from a role, as the database administrator\n  (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"ALTER ROLE <role-name> WITH NOSUPERUSER\"\n\n  To remove extensions from PostgreSQL, as the database administrator (shown here\n  as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"DROP EXTENSION extension_name\""}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000141-DB-000093","gid":"V-73009","rid":"SV-87661r1_rule","stig_id":"PGS9-00-009100","fix_id":"F-79455r1_fix","cci":["CCI-000381"],"nist":["CM-7 a","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73009\" do\r\n  title \"Access to external executables must be disabled or restricted.\"\r\n  desc  \"Information systems are capable of providing a wide variety of\r\n  functions and services. Some of the functions and services, provided by\r\n  default, may not be necessary to support essential organizational operations\r\n  (e.g., key missions, functions).\r\n\r\n  It is detrimental for applications to provide, or install by default,\r\n  functionality exceeding requirements or mission objectives.\r\n\r\n  Applications must adhere to the principles of least functionality by\r\n  providing only essential capabilities.\r\n\r\n  PostgreSQLs may spawn additional external processes to execute procedures\r\n  that are defined in PostgreSQL but stored in external host files (external\r\n  procedures). The spawned process used to execute the external procedure may\r\n  operate within a different OS security context than PostgreSQL and provide\r\n  unauthorized access to the host system.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000141-DB-000093\"\r\n  tag \"gid\": \"V-73009\"\r\n  tag \"rid\": \"SV-87661r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-009100\"\r\n  tag \"fix_id\": \"F-79455r1_fix\"\r\n  tag \"cci\": [\"CCI-000381\"]\r\n  tag \"nist\": [\"CM-7 a\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"PostgreSQL’s Copy command can interact with the underlying OS.\r\n  Only superuser has access to this command.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), run the\r\n  following SQL to list all roles and their privileges:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -x -c \\\"\\\\du\\\"\r\n\r\n  If any role has \\\"superuser\\\" that should not, this is a finding.\r\n\r\n  It is possible for an extension to contain code that could access external\r\n  executables via SQL. To list all installed extensions, as the database\r\n  administrator (shown here as \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -x -c \\\"SELECT * FROM pg_available_extensions WHERE installed_version IS\r\n  NOT NULL\\\"\r\n\r\n  If any extensions are installed that are not approved, this is a finding.\"\r\n    \r\n  desc \"fix\", \"To remove superuser from a role, as the database administrator\r\n  (shown here as \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"ALTER ROLE <role-name> WITH NOSUPERUSER\\\"\r\n\r\n  To remove extensions from PostgreSQL, as the database administrator (shown here\r\n  as \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"DROP EXTENSION extension_name\\\"\"\r\n\r\n\r\ndbs = nil\r\ndb = nil\r\n\r\nif !(\"#{pg_db}\".to_s.empty?)\r\n  db = [\"#{pg_db}\"]\r\n  dbs = db.map { |x| \"-d #{x}\" }.join(' ')\r\nend\r\n\r\n# @todo fix stdout, SSP roles should states which ones SHOULD have superuser, others should not? need datafile to test against the DB.\r\n\r\n  describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"select * from pg_shadow where usename <> 'postgres' and usesuper = 't';\") do\r\n    its('stdout.strip') { should match '' }\r\n  end\r\n\r\n# @todo how do I check to see if any extensions are installed that are not approved?  fix stdout value?\r\n\r\n  describe.one do\r\n    approved_ext.each do |extension|\r\n      describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"SELECT * FROM pg_available_extensions WHERE installed_version IS NOT NULL\\\"\") do\r\n        its('stdout.strip') { should match extension }\r\n      end\r\n    end\r\n  end\r\nend  \r\n","source_location":{"line":25,"ref":"controls/V-73009.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"select * from pg_shadow where usename <> 'postgres' and usesuper = 't';` stdout.strip is expected to match \"\"","run_time":0.519835635,"start_time":"2020-06-19T18:47:41+00:00"},{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"SELECT * FROM pg_available_extensions WHERE installed_version IS NOT NULL\"` stdout.strip is expected to match \"\"","run_time":0.000175721,"start_time":"2020-06-19T18:47:42+00:00"}]},{"id":"V-73011","title":"Unused database components which are integrated in PostgreSQL and\n  cannot be uninstalled must be disabled.","desc":"Information systems are capable of providing a wide variety of\n  functions and services. Some of the functions and services, provided by\n  default, may not be necessary to support essential organizational operations\n  (e.g., key missions, functions).  \n\n  It is detrimental for software products to provide, or install by default,\n  functionality exceeding requirements or mission objectives.  \n\n  PostgreSQL must adhere to the principles of least functionality by\n  providing only essential capabilities. \n\n  Unused, unnecessary PostgreSQL components increase the attack vector for\n  PostgreSQL by introducing additional targets for attack. By minimizing the\n  services and applications installed on the system, the number of potential\n  vulnerabilities is reduced. Components of the system that are unused and cannot\n  be uninstalled must be disabled. The techniques available for disabling\n  components will vary by DBMS product, OS and the nature of the component and\n  may include DBMS configuration settings, OS service settings, OS file access\n  security, and DBMS user/role permissions.","descriptions":[{"label":"default","data":"Information systems are capable of providing a wide variety of\n  functions and services. Some of the functions and services, provided by\n  default, may not be necessary to support essential organizational operations\n  (e.g., key missions, functions).  \n\n  It is detrimental for software products to provide, or install by default,\n  functionality exceeding requirements or mission objectives.  \n\n  PostgreSQL must adhere to the principles of least functionality by\n  providing only essential capabilities. \n\n  Unused, unnecessary PostgreSQL components increase the attack vector for\n  PostgreSQL by introducing additional targets for attack. By minimizing the\n  services and applications installed on the system, the number of potential\n  vulnerabilities is reduced. Components of the system that are unused and cannot\n  be uninstalled must be disabled. The techniques available for disabling\n  components will vary by DBMS product, OS and the nature of the component and\n  may include DBMS configuration settings, OS service settings, OS file access\n  security, and DBMS user/role permissions."},{"label":"check","data":"To list all installed packages, as the system administrator, run\n  the following:\n\n  # RHEL/CENT Systems\n  $ sudo yum list installed | grep postgres\n\n  # Debian Systems\n  $ dpkg --get-selections | grep postgres\n\n  If any packages are installed that are not required, this is a finding."},{"label":"fix","data":"To remove any unneeded executables, as the system administrator,\n  run the following:\n\n  # RHEL/CENT Systems\n  $ sudo yum erase <package_name>\n\n  # Debian Systems\n$ sudo apt-get remove <package_name>"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000141-DB-000092","gid":"V-73011","rid":"SV-87663r2_rule","stig_id":"PGS9-00-009200","fix_id":"F-79457r1_fix","cci":["CCI-000381"],"nist":["CM-7 a","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73011\" do\n  title \"Unused database components which are integrated in PostgreSQL and\n  cannot be uninstalled must be disabled.\"\n  desc  \"Information systems are capable of providing a wide variety of\n  functions and services. Some of the functions and services, provided by\n  default, may not be necessary to support essential organizational operations\n  (e.g., key missions, functions).  \n\n  It is detrimental for software products to provide, or install by default,\n  functionality exceeding requirements or mission objectives.  \n\n  PostgreSQL must adhere to the principles of least functionality by\n  providing only essential capabilities. \n\n  Unused, unnecessary PostgreSQL components increase the attack vector for\n  PostgreSQL by introducing additional targets for attack. By minimizing the\n  services and applications installed on the system, the number of potential\n  vulnerabilities is reduced. Components of the system that are unused and cannot\n  be uninstalled must be disabled. The techniques available for disabling\n  components will vary by DBMS product, OS and the nature of the component and\n  may include DBMS configuration settings, OS service settings, OS file access\n  security, and DBMS user/role permissions.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000141-DB-000092\"\n  tag \"gid\": \"V-73011\"\n  tag \"rid\": \"SV-87663r2_rule\"\n  tag \"stig_id\": \"PGS9-00-009200\"\n  tag \"fix_id\": \"F-79457r1_fix\"\n  tag \"cci\": [\"CCI-000381\"]\n  tag \"nist\": [\"CM-7 a\", \"Rev_4\"]\n  tag \"false_negatives\": nil\n  tag \"false_positives\": nil\n  tag \"documentable\": false\n  tag \"mitigations\": nil\n  tag \"severity_override_guidance\": false\n  tag \"potential_impacts\": nil\n  tag \"third_party_tools\": nil\n  tag \"mitigation_controls\": nil\n  tag \"responsibility\": nil\n  tag \"ia_controls\": nil\n  desc \"check\", \"To list all installed packages, as the system administrator, run\n  the following:\n\n  # RHEL/CENT Systems\n  $ sudo yum list installed | grep postgres\n\n  # Debian Systems\n  $ dpkg --get-selections | grep postgres\n\n  If any packages are installed that are not required, this is a finding.\"\n  \n  desc \"fix\", \"To remove any unneeded executables, as the system administrator,\n  run the following:\n\n  # RHEL/CENT Systems\n  $ sudo yum erase <package_name>\n\n  # Debian Systems\n$ sudo apt-get remove <package_name>\"\n\n  if command('yum').exist?\n    describe.one do\n      approved_ext.each do |extension|\n        describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"SELECT * FROM pg_available_extensions WHERE installed_version IS NOT NULL\\\"\") do\n          its('stdout.strip') { should match extension }\n        end\n      end\n    end\n  end\n  \n  if command('dpkg').exist?\n    describe.one do\n      approved_ext.each do |extension|\n        describe command(\"PGPASSWORD='#{pg_dba_password}' psql -U #{pg_dba} -d #{pg_db} -h #{pg_host} -A -t -c \\\"SELECT * FROM pg_available_extensions WHERE installed_version IS NOT NULL\\\"\") do\n          its('stdout.strip') { should match extension }\n        end\n      end\n    end\n  end \nend\n","source_location":{"line":23,"ref":"controls/V-73011.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `PGPASSWORD='postgres' psql -U postgres -d db -h localhost -A -t -c \"SELECT * FROM pg_available_extensions WHERE installed_version IS NOT NULL\"` stdout.strip is expected to match \"\"","run_time":9.5542e-05,"start_time":"2020-06-19T18:47:42+00:00"}]},{"id":"V-72951","title":"PostgreSQL must generate audit records when unsuccessful accesses to\n  objects occur.","desc":"Without tracking all or selected types of access to all or selected\n  objects (tables, views, procedures, functions, etc.), it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n\n      SELECT\n      INSERT\n      UPDATE\n      DROP\n      EXECUTE\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.","descriptions":[{"label":"default","data":"Without tracking all or selected types of access to all or selected\n  objects (tables, views, procedures, functions, etc.), it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n\n      SELECT\n      INSERT\n      UPDATE\n      DROP\n      EXECUTE\n\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  First, as the database administrator (shown here as \"postgres\"), create a\n  schema, test_schema, create a table, test_table, within test_schema, and insert\n  a value:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE SCHEMA test_schema\"\n  $ psql -c \"CREATE TABLE test_schema.test_table(id INT)\"\n  $ psql -c \"INSERT INTO test_schema.test_table(id) VALUES (0)\"\n\n  Next, create a role 'bob' and attempt to SELECT, INSERT, UPDATE, and DROP from\n  the test table:\n\n  $ psql -c \"CREATE ROLE BOB\"\n  $ psql -c \"SET ROLE bob; SELECT * FROM test_schema.test_table\"\n\n  $ psql -c \"SET ROLE bob; INSERT INTO test_schema.test_table VALUES (0)\"\n  $ psql -c \"SET ROLE bob; UPDATE test_schema.test_table SET id = 1 WHERE id =\n  0\"\n  $ psql -c \"SET ROLE bob; DROP TABLE test_schema.test_table\"\n  $ psql -c \"SET ROLE bob; DROP SCHEMA test_schema\"\n\n  Now, as the database administrator (shown here as \"postgres\"), review\n  PostgreSQL/database security and audit settings to verify that audit records\n  are created for unsuccessful attempts at the specified access to the specified\n  objects:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  2016-03-30 17:23:41.254 EDT postgres postgres ERROR: permission denied for\n  schema test_schema at character 15\n  2016-03-30 17:23:41.254 EDT postgres postgres STATEMENT: SELECT * FROM\n  test_schema.test_table;\n  2016-03-30 17:23:53.973 EDT postgres postgres ERROR: permission denied for\n  schema test_schema at character 13\n  2016-03-30 17:23:53.973 EDT postgres postgres STATEMENT: INSERT INTO\n  test_schema.test_table VALUES (0);\n  2016-03-30 17:24:32.647 EDT postgres postgres ERROR: permission denied for\n  schema test_schema at character 8\n  2016-03-30 17:24:32.647 EDT postgres postgres STATEMENT: UPDATE\n  test_schema.test_table SET id = 1 WHERE id = 0;\n  2016-03-30 17:24:46.197 EDT postgres postgres ERROR: permission denied for\n  schema test_schema\n  2016-03-30 17:24:46.197 EDT postgres postgres STATEMENT: DROP TABLE\n  test_schema.test_table;\n  2016-03-30 17:24:51.582 EDT postgres postgres ERROR: must be owner of schema\n  test_schema\n  2016-03-30 17:24:51.582 EDT postgres postgres STATEMENT: DROP SCHEMA\n  test_schema;\n\n  If any of the above steps did not create audit records for SELECT, INSERT,\n  UPDATE, and DROP, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access objects occur.\n\n  All errors and denials are logged if logging is enabled. To ensure that logging\n  is enabled, review supplementary content APPENDIX-C for instructions on\n  enabling logging."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000507-DB-000357","gid":"V-72951","rid":"SV-87603r2_rule","stig_id":"PGS9-00-005700","fix_id":"F-79397r1_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72951\" do\r\n  title \"PostgreSQL must generate audit records when unsuccessful accesses to\r\n  objects occur.\"\r\n  desc  \"Without tracking all or selected types of access to all or selected\r\n  objects (tables, views, procedures, functions, etc.), it would be difficult to\r\n  establish, correlate, and investigate the events relating to an incident or\r\n  identify those responsible for one.\r\n\r\n  In an SQL environment, types of access include, but are not necessarily\r\n  limited to:\r\n\r\n      SELECT\r\n      INSERT\r\n      UPDATE\r\n      DROP\r\n      EXECUTE\r\n\r\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\r\n  addition to the successful ones.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000507-DB-000357\"\r\n  tag \"gid\": \"V-72951\"\r\n  tag \"rid\": \"SV-87603r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-005700\"\r\n  tag \"fix_id\": \"F-79397r1_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), create a\r\n  schema, test_schema, create a table, test_table, within test_schema, and insert\r\n  a value:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"CREATE SCHEMA test_schema\\\"\r\n  $ psql -c \\\"CREATE TABLE test_schema.test_table(id INT)\\\"\r\n  $ psql -c \\\"INSERT INTO test_schema.test_table(id) VALUES (0)\\\"\r\n\r\n  Next, create a role 'bob' and attempt to SELECT, INSERT, UPDATE, and DROP from\r\n  the test table:\r\n\r\n  $ psql -c \\\"CREATE ROLE BOB\\\"\r\n  $ psql -c \\\"SET ROLE bob; SELECT * FROM test_schema.test_table\\\"\r\n\r\n  $ psql -c \\\"SET ROLE bob; INSERT INTO test_schema.test_table VALUES (0)\\\"\r\n  $ psql -c \\\"SET ROLE bob; UPDATE test_schema.test_table SET id = 1 WHERE id =\r\n  0\\\"\r\n  $ psql -c \\\"SET ROLE bob; DROP TABLE test_schema.test_table\\\"\r\n  $ psql -c \\\"SET ROLE bob; DROP SCHEMA test_schema\\\"\r\n\r\n  Now, as the database administrator (shown here as \\\"postgres\\\"), review\r\n  PostgreSQL/database security and audit settings to verify that audit records\r\n  are created for unsuccessful attempts at the specified access to the specified\r\n  objects:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  2016-03-30 17:23:41.254 EDT postgres postgres ERROR: permission denied for\r\n  schema test_schema at character 15\r\n  2016-03-30 17:23:41.254 EDT postgres postgres STATEMENT: SELECT * FROM\r\n  test_schema.test_table;\r\n  2016-03-30 17:23:53.973 EDT postgres postgres ERROR: permission denied for\r\n  schema test_schema at character 13\r\n  2016-03-30 17:23:53.973 EDT postgres postgres STATEMENT: INSERT INTO\r\n  test_schema.test_table VALUES (0);\r\n  2016-03-30 17:24:32.647 EDT postgres postgres ERROR: permission denied for\r\n  schema test_schema at character 8\r\n  2016-03-30 17:24:32.647 EDT postgres postgres STATEMENT: UPDATE\r\n  test_schema.test_table SET id = 1 WHERE id = 0;\r\n  2016-03-30 17:24:46.197 EDT postgres postgres ERROR: permission denied for\r\n  schema test_schema\r\n  2016-03-30 17:24:46.197 EDT postgres postgres STATEMENT: DROP TABLE\r\n  test_schema.test_table;\r\n  2016-03-30 17:24:51.582 EDT postgres postgres ERROR: must be owner of schema\r\n  test_schema\r\n  2016-03-30 17:24:51.582 EDT postgres postgres STATEMENT: DROP SCHEMA\r\n  test_schema;\r\n\r\n  If any of the above steps did not create audit records for SELECT, INSERT,\r\n  UPDATE, and DROP, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Configure PostgreSQL to produce audit records when unsuccessful\r\n  attempts to access objects occur.\r\n\r\n  All errors and denials are logged if logging is enabled. To ensure that logging\r\n  is enabled, review supplementary content APPENDIX-C for instructions on\r\n  enabling logging.\"\r\n\r\n\r\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n    describe sql.query('DROP TABLE IF EXISTS test_schema.test_table;', [pg_db]) do\r\n      its('output') { should eq 'DROP TABLE' }\r\n    end\r\n\r\n    describe sql.query('DROP SCHEMA IF EXISTS test_schema;', [pg_db]) do\r\n      its('output') { should eq 'DROP SCHEMA' }\r\n    end\r\n\r\n    describe sql.query('CREATE SCHEMA test_schema;', [pg_db]) do\r\n      its('output') { should eq 'CREATE SCHEMA' }\r\n    end\r\n\r\n    describe sql.query('CREATE TABLE test_schema.test_table(id INT);', [pg_db]) do\r\n      its('output') { should eq 'CREATE TABLE' }\r\n    end\r\n    \r\n    describe sql.query('INSERT INTO test_schema.test_table(id) VALUES (0);', [pg_db]) do\r\n      its('output') { should eq 'INSERT 0 1' }\r\n    end\r\n\r\n    describe sql.query('CREATE ROLE bob;', [pg_db]) do\r\n      its('output') { should eq 'CREATE ROLE' }\r\n    end\r\n\r\n    describe sql.query('SET ROLE bob; SELECT * FROM test_schema.test_table;', [pg_db]) do\r\n      its('output') { should match /ERROR:  permission denied for schema test_schema/ }\r\n    end\r\n\r\n    describe sql.query('SET ROLE bob; INSERT INTO test_schema.test_table VALUES (0);', [pg_db]) do\r\n      its('output') { should match /ERROR:  permission denied for schema test_schema/ }\r\n    end\r\n\r\n    describe sql.query('SET ROLE bob; UPDATE test_schema.test_table SET id = 1 WHERE id = 0;', [pg_db]) do\r\n      its('output') { should match /ERROR:  permission denied for schema test_schema/ }\r\n    end\r\n\r\n    describe sql.query('SET ROLE bob; DROP TABLE test_schema.test_table;', [pg_db]) do\r\n      its('output') { should match /ERROR:  permission denied for schema test_schema/ }\r\n    end\r\n\r\n    describe sql.query('SET ROLE bob; DROP SCHEMA test_schema;', [pg_db]) do\r\n      its('output') { should match /ERROR:  must be owner of schema test_schema/ }\r\n    end\r\n\r\n    describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"permission denied for schema test_schema\\\"\") do\r\n      its('stdout') { should match /^.*permission denied for schema test_schema.*$/ }\r\n    end\r\n\r\n    describe command(\"cat `find #{pg_audit_log_dir} -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\\\" \\\"` | grep \\\"must be owner of schema test_schema\\\"\") do\r\n      its('stdout') { should match /^.*must be owner of schema test_schema.*$/ }\r\n    end\r\nend\r\n","source_location":{"line":13,"ref":"controls/V-72951.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: DROP TABLE IF EXISTS test_schema.test_table; output is expected to eq \"DROP TABLE\"","run_time":0.000123563,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query: DROP SCHEMA IF EXISTS test_schema; output is expected to eq \"DROP SCHEMA\"","run_time":9.1516e-05,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query: CREATE SCHEMA test_schema; output is expected to eq \"CREATE SCHEMA\"","run_time":9.0532e-05,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query: CREATE TABLE test_schema.test_table(id INT); output is expected to eq \"CREATE TABLE\"","run_time":9.4902e-05,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query: INSERT INTO test_schema.test_table(id) VALUES (0); output is expected to eq \"INSERT 0 1\"","run_time":8.9903e-05,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"failed","code_desc":"PostgreSQL query with errors: CREATE ROLE bob; output is expected to eq \"CREATE ROLE\"","run_time":0.000343526,"start_time":"2020-06-19T18:47:42+00:00","message":"\nexpected: \"CREATE ROLE\"\n     got: \"\\nERROR:  role \\\"bob\\\" already exists\\ncommand terminated with exit code 1\\n\"\n\n(compared using ==)\n\nDiff:\n@@ -1,2 +1,4 @@\n-CREATE ROLE\n+\n+ERROR:  role \"bob\" already exists\n+command terminated with exit code 1\n"},{"status":"passed","code_desc":"PostgreSQL query with errors: SET ROLE bob; SELECT * FROM test_schema.test_table; output is expected to match /ERROR:  permission denied for schema test_schema/","run_time":0.000122934,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query with errors: SET ROLE bob; INSERT INTO test_schema.test_table VALUES (0); output is expected to match /ERROR:  permission denied for schema test_schema/","run_time":8.8159e-05,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query with errors: SET ROLE bob; UPDATE test_schema.test_table SET id = 1 WHERE id = 0; output is expected to match /ERROR:  permission denied for schema test_schema/","run_time":8.6064e-05,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query with errors: SET ROLE bob; DROP TABLE test_schema.test_table; output is expected to match /ERROR:  permission denied for schema test_schema/","run_time":8.5039e-05,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query with errors: SET ROLE bob; DROP SCHEMA test_schema; output is expected to match /ERROR:  must be owner of schema test_schema/","run_time":8.9951e-05,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"permission denied for schema test_schema\"` stdout is expected to match /^.*permission denied for schema test_schema.*$/","run_time":0.42324137,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"Command: `cat `find /var/lib/pgsql/data/userdata/pg_log -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d\" \"` | grep \"must be owner of schema test_schema\"` stdout is expected to match /^.*must be owner of schema test_schema.*$/","run_time":0.41217108,"start_time":"2020-06-19T18:47:42+00:00"}]},{"id":"V-73015","title":"If passwords are used for authentication, PostgreSQL must store only\n  hashed, salted representations of passwords.","desc":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n      Authentication based on User ID and Password may be used only when it is\n  not possible to employ a PKI certificate, and requires AO approval.\n\n      In such cases, database passwords stored in clear text, using reversible\n  encryption, or using unsalted hashes would be vulnerable to unauthorized\n  disclosure. Database passwords must always be in the form of one-way, salted\n  hashes when stored internally or externally to PostgreSQL.","descriptions":[{"label":"default","data":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n      Authentication based on User ID and Password may be used only when it is\n  not possible to employ a PKI certificate, and requires AO approval.\n\n      In such cases, database passwords stored in clear text, using reversible\n  encryption, or using unsalted hashes would be vulnerable to unauthorized\n  disclosure. Database passwords must always be in the form of one-way, salted\n  hashes when stored internally or externally to PostgreSQL."},{"label":"check","data":"To check if password encryption is enabled, as the database\n  administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW password_encryption\"\n\n  If password_encryption is not on, this is a finding.\n\n  Next, to identify if any passwords have been stored without being hashed and\n  salted, as the database administrator (shown here as \"postgres\"), run the\n  following SQL:\n\n  $ sudo su - postgres\n  $ psql -x -c \"SELECT * FROM pg_shadow\"\n\n  If any password is in plaintext, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To enable password_encryption, as the database administrator, edit\n  postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  password_encryption = on \n\n  Institute a policy of not using the \"WITH UNENCRYPTED PASSWORD\" option with\n  the CREATE ROLE/USER and ALTER ROLE/USER commands. (This option overrides the\n  setting of the password_encryption configuration parameter.) \n\n  As the system administrator, restart the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl restart postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} restart"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000171-DB-000074","gid":"V-73015","rid":"SV-87667r2_rule","stig_id":"PGS9-00-009500","fix_id":"F-79461r2_fix","cci":["CCI-000196"],"nist":["IA-5 (1) (c)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73015\" do\r\n  title \"If passwords are used for authentication, PostgreSQL must store only\r\n  hashed, salted representations of passwords.\"\r\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\r\n\r\n      Authentication based on User ID and Password may be used only when it is\r\n  not possible to employ a PKI certificate, and requires AO approval.\r\n\r\n      In such cases, database passwords stored in clear text, using reversible\r\n  encryption, or using unsalted hashes would be vulnerable to unauthorized\r\n  disclosure. Database passwords must always be in the form of one-way, salted\r\n  hashes when stored internally or externally to PostgreSQL.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000171-DB-000074\"\r\n  tag \"gid\": \"V-73015\"\r\n  tag \"rid\": \"SV-87667r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-009500\"\r\n  tag \"fix_id\": \"F-79461r2_fix\"\r\n  tag \"cci\": [\"CCI-000196\"]\r\n  tag \"nist\": [\"IA-5 (1) (c)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"To check if password encryption is enabled, as the database\r\n  administrator (shown here as \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW password_encryption\\\"\r\n\r\n  If password_encryption is not on, this is a finding.\r\n\r\n  Next, to identify if any passwords have been stored without being hashed and\r\n  salted, as the database administrator (shown here as \\\"postgres\\\"), run the\r\n  following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -x -c \\\"SELECT * FROM pg_shadow\\\"\r\n\r\n  If any password is in plaintext, this is a finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To enable password_encryption, as the database administrator, edit\r\n  postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  password_encryption = on \r\n\r\n  Institute a policy of not using the \\\"WITH UNENCRYPTED PASSWORD\\\" option with\r\n  the CREATE ROLE/USER and ALTER ROLE/USER commands. (This option overrides the\r\n  setting of the password_encryption configuration parameter.) \r\n\r\n  As the system administrator, restart the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl restart postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} restart\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW password_encryption;', [pg_db]) do\r\n    its('output') { should match /on|true/i }\r\n  end\r\n\r\n  passwords_sql = \"SELECT usename FROM pg_shadow \"\\\r\n    \"WHERE passwd !~ '^md5[0-9a-f]+$';\"\r\n\r\n  describe sql.query(passwords_sql, [pg_db]) do\r\n    its('output') { should eq '' }\r\n  end\r\n\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73015.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SHOW password_encryption; output is expected to match /on|true/i","run_time":0.000169403,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT usename FROM pg_shadow WHERE passwd !~ '^md5[0-9a-f]+$'; output is expected to eq \"\"","run_time":0.000146578,"start_time":"2020-06-19T18:47:42+00:00"}]},{"id":"V-72985","title":"PostgreSQL must generate time stamps, for audit records and\n  application data, with a minimum granularity of one second.","desc":"Without sufficient granularity of time stamps, it is not possible to\n  adequately determine the chronological order of records.\n\n  Time stamps generated by PostgreSQL must include date and time. Granularity\n  of time measurements refers to the precision available in time stamp values.\n  Granularity coarser than one second is not sufficient for audit trail purposes.\n  Time stamp values are typically presented with three or more decimal places of\n  seconds; however, the actual granularity may be coarser than the apparent\n  precision. For example, PostgreSQL will always return at least millisecond\n  timestamps but it can be truncated using EXTRACT functions: SELECT\n  EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40');.","descriptions":[{"label":"default","data":"Without sufficient granularity of time stamps, it is not possible to\n  adequately determine the chronological order of records.\n\n  Time stamps generated by PostgreSQL must include date and time. Granularity\n  of time measurements refers to the precision available in time stamp values.\n  Granularity coarser than one second is not sufficient for audit trail purposes.\n  Time stamp values are typically presented with three or more decimal places of\n  seconds; however, the actual granularity may be coarser than the apparent\n  precision. For example, PostgreSQL will always return at least millisecond\n  timestamps but it can be truncated using EXTRACT functions: SELECT\n  EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40');."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  First, as the database administrator (shown here as \"postgres\"), verify the\n  current log_line_prefix setting by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_line_prefix\"\n\n  If log_line_prefix does not contain %m, this is a finding.\n\n  Next check the logs to verify time stamps are being logged:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-02-23 12:53:33.947 EDT postgres postgres 570bd68d.3912 >LOG: connection\n  authorized: user=postgres database=postgres\n  < 2016-02-23 12:53:41.576 EDT postgres postgres 570bd68d.3912 >LOG: AUDIT:\n  SESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE test_srg(id INT);,<none>\n  < 2016-02-23 12:53:44.372 EDT postgres postgres 570bd68d.3912 >LOG:\n  disconnection: session time: 0:00:10.426 user=postgres database=postgres\n  host=[local]\n\n  If time stamps are not being logged, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  PostgreSQL will not log anything if logging is not enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions on\n  enabling logging. \n\n  If logging is enabled the following configurations must be made to log events\n  with time stamps:  \n\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add %m to log_line_prefix to enable time stamps with milliseconds: \n\n  log_line_prefix = '< %m >' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000375-DB-000323","gid":"V-72985","rid":"SV-87637r2_rule","stig_id":"PGS9-00-007700","fix_id":"F-79431r2_fix","cci":["CCI-001889"],"nist":["AU-8 b","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72985\" do\r\n  title \"PostgreSQL must generate time stamps, for audit records and\r\n  application data, with a minimum granularity of one second.\"\r\n  desc  \"Without sufficient granularity of time stamps, it is not possible to\r\n  adequately determine the chronological order of records.\r\n\r\n  Time stamps generated by PostgreSQL must include date and time. Granularity\r\n  of time measurements refers to the precision available in time stamp values.\r\n  Granularity coarser than one second is not sufficient for audit trail purposes.\r\n  Time stamp values are typically presented with three or more decimal places of\r\n  seconds; however, the actual granularity may be coarser than the apparent\r\n  precision. For example, PostgreSQL will always return at least millisecond\r\n  timestamps but it can be truncated using EXTRACT functions: SELECT\r\n  EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40');.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000375-DB-000323\"\r\n  tag \"gid\": \"V-72985\"\r\n  tag \"rid\": \"SV-87637r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-007700\"\r\n  tag \"fix_id\": \"F-79431r2_fix\"\r\n  tag \"cci\": [\"CCI-001889\"]\r\n  tag \"nist\": [\"AU-8 b\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  current log_line_prefix setting by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_line_prefix\\\"\r\n\r\n  If log_line_prefix does not contain %m, this is a finding.\r\n\r\n  Next check the logs to verify time stamps are being logged:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_log/<latest_log>\r\n  < 2016-02-23 12:53:33.947 EDT postgres postgres 570bd68d.3912 >LOG: connection\r\n  authorized: user=postgres database=postgres\r\n  < 2016-02-23 12:53:41.576 EDT postgres postgres 570bd68d.3912 >LOG: AUDIT:\r\n  SESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE test_srg(id INT);,<none>\r\n  < 2016-02-23 12:53:44.372 EDT postgres postgres 570bd68d.3912 >LOG:\r\n  disconnection: session time: 0:00:10.426 user=postgres database=postgres\r\n  host=[local]\r\n\r\n  If time stamps are not being logged, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  PostgreSQL will not log anything if logging is not enabled. To ensure that\r\n  logging is enabled, review supplementary content APPENDIX-C for instructions on\r\n  enabling logging. \r\n\r\n  If logging is enabled the following configurations must be made to log events\r\n  with time stamps:  \r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), edit\r\n  postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add %m to log_line_prefix to enable time stamps with milliseconds: \r\n\r\n  log_line_prefix = '< %m >' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW log_line_prefix;', [pg_db]) do\r\n    its('output') { should match '< %m >' }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-72985.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to match \"< %m >\"","run_time":0.000586679,"start_time":"2020-06-19T18:47:42+00:00","message":"expected \"%a %u %d %p %r %s %c\" to match \"< %m >\""}]},{"id":"V-73019","title":"PostgreSQL must protect against a user falsely repudiating having\n  performed organization-defined actions.","desc":"Non-repudiation of actions taken is required in order to maintain data\n  integrity. Examples of particular actions taken by individuals include creating\n  information, sending a message, approving information (e.g., indicating\n  concurrence or signing a contract), and receiving a message.\n\n  Non-repudiation protects against later claims by a user of not having\n  created, modified, or deleted a particular data item or collection of data in\n  the database.\n\n  In designing a database, the organization must define the types of data and\n  the user actions that must be protected from repudiation. The implementation\n  must then include building audit features into the application data tables, and\n  configuring PostgreSQL' audit tools to capture the necessary audit trail.\n  Design and implementation also must ensure that applications pass individual\n  user identification to PostgreSQL, even where the application connects to\n  PostgreSQL with a standard, shared account.","descriptions":[{"label":"default","data":"Non-repudiation of actions taken is required in order to maintain data\n  integrity. Examples of particular actions taken by individuals include creating\n  information, sending a message, approving information (e.g., indicating\n  concurrence or signing a contract), and receiving a message.\n\n  Non-repudiation protects against later claims by a user of not having\n  created, modified, or deleted a particular data item or collection of data in\n  the database.\n\n  In designing a database, the organization must define the types of data and\n  the user actions that must be protected from repudiation. The implementation\n  must then include building audit features into the application data tables, and\n  configuring PostgreSQL' audit tools to capture the necessary audit trail.\n  Design and implementation also must ensure that applications pass individual\n  user identification to PostgreSQL, even where the application connects to\n  PostgreSQL with a standard, shared account."},{"label":"check","data":"First, as the database administrator, review the current\n  log_line_prefix settings by running the following SQL: \n\n  $ sudo su - postgres \n  $ psql -c \"SHOW log_line_prefix\" \n\n  If log_line_prefix does not contain at least '< %m %a %u %d %r %p %m >', this\n  is a finding. \n\n  Next, review the current shared_preload_libraries settings by running the\n  following SQL: \n\n  $ psql -c \"SHOW shared_preload_libraries\" \n\n  If shared_preload_libraries does not contain \"pgaudit\", this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Configure the database to supply additional auditing information to protect\n  against a user falsely repudiating having performed organization-defined\n  actions. \n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  Modify the configuration of audit logs to include details identifying the\n  individual user: \n\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Extra parameters can be added to the setting log_line_prefix to identify the\n  user: \n\n  log_line_prefix = '< %m %a %u %d %r %p %m >' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload \n\n  Use accounts assigned to individual users. Where the application connects to\n  PostgreSQL using a standard, shared account, ensure that it also captures the\n  individual user identification and passes it to PostgreSQL."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000080-DB-000063","gid":"V-73019","rid":"SV-87671r2_rule","stig_id":"PGS9-00-009700","fix_id":"F-79465r2_fix","cci":["CCI-000166"],"nist":["AU-10","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73019\" do\r\n  title \"PostgreSQL must protect against a user falsely repudiating having\r\n  performed organization-defined actions.\"\r\n  desc  \"Non-repudiation of actions taken is required in order to maintain data\r\n  integrity. Examples of particular actions taken by individuals include creating\r\n  information, sending a message, approving information (e.g., indicating\r\n  concurrence or signing a contract), and receiving a message.\r\n\r\n  Non-repudiation protects against later claims by a user of not having\r\n  created, modified, or deleted a particular data item or collection of data in\r\n  the database.\r\n\r\n  In designing a database, the organization must define the types of data and\r\n  the user actions that must be protected from repudiation. The implementation\r\n  must then include building audit features into the application data tables, and\r\n  configuring PostgreSQL' audit tools to capture the necessary audit trail.\r\n  Design and implementation also must ensure that applications pass individual\r\n  user identification to PostgreSQL, even where the application connects to\r\n  PostgreSQL with a standard, shared account.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000080-DB-000063\"\r\n  tag \"gid\": \"V-73019\"\r\n  tag \"rid\": \"SV-87671r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-009700\"\r\n  tag \"fix_id\": \"F-79465r2_fix\"\r\n  tag \"cci\": [\"CCI-000166\"]\r\n  tag \"nist\": [\"AU-10\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator, review the current\r\n  log_line_prefix settings by running the following SQL: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"SHOW log_line_prefix\\\" \r\n\r\n  If log_line_prefix does not contain at least '< %m %a %u %d %r %p %m >', this\r\n  is a finding. \r\n\r\n  Next, review the current shared_preload_libraries settings by running the\r\n  following SQL: \r\n\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\" \r\n\r\n  If shared_preload_libraries does not contain \\\"pgaudit\\\", this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Configure the database to supply additional auditing information to protect\r\n  against a user falsely repudiating having performed organization-defined\r\n  actions. \r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  Modify the configuration of audit logs to include details identifying the\r\n  individual user: \r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), edit\r\n  postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Extra parameters can be added to the setting log_line_prefix to identify the\r\n  user: \r\n\r\n  log_line_prefix = '< %m %a %u %d %r %p %m >' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload \r\n\r\n  Use accounts assigned to individual users. Where the application connects to\r\n  PostgreSQL using a standard, shared account, ensure that it also captures the\r\n  individual user identification and passes it to PostgreSQL.\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  log_line_prefix_escapes = %w(%m %u %d %p %r %a)\r\n\r\n  log_line_prefix_escapes.each do |escape|\r\n    describe sql.query('SHOW log_line_prefix;', [pg_db]) do\r\n      its('output') { should include escape }\r\n    end\r\n  end\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73019.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%m\"","run_time":0.000323394,"start_time":"2020-06-19T18:47:42+00:00","message":"expected \"%a %u %d %p %r %s %c\" to include \"%m\""},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%u\"","run_time":0.000206957,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%d\"","run_time":0.000187212,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%p\"","run_time":0.000271066,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%r\"","run_time":0.000156774,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%a\"","run_time":0.000150493,"start_time":"2020-06-19T18:47:42+00:00"},{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.0002409,"start_time":"2020-06-19T18:47:42+00:00","message":"expected \"\" to include \"pgaudit\""}]},{"id":"V-73071","title":"The DBMS must be configured on a platform that has a NIST certified\n  FIPS 140-2 installation of OpenSSL.","desc":"PostgreSQL uses OpenSSL for the underlying encryption layer. It must\n  be installed on an operating system that contains a certified FIPS 140-2\n  distribution of OpenSSL. For other operating systems, users must obtain or\n  build their own FIPS 140-2 OpenSSL libraries.","descriptions":[{"label":"default","data":"PostgreSQL uses OpenSSL for the underlying encryption layer. It must\n  be installed on an operating system that contains a certified FIPS 140-2\n  distribution of OpenSSL. For other operating systems, users must obtain or\n  build their own FIPS 140-2 OpenSSL libraries."},{"label":"check","data":"If the deployment incorporates a custom build of the operating\n  system and PostgreSQL guaranteeing the use of FIPS 140-2- compliant OpenSSL,\n  this is not a finding.\n  Go to the below webpage and click \"show all\":\n  https://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules/search\n  Note: Certificates 3130, 3016, and 2441 are the most common.\n  If the OS is not using a FIPS 140-2 certified implementation that is listed,\n  this is a finding.\n\n  If FIPS encryption is not enabled, this is a finding."},{"label":"fix","data":"Install PostgreSQL on an operating system with FIPS-compliant\n  cryptography enabled; or by other means ensure that FIPS 140-2-certified\n  OpenSSL libraries are used by the DBMS."}],"impact":0.7,"refs":[],"tags":{"severity":"high","gtitle":"SRG-APP-000179-DB-000114","gid":"V-73071","rid":"SV-87723r3_rule","stig_id":"PGS9-00-012800","fix_id":"F-79517r4_fix","cci":["CCI-000803"],"nist":["IA-7","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73071\" do\r\n  title \"The DBMS must be configured on a platform that has a NIST certified\r\n  FIPS 140-2 installation of OpenSSL.\"\r\n  desc  \"PostgreSQL uses OpenSSL for the underlying encryption layer. It must\r\n  be installed on an operating system that contains a certified FIPS 140-2\r\n  distribution of OpenSSL. For other operating systems, users must obtain or\r\n  build their own FIPS 140-2 OpenSSL libraries.\"\r\n  \r\n  impact 0.7\r\n  tag \"severity\": \"high\"\r\n  tag \"gtitle\": \"SRG-APP-000179-DB-000114\"\r\n  tag \"gid\": \"V-73071\"\r\n  tag \"rid\": \"SV-87723r3_rule\"\r\n  tag \"stig_id\": \"PGS9-00-012800\"\r\n  tag \"fix_id\": \"F-79517r4_fix\"\r\n  tag \"cci\": [\"CCI-000803\"]\r\n  tag \"nist\": [\"IA-7\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"If the deployment incorporates a custom build of the operating\r\n  system and PostgreSQL guaranteeing the use of FIPS 140-2- compliant OpenSSL,\r\n  this is not a finding.\r\n  Go to the below webpage and click \\\"show all\\\":\r\n  https://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules/search\r\n  Note: Certificates 3130, 3016, and 2441 are the most common.\r\n  If the OS is not using a FIPS 140-2 certified implementation that is listed,\r\n  this is a finding.\r\n\r\n  If FIPS encryption is not enabled, this is a finding.\"\r\n\r\n  desc \"fix\", \"Install PostgreSQL on an operating system with FIPS-compliant\r\n  cryptography enabled; or by other means ensure that FIPS 140-2-certified\r\n  OpenSSL libraries are used by the DBMS.\"\r\n\r\n  describe \"Check that the deployment is using FIPS 140-2- compliant OpenSSL\" do\r\n    skip \"If FIPS encryption is not enabled, this is a finding.\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-73071.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Check that the deployment is using FIPS 140-2- compliant OpenSSL","run_time":5.896e-06,"start_time":"2020-06-19T18:47:42+00:00","resource":"","skip_message":"If FIPS encryption is not enabled, this is a finding."}]},{"id":"V-73023","title":"The system must provide a warning to appropriate support staff when\n  allocated audit record storage volume reaches 75% of maximum audit record\n  storage capacity.","desc":"Organizations are required to use a central log management system, so,\n  under normal conditions, the audit space allocated to PostgreSQL on its own\n  server will not be an issue. However, space will still be required on\n  PostgreSQL server for audit records in transit, and, under abnormal conditions,\n  this could fill up. Since a requirement exists to halt processing upon audit\n  failure, a service outage would result.\n\n  If support personnel are not notified immediately upon storage volume\n  utilization reaching 75%, they are unable to plan for storage capacity\n  expansion.\n\n  The appropriate support staff include, at a minimum, the ISSO and the\n  DBA/SA.","descriptions":[{"label":"default","data":"Organizations are required to use a central log management system, so,\n  under normal conditions, the audit space allocated to PostgreSQL on its own\n  server will not be an issue. However, space will still be required on\n  PostgreSQL server for audit records in transit, and, under abnormal conditions,\n  this could fill up. Since a requirement exists to halt processing upon audit\n  failure, a service outage would result.\n\n  If support personnel are not notified immediately upon storage volume\n  utilization reaching 75%, they are unable to plan for storage capacity\n  expansion.\n\n  The appropriate support staff include, at a minimum, the ISSO and the\n  DBA/SA."},{"label":"check","data":"Review system configuration.\n\n  If no script/tool is monitoring the partition for the PostgreSQL log\n  directories, this is a finding.\n\n  If appropriate support staff are not notified immediately upon storage volume\n  utilization reaching 75%, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Configure the system to notify appropriate support staff immediately upon\n  storage volume utilization reaching 75%. \n\n  PostgreSQL does not monitor storage, however, it is possible to monitor storage\n  with a script. \n\n  ##### Example Monitoring Script \n\n  #!/bin/bash \n\n  PGDATA=/var/lib/psql/${PGVER?}/data \n  CURRENT=$(df ${PGDATA?} | grep / | awk '{ print $5}' | sed 's/%//g') \n  THRESHOLD=75 \n\n  if [ \"$CURRENT\" -gt \"$THRESHOLD\" ] ; then \n  mail -s 'Disk Space Alert' mail@support.com << EOF \n  The data directory volume is almost full. Used: $CURRENT \n  %EOF \n  fi \n\n  Schedule this script in cron to run around the clock."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000359-DB-000319","gid":"V-73023","rid":"SV-87675r2_rule","stig_id":"PGS9-00-009900","fix_id":"F-79469r2_fix","cci":["CCI-001855"],"nist":["AU-5 (1)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73023\" do\r\n  title \"The system must provide a warning to appropriate support staff when\r\n  allocated audit record storage volume reaches 75% of maximum audit record\r\n  storage capacity.\"\r\n  desc  \"Organizations are required to use a central log management system, so,\r\n  under normal conditions, the audit space allocated to PostgreSQL on its own\r\n  server will not be an issue. However, space will still be required on\r\n  PostgreSQL server for audit records in transit, and, under abnormal conditions,\r\n  this could fill up. Since a requirement exists to halt processing upon audit\r\n  failure, a service outage would result.\r\n\r\n  If support personnel are not notified immediately upon storage volume\r\n  utilization reaching 75%, they are unable to plan for storage capacity\r\n  expansion.\r\n\r\n  The appropriate support staff include, at a minimum, the ISSO and the\r\n  DBA/SA.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000359-DB-000319\"\r\n  tag \"gid\": \"V-73023\"\r\n  tag \"rid\": \"SV-87675r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-009900\"\r\n  tag \"fix_id\": \"F-79469r2_fix\"\r\n  tag \"cci\": [\"CCI-001855\"]\r\n  tag \"nist\": [\"AU-5 (1)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review system configuration.\r\n\r\n  If no script/tool is monitoring the partition for the PostgreSQL log\r\n  directories, this is a finding.\r\n\r\n  If appropriate support staff are not notified immediately upon storage volume\r\n  utilization reaching 75%, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Configure the system to notify appropriate support staff immediately upon\r\n  storage volume utilization reaching 75%. \r\n\r\n  PostgreSQL does not monitor storage, however, it is possible to monitor storage\r\n  with a script. \r\n\r\n  ##### Example Monitoring Script \r\n\r\n  #!/bin/bash \r\n\r\n  PGDATA=/var/lib/psql/${PGVER?}/data \r\n  CURRENT=$(df ${PGDATA?} | grep / | awk '{ print $5}' | sed 's/%//g') \r\n  THRESHOLD=75 \r\n\r\n  if [ \\\"$CURRENT\\\" -gt \\\"$THRESHOLD\\\" ] ; then \r\n  mail -s 'Disk Space Alert' mail@support.com << EOF \r\n  The data directory volume is almost full. Used: $CURRENT \r\n  %EOF \r\n  fi \r\n\r\n  Schedule this script in cron to run around the clock.\"\r\n\r\n  describe \"This can not be automated\" do\r\n    skip \"manually perform this test\"\r\n  end \r\nend\r\n","source_location":{"line":3,"ref":"controls/V-73023.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"This can not be automated","run_time":7.562e-06,"start_time":"2020-06-19T18:47:42+00:00","resource":"","skip_message":"manually perform this test"}]},{"id":"V-73025","title":"PostgreSQL must provide the means for individuals in authorized roles\n  to change the auditing to be performed on all application components, based on\n  all selectable event criteria within organization-defined time thresholds.","desc":"If authorized individuals do not have the ability to modify auditing\n  parameters in response to a changing threat environment, the organization may\n  not be able to effectively respond, and important forensic information may be\n  lost.\n\n  This requirement enables organizations to extend or limit auditing as\n  necessary to meet organizational requirements. Auditing that is limited to\n  conserve information system resources may be extended to address certain threat\n  situations. In addition, auditing may be limited to a specific set of events to\n  facilitate audit reduction, analysis, and reporting. Organizations can\n  establish time thresholds in which audit actions are changed, for example, near\n  real time, within minutes, or within hours.","descriptions":[{"label":"default","data":"If authorized individuals do not have the ability to modify auditing\n  parameters in response to a changing threat environment, the organization may\n  not be able to effectively respond, and important forensic information may be\n  lost.\n\n  This requirement enables organizations to extend or limit auditing as\n  necessary to meet organizational requirements. Auditing that is limited to\n  conserve information system resources may be extended to address certain threat\n  situations. In addition, auditing may be limited to a specific set of events to\n  facilitate audit reduction, analysis, and reporting. Organizations can\n  establish time thresholds in which audit actions are changed, for example, near\n  real time, within minutes, or within hours."},{"label":"check","data":"First, as the database administrator, check if pgaudit is present\n  in shared_preload_libraries:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If pgaudit is not present in the result from the query, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  For audit logging we suggest using pgaudit. For instructions on how to setup\n  pgaudit, see supplementary content APPENDIX-B. \n\n  As a superuser (postgres), any pgaudit parameter can be changed in\n  postgresql.conf. Configurations can only be changed by a superuser. \n\n  ### Example: Change Auditing To Log Any ROLE Statements \n\n  Note: This will override any setting already configured. \n\n  Alter the configuration to do role-based logging: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log = 'role' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload \n\n  ### Example: Set An Auditing Role And Grant Privileges \n\n  An audit role can be configured and granted privileges to specific tables and\n  columns that need logging. \n\n  ##### Create Test Table \n\n  $ sudo su - postgres \n  $ psql -c \"CREATE TABLE public.stig_audit_example(id INT, name TEXT, password\n  TEXT);\" \n\n  ##### Define Auditing Role \n\n  As PostgreSQL superuser (such as postgres), add the following to\n  postgresql.conf or any included configuration files. \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.role = 'auditor' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload \n\n  Next in PostgreSQL create a new role: \n\n  postgres=# CREATE ROLE auditor; \n  postgres=# GRANT select(password) ON public.stig_audit_example TO auditor; \n\n  Note: This role is created with NOLOGIN privileges by default. \n\n  Now any SELECT on the column password will be logged: \n\n  $ sudo su - postgres \n  $ psql -c \"SELECT password FROM public.stig_audit_example;\" \n  $ cat ${PGDATA?}/pg_log/<latest_log> \n  < 2016-01-28 16:46:09.038 UTC bob postgres: >LOG: AUDIT:\n  OBJECT,6,1,READ,SELECT,TABLE,public.stig_audit_example,SELECT password FROM\n  stig_audit_example;,<none> \n\n  ## Change Configurations During A Specific Timeframe \n\n  Deploy PostgreSQL that allows audit configuration changes to take effect within\n  the timeframe required by the application owner and without involving actions\n  or events that the application owner rules unacceptable.\n\n  Crontab can be used to do this. \n\n    For a specific audit role: \n    \n    # Grant specific audit privileges to an auditing role at 5 PM every day of the\n    week, month, year at the 0 minute mark. \n    0 5 * * * postgres /usr/bin/psql -c \"GRANT select(password) ON\n    public.stig_audit_example TO auditor;\" \n    # Revoke specific audit privileges to an auditing role at 5 PM every day of the\n    week, month, year at the 0 minute mark. \n    0 17 * * * postgres /usr/bin/psql -c \"REVOKE select(password) ON\n    public.stig_audit_example FROM auditor;\""}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000353-DB-000324","gid":"V-73025","rid":"SV-87677r2_rule","stig_id":"PGS9-00-010000","fix_id":"F-79471r2_fix","cci":["CCI-001914"],"nist":["AU-12 (3)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73025\" do\r\n  title \"PostgreSQL must provide the means for individuals in authorized roles\r\n  to change the auditing to be performed on all application components, based on\r\n  all selectable event criteria within organization-defined time thresholds.\"\r\n  desc  \"If authorized individuals do not have the ability to modify auditing\r\n  parameters in response to a changing threat environment, the organization may\r\n  not be able to effectively respond, and important forensic information may be\r\n  lost.\r\n\r\n  This requirement enables organizations to extend or limit auditing as\r\n  necessary to meet organizational requirements. Auditing that is limited to\r\n  conserve information system resources may be extended to address certain threat\r\n  situations. In addition, auditing may be limited to a specific set of events to\r\n  facilitate audit reduction, analysis, and reporting. Organizations can\r\n  establish time thresholds in which audit actions are changed, for example, near\r\n  real time, within minutes, or within hours.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000353-DB-000324\"\r\n  tag \"gid\": \"V-73025\"\r\n  tag \"rid\": \"SV-87677r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-010000\"\r\n  tag \"fix_id\": \"F-79471r2_fix\"\r\n  tag \"cci\": [\"CCI-001914\"]\r\n  tag \"nist\": [\"AU-12 (3)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator, check if pgaudit is present\r\n  in shared_preload_libraries:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If pgaudit is not present in the result from the query, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  For audit logging we suggest using pgaudit. For instructions on how to setup\r\n  pgaudit, see supplementary content APPENDIX-B. \r\n\r\n  As a superuser (postgres), any pgaudit parameter can be changed in\r\n  postgresql.conf. Configurations can only be changed by a superuser. \r\n\r\n  ### Example: Change Auditing To Log Any ROLE Statements \r\n\r\n  Note: This will override any setting already configured. \r\n\r\n  Alter the configuration to do role-based logging: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log = 'role' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload \r\n\r\n  ### Example: Set An Auditing Role And Grant Privileges \r\n\r\n  An audit role can be configured and granted privileges to specific tables and\r\n  columns that need logging. \r\n\r\n  ##### Create Test Table \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"CREATE TABLE public.stig_audit_example(id INT, name TEXT, password\r\n  TEXT);\\\" \r\n\r\n  ##### Define Auditing Role \r\n\r\n  As PostgreSQL superuser (such as postgres), add the following to\r\n  postgresql.conf or any included configuration files. \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.role = 'auditor' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload \r\n\r\n  Next in PostgreSQL create a new role: \r\n\r\n  postgres=# CREATE ROLE auditor; \r\n  postgres=# GRANT select(password) ON public.stig_audit_example TO auditor; \r\n\r\n  Note: This role is created with NOLOGIN privileges by default. \r\n\r\n  Now any SELECT on the column password will be logged: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"SELECT password FROM public.stig_audit_example;\\\" \r\n  $ cat ${PGDATA?}/pg_log/<latest_log> \r\n  < 2016-01-28 16:46:09.038 UTC bob postgres: >LOG: AUDIT:\r\n  OBJECT,6,1,READ,SELECT,TABLE,public.stig_audit_example,SELECT password FROM\r\n  stig_audit_example;,<none> \r\n\r\n  ## Change Configurations During A Specific Timeframe \r\n\r\n  Deploy PostgreSQL that allows audit configuration changes to take effect within\r\n  the timeframe required by the application owner and without involving actions\r\n  or events that the application owner rules unacceptable.\r\n\r\n  Crontab can be used to do this. \r\n\r\n    For a specific audit role: \r\n    \r\n    # Grant specific audit privileges to an auditing role at 5 PM every day of the\r\n    week, month, year at the 0 minute mark. \r\n    0 5 * * * postgres /usr/bin/psql -c \\\"GRANT select(password) ON\r\n    public.stig_audit_example TO auditor;\\\" \r\n    # Revoke specific audit privileges to an auditing role at 5 PM every day of the\r\n    week, month, year at the 0 minute mark. \r\n    0 17 * * * postgres /usr/bin/psql -c \\\"REVOKE select(password) ON\r\n    public.stig_audit_example FROM auditor;\\\"\"\r\n  \r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73025.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000336451,"start_time":"2020-06-19T18:47:42+00:00","message":"expected \"\" to include \"pgaudit\""}]},{"id":"V-73027","title":"PostgreSQL must require users to reauthenticate when\n  organization-defined circumstances or situations require reauthentication.","desc":"The DoD standard for authentication of an interactive user is the\n  presentation of a Common Access Card (CAC) or other physical token bearing a\n  valid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled\n  with a Personal Identification Number (PIN) to be entered by the user at the\n  beginning of each session and whenever reauthentication is required.\n\n  Without reauthentication, users may access resources or perform tasks for\n  which they do not have authorization.\n\n  When applications provide the capability to change security roles or\n  escalate the functional capability of the application, it is critical the user\n  re-authenticate.\n\n  In addition to the reauthentication requirements associated with session\n  locks, organizations may require reauthentication of individuals and/or devices\n  in other situations, including (but not limited to) the following circumstances:\n\n      (i) When authenticators change;\n      (ii) When roles change;\n      (iii) When security categorized information systems change;\n      (iv) When the execution of privileged functions occurs;\n      (v) After a fixed period of time; or\n      (vi) Periodically.\n\n  Within the DoD, the minimum circumstances requiring reauthentication are\n  privilege escalation and role changes.","descriptions":[{"label":"default","data":"The DoD standard for authentication of an interactive user is the\n  presentation of a Common Access Card (CAC) or other physical token bearing a\n  valid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled\n  with a Personal Identification Number (PIN) to be entered by the user at the\n  beginning of each session and whenever reauthentication is required.\n\n  Without reauthentication, users may access resources or perform tasks for\n  which they do not have authorization.\n\n  When applications provide the capability to change security roles or\n  escalate the functional capability of the application, it is critical the user\n  re-authenticate.\n\n  In addition to the reauthentication requirements associated with session\n  locks, organizations may require reauthentication of individuals and/or devices\n  in other situations, including (but not limited to) the following circumstances:\n\n      (i) When authenticators change;\n      (ii) When roles change;\n      (iii) When security categorized information systems change;\n      (iv) When the execution of privileged functions occurs;\n      (v) After a fixed period of time; or\n      (vi) Periodically.\n\n  Within the DoD, the minimum circumstances requiring reauthentication are\n  privilege escalation and role changes."},{"label":"check","data":"Determine all situations where a user must re-authenticate. Check\n  if the mechanisms that handle such situations use the following SQL:\n\n  To make a single user re-authenticate, the following must be present:\n\n  SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\n\n  To make all users re-authenticate, run the following:\n\n  SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'\n\n  If the provided SQL does not force re-authentication, this is a finding."},{"label":"fix","data":"Modify and/or configure PostgreSQL and related applications and\n  tools so that users are always required to reauthenticate when changing role or\n  escalating privileges.\n\n  To make a single user re-authenticate, the following must be present:\n\n  SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\n\n  To make all users re-authenticate, the following must be present:\n\n  SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000389-DB-000372","gid":"V-73027","rid":"SV-87679r1_rule","stig_id":"PGS9-00-010100","fix_id":"F-79473r1_fix","cci":["CCI-002038"],"nist":["IA-11","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73027\" do\r\n  title \"PostgreSQL must require users to reauthenticate when\r\n  organization-defined circumstances or situations require reauthentication.\"\r\n  desc  \"The DoD standard for authentication of an interactive user is the\r\n  presentation of a Common Access Card (CAC) or other physical token bearing a\r\n  valid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled\r\n  with a Personal Identification Number (PIN) to be entered by the user at the\r\n  beginning of each session and whenever reauthentication is required.\r\n\r\n  Without reauthentication, users may access resources or perform tasks for\r\n  which they do not have authorization.\r\n\r\n  When applications provide the capability to change security roles or\r\n  escalate the functional capability of the application, it is critical the user\r\n  re-authenticate.\r\n\r\n  In addition to the reauthentication requirements associated with session\r\n  locks, organizations may require reauthentication of individuals and/or devices\r\n  in other situations, including (but not limited to) the following circumstances:\r\n\r\n      (i) When authenticators change;\r\n      (ii) When roles change;\r\n      (iii) When security categorized information systems change;\r\n      (iv) When the execution of privileged functions occurs;\r\n      (v) After a fixed period of time; or\r\n      (vi) Periodically.\r\n\r\n  Within the DoD, the minimum circumstances requiring reauthentication are\r\n  privilege escalation and role changes.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000389-DB-000372\"\r\n  tag \"gid\": \"V-73027\"\r\n  tag \"rid\": \"SV-87679r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-010100\"\r\n  tag \"fix_id\": \"F-79473r1_fix\"\r\n  tag \"cci\": [\"CCI-002038\"]\r\n  tag \"nist\": [\"IA-11\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Determine all situations where a user must re-authenticate. Check\r\n  if the mechanisms that handle such situations use the following SQL:\r\n\r\n  To make a single user re-authenticate, the following must be present:\r\n\r\n  SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\r\n\r\n  To make all users re-authenticate, run the following:\r\n\r\n  SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'\r\n\r\n  If the provided SQL does not force re-authentication, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Modify and/or configure PostgreSQL and related applications and\r\n  tools so that users are always required to reauthenticate when changing role or\r\n  escalating privileges.\r\n\r\n  To make a single user re-authenticate, the following must be present:\r\n\r\n  SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\r\n\r\n  To make all users re-authenticate, the following must be present:\r\n\r\n  SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'\"\r\n\r\n  describe \"This can not be automated\" do\r\n    skip \"manually perform this test\"\r\n  end \r\nend\r\n","source_location":{"line":1,"ref":"controls/V-73027.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"This can not be automated","run_time":6.549e-06,"start_time":"2020-06-19T18:47:42+00:00","resource":"","skip_message":"manually perform this test"}]},{"id":"V-73029","title":"PostgreSQL must enforce authorized access to all PKI private keys\n  stored/utilized by PostgreSQL.","desc":"The DoD standard for authentication is DoD-approved PKI certificates.\n  PKI certificate-based authentication is performed by requiring the certificate\n  holder to cryptographically prove possession of the corresponding private key.\n\n  If the private key is stolen, an attacker can use the private key(s) to\n  impersonate the certificate holder. In cases where PostgreSQL-stored private\n  keys are used to authenticate PostgreSQL to the system’s clients, loss of the\n  corresponding private keys would allow an attacker to successfully perform\n  undetected man-in-the-middle attacks against PostgreSQL system and its clients.\n\n  Both the holder of a digital certificate and the issuing authority must\n  take careful measures to protect the corresponding private key. Private keys\n  should always be generated and protected in FIPS 140-2 validated cryptographic\n  modules.\n\n  All access to the private key(s) of PostgreSQL must be restricted to\n  authorized and authenticated users. If unauthorized users have access to one or\n  more of PostgreSQL's private keys, an attacker could gain access to the key(s)\n  and use them to impersonate the database on the network or otherwise perform\n  unauthorized actions.","descriptions":[{"label":"default","data":"The DoD standard for authentication is DoD-approved PKI certificates.\n  PKI certificate-based authentication is performed by requiring the certificate\n  holder to cryptographically prove possession of the corresponding private key.\n\n  If the private key is stolen, an attacker can use the private key(s) to\n  impersonate the certificate holder. In cases where PostgreSQL-stored private\n  keys are used to authenticate PostgreSQL to the system’s clients, loss of the\n  corresponding private keys would allow an attacker to successfully perform\n  undetected man-in-the-middle attacks against PostgreSQL system and its clients.\n\n  Both the holder of a digital certificate and the issuing authority must\n  take careful measures to protect the corresponding private key. Private keys\n  should always be generated and protected in FIPS 140-2 validated cryptographic\n  modules.\n\n  All access to the private key(s) of PostgreSQL must be restricted to\n  authorized and authenticated users. If unauthorized users have access to one or\n  more of PostgreSQL's private keys, an attacker could gain access to the key(s)\n  and use them to impersonate the database on the network or otherwise perform\n  unauthorized actions."},{"label":"check","data":"First, as the database administrator (shown here as\n  \"postgres\"), verify the following settings:\n\n  Note: If no specific directory given before the filename, the files are stored\n  in PGDATA.\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl_ca_file\"\n  $ psql -c \"SHOW ssl_cert_file\"\n  $ psql -c \"SHOW ssl_crl_file\"\n  $ psql -c \"SHOW ssl_key_file\"\n\n  If the directory these files are stored in is not protected, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Store all PostgreSQL PKI private keys in a FIPS 140-2-validated cryptographic\n  module.\n\n  Ensure access to PostgreSQL PKI private keys is restricted to only\n  authenticated and authorized users. \n\n  PostgreSQL private key(s) can be stored in $PGDATA directory, which is only\n  accessible by the database owner (usually postgres, DBA) user. Do not allow\n  access to this system account to unauthorized users. \n\n  To put the keys in a different directory, as the database administrator (shown\n  here as \"postgres\"), set the following settings to a protected directory: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  ssl_ca_file = \"/some/protected/directory/root.crt\" \n  ssl_crl_file = \"/some/protected/directory/root.crl\" \n  ssl_cert_file = \"/some/protected/directory/server.crt\" \n  ssl_key_file = \"/some/protected/directory/server.key\" \n\n  Now, as the system administrator, restart the server with the new\n  configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl restart postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} restart \n\n  For more information on configuring PostgreSQL to use SSL, see supplementary\n  content APPENDIX-G."}],"impact":0.7,"refs":[],"tags":{"severity":"high","gtitle":"SRG-APP-000176-DB-000068","gid":"V-73029","rid":"SV-87681r2_rule","stig_id":"PGS9-00-010200","fix_id":"F-79475r5_fix","cci":["CCI-000186"],"nist":["IA-5 (2) (b)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73029\" do\r\n  title \"PostgreSQL must enforce authorized access to all PKI private keys\r\n  stored/utilized by PostgreSQL.\"\r\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\r\n  PKI certificate-based authentication is performed by requiring the certificate\r\n  holder to cryptographically prove possession of the corresponding private key.\r\n\r\n  If the private key is stolen, an attacker can use the private key(s) to\r\n  impersonate the certificate holder. In cases where PostgreSQL-stored private\r\n  keys are used to authenticate PostgreSQL to the system’s clients, loss of the\r\n  corresponding private keys would allow an attacker to successfully perform\r\n  undetected man-in-the-middle attacks against PostgreSQL system and its clients.\r\n\r\n  Both the holder of a digital certificate and the issuing authority must\r\n  take careful measures to protect the corresponding private key. Private keys\r\n  should always be generated and protected in FIPS 140-2 validated cryptographic\r\n  modules.\r\n\r\n  All access to the private key(s) of PostgreSQL must be restricted to\r\n  authorized and authenticated users. If unauthorized users have access to one or\r\n  more of PostgreSQL's private keys, an attacker could gain access to the key(s)\r\n  and use them to impersonate the database on the network or otherwise perform\r\n  unauthorized actions.\"\r\n\r\n  impact 0.7\r\n  tag \"severity\": \"high\"\r\n  tag \"gtitle\": \"SRG-APP-000176-DB-000068\"\r\n  tag \"gid\": \"V-73029\"\r\n  tag \"rid\": \"SV-87681r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-010200\"\r\n  tag \"fix_id\": \"F-79475r5_fix\"\r\n  tag \"cci\": [\"CCI-000186\"]\r\n  tag \"nist\": [\"IA-5 (2) (b)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator (shown here as\r\n  \\\"postgres\\\"), verify the following settings:\r\n\r\n  Note: If no specific directory given before the filename, the files are stored\r\n  in PGDATA.\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW ssl_ca_file\\\"\r\n  $ psql -c \\\"SHOW ssl_cert_file\\\"\r\n  $ psql -c \\\"SHOW ssl_crl_file\\\"\r\n  $ psql -c \\\"SHOW ssl_key_file\\\"\r\n\r\n  If the directory these files are stored in is not protected, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Store all PostgreSQL PKI private keys in a FIPS 140-2-validated cryptographic\r\n  module.\r\n\r\n  Ensure access to PostgreSQL PKI private keys is restricted to only\r\n  authenticated and authorized users. \r\n\r\n  PostgreSQL private key(s) can be stored in $PGDATA directory, which is only\r\n  accessible by the database owner (usually postgres, DBA) user. Do not allow\r\n  access to this system account to unauthorized users. \r\n\r\n  To put the keys in a different directory, as the database administrator (shown\r\n  here as \\\"postgres\\\"), set the following settings to a protected directory: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  ssl_ca_file = \\\"/some/protected/directory/root.crt\\\" \r\n  ssl_crl_file = \\\"/some/protected/directory/root.crl\\\" \r\n  ssl_cert_file = \\\"/some/protected/directory/server.crt\\\" \r\n  ssl_key_file = \\\"/some/protected/directory/server.key\\\" \r\n\r\n  Now, as the system administrator, restart the server with the new\r\n  configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl restart postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} restart \r\n\r\n  For more information on configuring PostgreSQL to use SSL, see supplementary\r\n  content APPENDIX-G.\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  settings = %w(ssl_cert_file ssl_key_file ssl_ca_file ssl_crl_file)\r\n\r\n  settings.each do |setting|\r\n    file_query = sql.query(\"SHOW #{setting};\", [pg_db])\r\n    file = file_query.output\r\n\r\n    if file.empty?\r\n      name = ''\r\n      ext = ''\r\n\r\n      case setting\r\n      when /cert/\r\n        name = 'server'\r\n        ext = 'crt'\r\n      when /key/\r\n        name = 'server'\r\n        ext = 'key'\r\n      when /ca/\r\n        name = 'root'\r\n        ext = 'crt'\r\n      when /crl/\r\n        name = 'root'\r\n        ext = 'crl'\r\n      end\r\n\r\n      file = \"#{pg_data_dir}/#{name}.#{ext}\"\r\n    elsif File.dirname(file) == '.'\r\n      file = \"#{pg_data_dir}/#{file}\"\r\n    end\r\n\r\n    describe file(file) do\r\n      it { should be_file }\r\n    end\r\n\r\n    directory = File.dirname(file)\r\n\r\n    describe directory(directory) do\r\n      its('owner') { should match /root|#{pg_owner}/ }\r\n      its('mode') { should cmp '0700' }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-73029.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"File /var/lib/pgsql/data/server.crt is expected to be file","run_time":0.44386376,"start_time":"2020-06-19T18:47:42+00:00","message":"expected `File /var/lib/pgsql/data/server.crt.file?` to return true, got false"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data owner is expected to match /root|postgres/","run_time":0.000195181,"start_time":"2020-06-19T18:47:43+00:00"},{"status":"failed","code_desc":"Directory /var/lib/pgsql/data mode is expected to cmp == \"0700\"","run_time":0.00023561,"start_time":"2020-06-19T18:47:43+00:00","message":"\nexpected: 0700\n     got: 0755\n\n(compared using `cmp` matcher)\n"},{"status":"failed","code_desc":"File /var/lib/pgsql/data/server.key is expected to be file","run_time":0.417459329,"start_time":"2020-06-19T18:47:43+00:00","message":"expected `File /var/lib/pgsql/data/server.key.file?` to return true, got false"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data owner is expected to match /root|postgres/","run_time":0.000307447,"start_time":"2020-06-19T18:47:43+00:00"},{"status":"failed","code_desc":"Directory /var/lib/pgsql/data mode is expected to cmp == \"0700\"","run_time":0.000363374,"start_time":"2020-06-19T18:47:43+00:00","message":"\nexpected: 0700\n     got: 0755\n\n(compared using `cmp` matcher)\n"},{"status":"failed","code_desc":"File /var/lib/pgsql/data/root.crt is expected to be file","run_time":0.404901399,"start_time":"2020-06-19T18:47:43+00:00","message":"expected `File /var/lib/pgsql/data/root.crt.file?` to return true, got false"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data owner is expected to match /root|postgres/","run_time":0.000303704,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"failed","code_desc":"Directory /var/lib/pgsql/data mode is expected to cmp == \"0700\"","run_time":0.000417605,"start_time":"2020-06-19T18:47:44+00:00","message":"\nexpected: 0700\n     got: 0755\n\n(compared using `cmp` matcher)\n"},{"status":"failed","code_desc":"File /var/lib/pgsql/data/root.crl is expected to be file","run_time":0.010761742,"start_time":"2020-06-19T18:47:44+00:00","message":"expected `File /var/lib/pgsql/data/root.crl.file?` to return true, got false"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data owner is expected to match /root|postgres/","run_time":0.000219208,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"failed","code_desc":"Directory /var/lib/pgsql/data mode is expected to cmp == \"0700\"","run_time":0.000342893,"start_time":"2020-06-19T18:47:44+00:00","message":"\nexpected: 0700\n     got: 0755\n\n(compared using `cmp` matcher)\n"}]},{"id":"V-72911","title":"PostgreSQL must isolate security functions from non-security\n  functions.","desc":"An isolation boundary provides access control and protects the\n  integrity of the hardware, software, and firmware that perform security\n  functions.\n\n  Security functions are the hardware, software, and/or firmware of the\n  information system responsible for enforcing the system security policy and\n  supporting the isolation of code and data on which the protection is based.\n\n  Developers and implementers can increase the assurance in security\n  functions by employing well-defined security policy models; structured,\n  disciplined, and rigorous hardware and software development techniques; and\n  sound system/security engineering principles.\n\n  Database Management Systems typically separate security functionality from\n  non-security functionality via separate databases or schemas. Database objects\n  or code implementing security functionality should not be commingled with\n  objects or code implementing application logic. When security and non-security\n  functionality are commingled, users who have access to non-security\n  functionality may be able to access security functionality.","descriptions":[{"label":"default","data":"An isolation boundary provides access control and protects the\n  integrity of the hardware, software, and firmware that perform security\n  functions.\n\n  Security functions are the hardware, software, and/or firmware of the\n  information system responsible for enforcing the system security policy and\n  supporting the isolation of code and data on which the protection is based.\n\n  Developers and implementers can increase the assurance in security\n  functions by employing well-defined security policy models; structured,\n  disciplined, and rigorous hardware and software development techniques; and\n  sound system/security engineering principles.\n\n  Database Management Systems typically separate security functionality from\n  non-security functionality via separate databases or schemas. Database objects\n  or code implementing security functionality should not be commingled with\n  objects or code implementing application logic. When security and non-security\n  functionality are commingled, users who have access to non-security\n  functionality may be able to access security functionality."},{"label":"check","data":"Check PostgreSQL settings to determine whether objects or code\n  implementing security functionality are located in a separate security domain,\n  such as a separate database or schema created specifically for security\n  functionality.\n\n  By default, all objects in pg_catalog and information_schema are owned by the\n  database administrator.\n\n  To check the access controls for those schemas, as the database administrator\n  (shown here as \"postgres\"), run the following commands to review the access\n  privileges granted on the data dictionary and security tables, views,\n  sequences, functions and trigger procedures:\n\n  $ sudo su - postgres\n  $ psql -x -c \"\\dp pg_catalog.*\"\n  $ psql -x -c \"\\dp information_schema.*\"\n\n  Repeat the \\dp statements for any additional schemas that contain locally\n  defined security objects.\n\n  Repeat using \\df+*.* to review ownership of PostgreSQL functions:\n\n  $ sudo su - postgres\n  $ psql -x -c \"\\df+ pg_catalog.*\"\n  $ psql -x -c \"\\df+ information_schema.*\"\n\n  Refer to the PostgreSQL online documentation for GRANT for help in interpreting\n  the Access Privileges column in the output from \\du. Note that an entry\n  starting with an equals sign indicates privileges granted to Public (all\n  users). By default, most of the tables and views in the pg_catalog and\n  information_schema schemas can be read by Public.\n\n  If any user besides the database administrator(s) is listed in access\n  privileges and not documented, this is a finding.\n\n  If security-related database objects or code are not kept separate, this is a\n  finding."},{"label":"fix","data":"Do not locate security-related database objects with application\n  tables or schema.\n\n  Review any site-specific applications security modules built into the database:\n  determine what schema they are located in and take appropriate action.\n\n  Do not grant access to pg_catalog or information_schema to anyone but the\n  database administrator(s). Access to the database administrator account(s) must\n  not be granted to anyone without official approval."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000233-DB-000124","gid":"V-72911","rid":"SV-87563r1_rule","stig_id":"PGS9-00-004000","fix_id":"F-79353r1_fix","cci":["CCI-001084"],"nist":["SC-3","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72911\" do\r\n  title \"PostgreSQL must isolate security functions from non-security\r\n  functions.\"\r\n  desc  \"An isolation boundary provides access control and protects the\r\n  integrity of the hardware, software, and firmware that perform security\r\n  functions.\r\n\r\n  Security functions are the hardware, software, and/or firmware of the\r\n  information system responsible for enforcing the system security policy and\r\n  supporting the isolation of code and data on which the protection is based.\r\n\r\n  Developers and implementers can increase the assurance in security\r\n  functions by employing well-defined security policy models; structured,\r\n  disciplined, and rigorous hardware and software development techniques; and\r\n  sound system/security engineering principles.\r\n\r\n  Database Management Systems typically separate security functionality from\r\n  non-security functionality via separate databases or schemas. Database objects\r\n  or code implementing security functionality should not be commingled with\r\n  objects or code implementing application logic. When security and non-security\r\n  functionality are commingled, users who have access to non-security\r\n  functionality may be able to access security functionality.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000233-DB-000124\"\r\n  tag \"gid\": \"V-72911\"\r\n  tag \"rid\": \"SV-87563r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-004000\"\r\n  tag \"fix_id\": \"F-79353r1_fix\"\r\n  tag \"cci\": [\"CCI-001084\"]\r\n  tag \"nist\": [\"SC-3\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Check PostgreSQL settings to determine whether objects or code\r\n  implementing security functionality are located in a separate security domain,\r\n  such as a separate database or schema created specifically for security\r\n  functionality.\r\n\r\n  By default, all objects in pg_catalog and information_schema are owned by the\r\n  database administrator.\r\n\r\n  To check the access controls for those schemas, as the database administrator\r\n  (shown here as \\\"postgres\\\"), run the following commands to review the access\r\n  privileges granted on the data dictionary and security tables, views,\r\n  sequences, functions and trigger procedures:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -x -c \\\"\\\\dp pg_catalog.*\\\"\r\n  $ psql -x -c \\\"\\\\dp information_schema.*\\\"\r\n\r\n  Repeat the \\\\dp statements for any additional schemas that contain locally\r\n  defined security objects.\r\n\r\n  Repeat using \\\\df+*.* to review ownership of PostgreSQL functions:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -x -c \\\"\\\\df+ pg_catalog.*\\\"\r\n  $ psql -x -c \\\"\\\\df+ information_schema.*\\\"\r\n\r\n  Refer to the PostgreSQL online documentation for GRANT for help in interpreting\r\n  the Access Privileges column in the output from \\\\du. Note that an entry\r\n  starting with an equals sign indicates privileges granted to Public (all\r\n  users). By default, most of the tables and views in the pg_catalog and\r\n  information_schema schemas can be read by Public.\r\n\r\n  If any user besides the database administrator(s) is listed in access\r\n  privileges and not documented, this is a finding.\r\n\r\n  If security-related database objects or code are not kept separate, this is a\r\n  finding.\"\r\n\r\n  desc \"fix\", \"Do not locate security-related database objects with application\r\n  tables or schema.\r\n\r\n  Review any site-specific applications security modules built into the database:\r\n  determine what schema they are located in and take appropriate action.\r\n\r\n  Do not grant access to pg_catalog or information_schema to anyone but the\r\n  database administrator(s). Access to the database administrator account(s) must\r\n  not be granted to anyone without official approval.\"\r\n\r\n  exceptions = \"#{pg_object_exceptions.map { |e| \"'#{e}'\" }.join(',')}\"\r\n  object_acl = \"^(((#{pg_owner}=[#{pg_object_granted_privileges}]+|\"\\\r\n    \"=[#{pg_object_public_privileges}]+)\\\\/\\\\w+,?)+|)$\"\r\n  schemas = ['pg_catalog', 'information_schema']\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  schemas.each do |schema|\r\n    objects_sql = \"SELECT n.nspname, c.relname, c.relkind, \"\\\r\n      \"pg_catalog.array_to_string(c.relacl, E',') FROM pg_catalog.pg_class c \"\\\r\n      \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\r\n      \"WHERE c.relkind IN ('r', 'v', 'm', 'S', 'f') \"\\\r\n      \"AND n.nspname ~ '^(#{schema})$' \"\\\r\n      \"AND pg_catalog.array_to_string(c.relacl, E',') !~ '#{object_acl}' \"\\\r\n      \"AND c.relname NOT IN (#{exceptions});\"\r\n\r\n    describe sql.query(objects_sql, [pg_db]) do\r\n      its('output') { should eq '' }\r\n    end\r\n\r\n    functions_sql = \"SELECT n.nspname, p.proname, \"\\\r\n      \"pg_catalog.pg_get_userbyid(n.nspowner) \"\\\r\n      \"FROM pg_catalog.pg_proc p \"\\\r\n      \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace \"\\\r\n      \"WHERE n.nspname ~ '^(#{schema})$' \"\\\r\n      \"AND pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}';\"\r\n\r\n    describe sql.query(functions_sql, [pg_db]) do\r\n      its('output') { should eq '' }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":17,"ref":"controls/V-72911.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SELECT n.nspname, c.relname, c.relkind, pg_catalog.array_to_string(c.relacl, E',') FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('r', 'v', 'm', 'S', 'f') AND n.nspname ~ '^(pg_catalog)$' AND pg_catalog.array_to_string(c.relacl, E',') !~ '^(((postgres=[arwDxt]+|=[r]+)\\/\\w+,?)+|)$' AND c.relname NOT IN ('pg_setting'); output is expected to eq \"\"","run_time":0.001822997,"start_time":"2020-06-19T18:47:44+00:00","message":"\nexpected: \"\"\n     got: \"pg_catalog|pg_statistic|r|postgres=arwdDxt/postgres\\npg_catalog|pg_type|r|=r/postgres,postgres=arwdD...ostgres=arwdDxt/postgres\\npg_catalog|pg_stat_user_functions|v|=r/postgres,postgres=arwdDxt/postgres\"\n\n(compared using ==)\n\nDiff:\n@@ -1 +1,111 @@\n+pg_catalog|pg_statistic|r|postgres=arwdDxt/postgres\n+pg_catalog|pg_type|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_authid|r|postgres=arwdDxt/postgres\n+pg_catalog|pg_shadow|v|postgres=arwdDxt/postgres\n+pg_catalog|pg_roles|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_settings|v|postgres=arwdDxt/postgres,=rw/postgres\n+pg_catalog|pg_file_settings|v|postgres=arwdDxt/postgres\n+pg_catalog|pg_config|v|postgres=arwdDxt/postgres\n+pg_catalog|pg_rules|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_user_mapping|r|postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_xact_user_functions|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_replication_origin_status|v|postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_archiver|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_bgwriter|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_attribute|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_proc|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_class|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_attrdef|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_constraint|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_inherits|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_index|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_operator|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_opfamily|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_opclass|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_am|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_amop|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_amproc|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_language|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_largeobject_metadata|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_aggregate|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_rewrite|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_progress_vacuum|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_user_mappings|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_largeobject|r|postgres=arwdDxt/postgres\n+pg_catalog|pg_trigger|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_event_trigger|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_description|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_cast|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_enum|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_namespace|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_conversion|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_depend|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_database|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_db_role_setting|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_tablespace|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_pltemplate|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_auth_members|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_shdepend|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_shdescription|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_ts_config|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_ts_config_map|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_ts_dict|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_ts_parser|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_ts_template|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_extension|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_foreign_data_wrapper|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_foreign_server|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_foreign_table|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_policy|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_replication_origin|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_default_acl|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_init_privs|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_seclabel|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_shseclabel|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_collation|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_range|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_transform|r|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_group|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_user|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_policies|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_views|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_tables|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_matviews|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_indexes|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stats|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_locks|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_cursors|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_available_extensions|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_available_extension_versions|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_prepared_xacts|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_prepared_statements|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_seclabels|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_xact_all_tables|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_timezone_abbrevs|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_timezone_names|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_sys_tables|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_all_tables|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_xact_sys_tables|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_user_tables|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_xact_user_tables|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_statio_all_tables|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_statio_sys_tables|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_statio_user_tables|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_all_indexes|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_sys_indexes|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_user_indexes|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_statio_all_indexes|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_statio_sys_indexes|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_statio_user_indexes|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_statio_all_sequences|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_statio_sys_sequences|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_statio_user_sequences|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_activity|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_replication|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_wal_receiver|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_ssl|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_replication_slots|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_database|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_database_conflicts|v|=r/postgres,postgres=arwdDxt/postgres\n+pg_catalog|pg_stat_user_functions|v|=r/postgres,postgres=arwdDxt/postgres\n"},{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, p.proname, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_proc p LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE n.nspname ~ '^(pg_catalog)$' AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'postgres'; output is expected to eq \"\"","run_time":0.000152794,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"failed","code_desc":"PostgreSQL query: SELECT n.nspname, c.relname, c.relkind, pg_catalog.array_to_string(c.relacl, E',') FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('r', 'v', 'm', 'S', 'f') AND n.nspname ~ '^(information_schema)$' AND pg_catalog.array_to_string(c.relacl, E',') !~ '^(((postgres=[arwDxt]+|=[r]+)\\/\\w+,?)+|)$' AND c.relname NOT IN ('pg_setting'); output is expected to eq \"\"","run_time":0.001090322,"start_time":"2020-06-19T18:47:44+00:00","message":"\nexpected: \"\"\n     got: \"information_schema|routine_privileges|v|postgres=arwdDxt/postgres,=r/postgres\\ninformation_schema|in...dDxt/postgres,=r/postgres\\ninformation_schema|user_mappings|v|postgres=arwdDxt/postgres,=r/postgres\"\n\n(compared using ==)\n\nDiff:\n@@ -1 +1,61 @@\n+information_schema|routine_privileges|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|information_schema_catalog_name|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|columns|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|applicable_roles|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|administrable_role_authorizations|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|key_column_usage|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|attributes|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|constraint_column_usage|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|character_sets|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|check_constraint_routine_usage|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|check_constraints|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|constraint_table_usage|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|collations|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|collation_character_set_applicability|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|column_domain_usage|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|domain_constraints|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|column_privileges|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|column_udt_usage|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|parameters|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|domain_udt_usage|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|domains|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|sequences|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|enabled_roles|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|referential_constraints|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|role_routine_grants|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|role_column_grants|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|schemata|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|routines|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|sql_features|r|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|sql_implementation_info|r|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|triggered_update_columns|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|sql_languages|r|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|sql_packages|r|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|view_table_usage|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|sql_sizing|r|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|triggers|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|sql_sizing_profiles|r|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|table_constraints|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|user_defined_types|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|table_privileges|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|udt_privileges|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|role_table_grants|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|tables|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|role_udt_grants|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|view_column_usage|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|usage_privileges|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|role_usage_grants|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|data_type_privileges|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|view_routine_usage|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|views|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|element_types|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|column_options|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|foreign_data_wrapper_options|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|foreign_data_wrappers|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|foreign_server_options|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|foreign_servers|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|foreign_table_options|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|foreign_tables|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|user_mapping_options|v|postgres=arwdDxt/postgres,=r/postgres\n+information_schema|user_mappings|v|postgres=arwdDxt/postgres,=r/postgres\n"},{"status":"passed","code_desc":"PostgreSQL query: SELECT n.nspname, p.proname, pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_proc p LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE n.nspname ~ '^(information_schema)$' AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'postgres'; output is expected to eq \"\"","run_time":0.000153011,"start_time":"2020-06-19T18:47:44+00:00"}]},{"id":"V-73033","title":"PostgreSQL must produce audit records containing sufficient\n  information to establish what type of events occurred.","desc":"Information system auditing capability is critical for accurate\n  forensic analysis. Without establishing what type of event occurred, it would\n  be difficult to establish, correlate, and investigate the events relating to an\n  incident or identify those responsible for one.\n\n  Audit record content that may be necessary to satisfy the requirement of\n  this policy includes, for example, time stamps, user/process identifiers, event\n  descriptions, success/fail indications, filenames involved, and access control\n  or flow control rules invoked.\n\n  Associating event types with detected events in the application and audit\n  logs provides a means of investigating an attack; recognizing resource\n  utilization or capacity thresholds; or identifying an improperly configured\n  application.\n\n  Database software is capable of a range of actions on data stored within\n  the database. It is important, for accurate forensic analysis, to know exactly\n  what actions were performed. This requires specific information regarding the\n  event type an audit record is referring to. If event type information is not\n  recorded and stored with the audit record, the record itself is of very limited\n  use.","descriptions":[{"label":"default","data":"Information system auditing capability is critical for accurate\n  forensic analysis. Without establishing what type of event occurred, it would\n  be difficult to establish, correlate, and investigate the events relating to an\n  incident or identify those responsible for one.\n\n  Audit record content that may be necessary to satisfy the requirement of\n  this policy includes, for example, time stamps, user/process identifiers, event\n  descriptions, success/fail indications, filenames involved, and access control\n  or flow control rules invoked.\n\n  Associating event types with detected events in the application and audit\n  logs provides a means of investigating an attack; recognizing resource\n  utilization or capacity thresholds; or identifying an improperly configured\n  application.\n\n  Database software is capable of a range of actions on data stored within\n  the database. It is important, for accurate forensic analysis, to know exactly\n  what actions were performed. This requires specific information regarding the\n  event type an audit record is referring to. If event type information is not\n  recorded and stored with the audit record, the record itself is of very limited\n  use."},{"label":"check","data":"As the database administrator (shown here as \"postgres\"),\n  verify the current log_line_prefix setting in postgresql.conf:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_line_prefix\"\n  \n  Verify that the current settings are appropriate for the organization.\n  \n  The following is what is possible for logged information:\n  \n  # %a = application name\n  # %u = user name\n  # %d = database name\n  # %r = remote host and port\n  # %h = remote host\n  # %p = process ID\n  # %t = timestamp without milliseconds\n  # %m = timestamp with milliseconds\n  # %i = command tag\n  # %e = SQL state\n  # %c = session ID\n  # %l = session line number\n  # %s = session start timestamp\n  # %v = virtual transaction ID\n  # %x = transaction ID (0 if none)\n  # %q = stop here in non-session\n  # processes\n  \n  If the audit record does not log events required by the organization, this is a\n  finding.\n  \n  Next, verify the current settings of log_connections and log_disconnections by\n  running the following SQL:\n  \n  $ psql -c \"SHOW log_connections\"\n  $ psql -c \"SHOW log_disconnections\"\n  \n  If both settings are off, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n  \n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n  \n  If logging is enabled the following configurations must be made to log\n  connections, date/time, username and session identifier. \n\n  First, edit the postgresql.conf file as a privileged user: \n  \n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  \n  Edit the following parameters based on the organization's needs (minimum\n  requirements are as follows): \n  \n  log_connections = on \n  log_disconnections = on \n  log_line_prefix = '< %m %u %d %c: >' \n  \n  Now, as the system administrator, reload the server with the new configuration: \n  \n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n  \n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000095-DB-000039","gid":"V-73033","rid":"SV-87685r2_rule","stig_id":"PGS9-00-010400","fix_id":"F-79479r2_fix","cci":["CCI-000130"],"nist":["AU-3","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73033\" do\r\n  title \"PostgreSQL must produce audit records containing sufficient\r\n  information to establish what type of events occurred.\"\r\n  desc  \"Information system auditing capability is critical for accurate\r\n  forensic analysis. Without establishing what type of event occurred, it would\r\n  be difficult to establish, correlate, and investigate the events relating to an\r\n  incident or identify those responsible for one.\r\n\r\n  Audit record content that may be necessary to satisfy the requirement of\r\n  this policy includes, for example, time stamps, user/process identifiers, event\r\n  descriptions, success/fail indications, filenames involved, and access control\r\n  or flow control rules invoked.\r\n\r\n  Associating event types with detected events in the application and audit\r\n  logs provides a means of investigating an attack; recognizing resource\r\n  utilization or capacity thresholds; or identifying an improperly configured\r\n  application.\r\n\r\n  Database software is capable of a range of actions on data stored within\r\n  the database. It is important, for accurate forensic analysis, to know exactly\r\n  what actions were performed. This requires specific information regarding the\r\n  event type an audit record is referring to. If event type information is not\r\n  recorded and stored with the audit record, the record itself is of very limited\r\n  use.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000095-DB-000039\"\r\n  tag \"gid\": \"V-73033\"\r\n  tag \"rid\": \"SV-87685r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-010400\"\r\n  tag \"fix_id\": \"F-79479r2_fix\"\r\n  tag \"cci\": [\"CCI-000130\"]\r\n  tag \"nist\": [\"AU-3\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator (shown here as \\\"postgres\\\"),\r\n  verify the current log_line_prefix setting in postgresql.conf:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_line_prefix\\\"\r\n  \r\n  Verify that the current settings are appropriate for the organization.\r\n  \r\n  The following is what is possible for logged information:\r\n  \r\n  # %a = application name\r\n  # %u = user name\r\n  # %d = database name\r\n  # %r = remote host and port\r\n  # %h = remote host\r\n  # %p = process ID\r\n  # %t = timestamp without milliseconds\r\n  # %m = timestamp with milliseconds\r\n  # %i = command tag\r\n  # %e = SQL state\r\n  # %c = session ID\r\n  # %l = session line number\r\n  # %s = session start timestamp\r\n  # %v = virtual transaction ID\r\n  # %x = transaction ID (0 if none)\r\n  # %q = stop here in non-session\r\n  # processes\r\n  \r\n  If the audit record does not log events required by the organization, this is a\r\n  finding.\r\n  \r\n  Next, verify the current settings of log_connections and log_disconnections by\r\n  running the following SQL:\r\n  \r\n  $ psql -c \\\"SHOW log_connections\\\"\r\n  $ psql -c \\\"SHOW log_disconnections\\\"\r\n  \r\n  If both settings are off, this is a finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n  \r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n  \r\n  If logging is enabled the following configurations must be made to log\r\n  connections, date/time, username and session identifier. \r\n\r\n  First, edit the postgresql.conf file as a privileged user: \r\n  \r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  \r\n  Edit the following parameters based on the organization's needs (minimum\r\n  requirements are as follows): \r\n  \r\n  log_connections = on \r\n  log_disconnections = on \r\n  log_line_prefix = '< %m %u %d %c: >' \r\n  \r\n  Now, as the system administrator, reload the server with the new configuration: \r\n  \r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n  \r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n  \r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  log_line_prefix_escapes = %w(%m %u %d %s)\r\n  log_line_prefix_escapes.each do |escape|\r\n    describe sql.query('SHOW log_line_prefix;', [pg_db]) do\r\n      its('output') { should include escape }\r\n    end\r\n  end\r\n\r\n  describe sql.query('SHOW log_connections;', [pg_db]) do\r\n    its('output') { should_not match /off|false/i }\r\n  end\r\n\r\n  describe sql.query('SHOW log_disconnections;', [pg_db]) do\r\n    its('output') { should_not match /off|false/i }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73033.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%m\"","run_time":0.000276891,"start_time":"2020-06-19T18:47:44+00:00","message":"expected \"%a %u %d %p %r %s %c\" to include \"%m\""},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%u\"","run_time":0.000164536,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%d\"","run_time":0.000152451,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%s\"","run_time":0.000166046,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_connections; output is expected not to match /off|false/i","run_time":0.00015231,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_disconnections; output is expected not to match /off|false/i","run_time":0.000130876,"start_time":"2020-06-19T18:47:44+00:00"}]},{"id":"V-73035","title":"PostgreSQL must implement cryptographic mechanisms preventing the\n  unauthorized disclosure of organization-defined information at rest on\n  organization-defined information system components.","desc":"PostgreSQLs handling data requiring \"data at rest\" protections must\n  employ cryptographic mechanisms to prevent unauthorized disclosure and\n  modification of the information at rest. These cryptographic mechanisms may be\n  native to PostgreSQL or implemented via additional software or operating\n  system/file system settings, as appropriate to the situation.\n\n  Selection of a cryptographic mechanism is based on the need to protect the\n  integrity of organizational information. The strength of the mechanism is\n  commensurate with the security category and/or classification of the\n  information. Organizations have the flexibility to either encrypt all\n  information on storage devices (i.e., full disk encryption) or encrypt specific\n  data structures (e.g., files, records, or fields).\n\n  The decision whether and what to encrypt rests with the data owner and is\n  also influenced by the physical measures taken to secure the equipment and\n  media on which the information resides.","descriptions":[{"label":"default","data":"PostgreSQLs handling data requiring \"data at rest\" protections must\n  employ cryptographic mechanisms to prevent unauthorized disclosure and\n  modification of the information at rest. These cryptographic mechanisms may be\n  native to PostgreSQL or implemented via additional software or operating\n  system/file system settings, as appropriate to the situation.\n\n  Selection of a cryptographic mechanism is based on the need to protect the\n  integrity of organizational information. The strength of the mechanism is\n  commensurate with the security category and/or classification of the\n  information. Organizations have the flexibility to either encrypt all\n  information on storage devices (i.e., full disk encryption) or encrypt specific\n  data structures (e.g., files, records, or fields).\n\n  The decision whether and what to encrypt rests with the data owner and is\n  also influenced by the physical measures taken to secure the equipment and\n  media on which the information resides."},{"label":"check","data":"To check if pgcrypto is installed on PostgreSQL, as a database\n  administrator (shown here as \"postgres\"), run the following command:\n\n  $ sudo su - postgres\n  $ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\n\n  If data in the database requires encryption and pgcrypto is not available, this\n  is a finding.\n\n  If a disk or filesystem requires encryption, ask the system owner, DBA, and SA\n  to demonstrate the use of filesystem and/or disk-level encryption. If this is\n  required and is not found, this is a finding."},{"label":"fix","data":"Configure PostgreSQL, operating system/file system, and additional\n  software as relevant, to provide the required level of cryptographic protection\n  for information requiring cryptographic protection against disclosure.\n\n  Secure the premises, equipment, and media to provide the required level of\n  physical protection.\n\n  The pgcrypto module provides cryptographic functions for PostgreSQL. See\n  supplementary content APPENDIX-E for documentation on installing pgcrypto.\n\n  With pgcrypto installed, it is possible to insert encrypted data into the\n  database:\n\n  INSERT INTO accounts(username, password) VALUES ('bob',\n  crypt('a_secure_password', gen_salt('md5')));"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000429-DB-000387","gid":"V-73035","rid":"SV-87687r1_rule","stig_id":"PGS9-00-010500","fix_id":"F-79481r1_fix","cci":["CCI-002476"],"nist":["SC-28 (1)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73035\" do\r\n  title \"PostgreSQL must implement cryptographic mechanisms preventing the\r\n  unauthorized disclosure of organization-defined information at rest on\r\n  organization-defined information system components.\"\r\n  desc  \"PostgreSQLs handling data requiring \\\"data at rest\\\" protections must\r\n  employ cryptographic mechanisms to prevent unauthorized disclosure and\r\n  modification of the information at rest. These cryptographic mechanisms may be\r\n  native to PostgreSQL or implemented via additional software or operating\r\n  system/file system settings, as appropriate to the situation.\r\n\r\n  Selection of a cryptographic mechanism is based on the need to protect the\r\n  integrity of organizational information. The strength of the mechanism is\r\n  commensurate with the security category and/or classification of the\r\n  information. Organizations have the flexibility to either encrypt all\r\n  information on storage devices (i.e., full disk encryption) or encrypt specific\r\n  data structures (e.g., files, records, or fields).\r\n\r\n  The decision whether and what to encrypt rests with the data owner and is\r\n  also influenced by the physical measures taken to secure the equipment and\r\n  media on which the information resides.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000429-DB-000387\"\r\n  tag \"gid\": \"V-73035\"\r\n  tag \"rid\": \"SV-87687r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-010500\"\r\n  tag \"fix_id\": \"F-79481r1_fix\"\r\n  tag \"cci\": [\"CCI-002476\"]\r\n  tag \"nist\": [\"SC-28 (1)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"To check if pgcrypto is installed on PostgreSQL, as a database\r\n  administrator (shown here as \\\"postgres\\\"), run the following command:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SELECT * FROM pg_available_extensions where name='pgcrypto'\\\"\r\n\r\n\r\n  If data in the database requires encryption and pgcrypto is not available, this\r\n  is a finding.\r\n\r\n  If a disk or filesystem requires encryption, ask the system owner, DBA, and SA\r\n  to demonstrate the use of filesystem and/or disk-level encryption. If this is\r\n  required and is not found, this is a finding.\"\r\n\r\n  desc \"fix\", \"Configure PostgreSQL, operating system/file system, and additional\r\n  software as relevant, to provide the required level of cryptographic protection\r\n  for information requiring cryptographic protection against disclosure.\r\n\r\n  Secure the premises, equipment, and media to provide the required level of\r\n  physical protection.\r\n\r\n  The pgcrypto module provides cryptographic functions for PostgreSQL. See\r\n  supplementary content APPENDIX-E for documentation on installing pgcrypto.\r\n\r\n  With pgcrypto installed, it is possible to insert encrypted data into the\r\n  database:\r\n\r\n  INSERT INTO accounts(username, password) VALUES ('bob',\r\n  crypt('a_secure_password', gen_salt('md5')));\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  pgcrypto_sql = \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\r\n\r\n  describe sql.query(pgcrypto_sql, [pg_db]) do\r\n    its('output') { should_not eq '' }\r\n  end\r\nend\r\n","source_location":{"line":9,"ref":"controls/V-73035.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SELECT * FROM pg_available_extensions where name='pgcrypto' output is expected not to eq \"\"","run_time":0.000140386,"start_time":"2020-06-19T18:47:44+00:00"}]},{"id":"V-73037","title":"PostgreSQL must invalidate session identifiers upon user logout or\n  other session termination.","desc":"Captured sessions can be reused in \"replay\" attacks. This\n  requirement limits the ability of adversaries to capture and continue to employ\n  previously valid session IDs.\n\n  This requirement focuses on communications protection for PostgreSQL\n  session rather than for the network packet. The intent of this control is to\n  establish grounds for confidence at each end of a communications session in the\n  ongoing identity of the other party and in the validity of the information\n  being transmitted.\n\n  Session IDs are tokens generated by PostgreSQLs to uniquely identify a\n  user's (or process's) session. DBMSs will make access decisions and execute\n  logic based on the session ID.\n\n  Unique session IDs help to reduce predictability of said identifiers.\n  Unique session IDs address man-in-the-middle attacks, including session\n  hijacking or insertion of false information into a session. If the attacker is\n  unable to identify or guess the session information related to pending\n  application traffic, they will have more difficulty in hijacking the session or\n  otherwise manipulating valid sessions.\n\n  When a user logs out, or when any other session termination event occurs,\n  PostgreSQL must terminate the user session(s) to minimize the potential for\n  sessions to be hijacked.","descriptions":[{"label":"default","data":"Captured sessions can be reused in \"replay\" attacks. This\n  requirement limits the ability of adversaries to capture and continue to employ\n  previously valid session IDs.\n\n  This requirement focuses on communications protection for PostgreSQL\n  session rather than for the network packet. The intent of this control is to\n  establish grounds for confidence at each end of a communications session in the\n  ongoing identity of the other party and in the validity of the information\n  being transmitted.\n\n  Session IDs are tokens generated by PostgreSQLs to uniquely identify a\n  user's (or process's) session. DBMSs will make access decisions and execute\n  logic based on the session ID.\n\n  Unique session IDs help to reduce predictability of said identifiers.\n  Unique session IDs address man-in-the-middle attacks, including session\n  hijacking or insertion of false information into a session. If the attacker is\n  unable to identify or guess the session information related to pending\n  application traffic, they will have more difficulty in hijacking the session or\n  otherwise manipulating valid sessions.\n\n  When a user logs out, or when any other session termination event occurs,\n  PostgreSQL must terminate the user session(s) to minimize the potential for\n  sessions to be hijacked."},{"label":"check","data":"As the database administrator (shown here as \"postgres\"), run\n  the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW tcp_keepalives_idle\"\n  $ psql -c \"SHOW tcp_keepalives_interval\"\n  $ psql -c \"SHOW tcp_keepalives_count\"\n  $ psql -c \"SHOW statement_timeout\"\n\n  If these settings are not set, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  As the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi $PGDATA/postgresql.conf \n\n  Set the following parameters to organizational requirements: \n\n  statement_timeout = 10000 #milliseconds \n  tcp_keepalives_idle = 10 # seconds \n  tcp_keepalives_interval = 10 # seconds \n  tcp_keepalives_count = 10 \n\n  Now, as the system administrator, restart the server with the new\n  configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl restart postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} restart"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000220-DB-000149","gid":"V-73037","rid":"SV-87689r2_rule","stig_id":"PGS9-00-010600","fix_id":"F-79483r2_fix","cci":["CCI-001185"],"nist":["SC-23 (1)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73037\" do\r\n  title \"PostgreSQL must invalidate session identifiers upon user logout or\r\n  other session termination.\"\r\n  desc  \"Captured sessions can be reused in \\\"replay\\\" attacks. This\r\n  requirement limits the ability of adversaries to capture and continue to employ\r\n  previously valid session IDs.\r\n\r\n  This requirement focuses on communications protection for PostgreSQL\r\n  session rather than for the network packet. The intent of this control is to\r\n  establish grounds for confidence at each end of a communications session in the\r\n  ongoing identity of the other party and in the validity of the information\r\n  being transmitted.\r\n\r\n  Session IDs are tokens generated by PostgreSQLs to uniquely identify a\r\n  user's (or process's) session. DBMSs will make access decisions and execute\r\n  logic based on the session ID.\r\n\r\n  Unique session IDs help to reduce predictability of said identifiers.\r\n  Unique session IDs address man-in-the-middle attacks, including session\r\n  hijacking or insertion of false information into a session. If the attacker is\r\n  unable to identify or guess the session information related to pending\r\n  application traffic, they will have more difficulty in hijacking the session or\r\n  otherwise manipulating valid sessions.\r\n\r\n  When a user logs out, or when any other session termination event occurs,\r\n  PostgreSQL must terminate the user session(s) to minimize the potential for\r\n  sessions to be hijacked.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000220-DB-000149\"\r\n  tag \"gid\": \"V-73037\"\r\n  tag \"rid\": \"SV-87689r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-010600\"\r\n  tag \"fix_id\": \"F-79483r2_fix\"\r\n  tag \"cci\": [\"CCI-001185\"]\r\n  tag \"nist\": [\"SC-23 (1)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator (shown here as \\\"postgres\\\"), run\r\n  the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW tcp_keepalives_idle\\\"\r\n  $ psql -c \\\"SHOW tcp_keepalives_interval\\\"\r\n  $ psql -c \\\"SHOW tcp_keepalives_count\\\"\r\n  $ psql -c \\\"SHOW statement_timeout\\\"\r\n\r\n  If these settings are not set, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), edit\r\n  postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi $PGDATA/postgresql.conf \r\n\r\n  Set the following parameters to organizational requirements: \r\n\r\n  statement_timeout = 10000 #milliseconds \r\n  tcp_keepalives_idle = 10 # seconds \r\n  tcp_keepalives_interval = 10 # seconds \r\n  tcp_keepalives_count = 10 \r\n\r\n  Now, as the system administrator, restart the server with the new\r\n  configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl restart postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} restart\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW tcp_keepalives_idle;', [pg_db]) do\r\n    its('output') { should_not cmp 0 }\r\n  end\r\n\r\n  describe sql.query('SHOW tcp_keepalives_interval;', [pg_db]) do\r\n    its('output') { should_not cmp 0 }\r\n  end\r\n\r\n  describe sql.query('SHOW tcp_keepalives_count;', [pg_db]) do\r\n    its('output') { should_not cmp 0 }\r\n  end\r\n\r\n  describe sql.query('SHOW statement_timeout;', [pg_db]) do\r\n    its('output') { should_not cmp 0 }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73037.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SHOW tcp_keepalives_idle; output is expected not to cmp == 0","run_time":0.000260603,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW tcp_keepalives_interval; output is expected not to cmp == 0","run_time":0.000220639,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW tcp_keepalives_count; output is expected not to cmp == 0","run_time":0.00022276,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"failed","code_desc":"PostgreSQL query: SHOW statement_timeout; output is expected not to cmp == 0","run_time":0.00025703,"start_time":"2020-06-19T18:47:44+00:00","message":"\nexpected: 0\n     got: 0\n\n(compared using `cmp` matcher)\n"}]},{"id":"V-73041","title":"PostgreSQL must produce audit records containing time stamps to\n  establish when the events occurred.","desc":"Information system auditing capability is critical for accurate\n  forensic analysis. Without establishing when events occurred, it is impossible\n  to establish, correlate, and investigate the events relating to an incident.\n\n  In order to compile an accurate risk assessment and provide forensic\n  analysis, it is essential for security personnel to know the date and time when\n  events occurred.\n\n  Associating the date and time with detected events in the application and\n  audit logs provides a means of investigating an attack; recognizing resource\n  utilization or capacity thresholds; or identifying an improperly configured\n  application.\n\n  Database software is capable of a range of actions on data stored within\n  the database. It is important, for accurate forensic analysis, to know exactly\n  when specific actions were performed. This requires the date and time an audit\n  record is referring to. If date and time information is not recorded and stored\n  with the audit record, the record itself is of very limited use.","descriptions":[{"label":"default","data":"Information system auditing capability is critical for accurate\n  forensic analysis. Without establishing when events occurred, it is impossible\n  to establish, correlate, and investigate the events relating to an incident.\n\n  In order to compile an accurate risk assessment and provide forensic\n  analysis, it is essential for security personnel to know the date and time when\n  events occurred.\n\n  Associating the date and time with detected events in the application and\n  audit logs provides a means of investigating an attack; recognizing resource\n  utilization or capacity thresholds; or identifying an improperly configured\n  application.\n\n  Database software is capable of a range of actions on data stored within\n  the database. It is important, for accurate forensic analysis, to know exactly\n  when specific actions were performed. This requires the date and time an audit\n  record is referring to. If date and time information is not recorded and stored\n  with the audit record, the record itself is of very limited use."},{"label":"check","data":"As the database administrator (usually postgres), run the\n  following SQL: \n\n  $ sudo su - postgres \n  $ psql -c \"SHOW log_line_prefix\" \n\n  If the query result does not contain \"%m\", this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Logging must be enabled in order to capture timestamps. To ensure that logging\n  is enabled, review supplementary content APPENDIX-C for instructions on\n  enabling logging. \n\n  If logging is enabled the following configurations must be made to log events\n  with timestamps: \n\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add %m to log_line_prefix to enable timestamps with milliseconds: \n\n  log_line_prefix = '< %m >' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000096-DB-000040","gid":"V-73041","rid":"SV-87693r2_rule","stig_id":"PGS9-00-011100","fix_id":"F-79487r2_fix","cci":["CCI-000131"],"nist":["AU-3","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73041\" do\r\n  title \"PostgreSQL must produce audit records containing time stamps to\r\n  establish when the events occurred.\"\r\n  desc  \"Information system auditing capability is critical for accurate\r\n  forensic analysis. Without establishing when events occurred, it is impossible\r\n  to establish, correlate, and investigate the events relating to an incident.\r\n\r\n  In order to compile an accurate risk assessment and provide forensic\r\n  analysis, it is essential for security personnel to know the date and time when\r\n  events occurred.\r\n\r\n  Associating the date and time with detected events in the application and\r\n  audit logs provides a means of investigating an attack; recognizing resource\r\n  utilization or capacity thresholds; or identifying an improperly configured\r\n  application.\r\n\r\n  Database software is capable of a range of actions on data stored within\r\n  the database. It is important, for accurate forensic analysis, to know exactly\r\n  when specific actions were performed. This requires the date and time an audit\r\n  record is referring to. If date and time information is not recorded and stored\r\n  with the audit record, the record itself is of very limited use.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000096-DB-000040\"\r\n  tag \"gid\": \"V-73041\"\r\n  tag \"rid\": \"SV-87693r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-011100\"\r\n  tag \"fix_id\": \"F-79487r2_fix\"\r\n  tag \"cci\": [\"CCI-000131\"]\r\n  tag \"nist\": [\"AU-3\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator (usually postgres), run the\r\n  following SQL: \r\n\r\n  $ sudo su - postgres \r\n  $ psql -c \\\"SHOW log_line_prefix\\\" \r\n\r\n  If the query result does not contain \\\"%m\\\", this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Logging must be enabled in order to capture timestamps. To ensure that logging\r\n  is enabled, review supplementary content APPENDIX-C for instructions on\r\n  enabling logging. \r\n\r\n  If logging is enabled the following configurations must be made to log events\r\n  with timestamps: \r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), edit\r\n  postgresql.conf: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add %m to log_line_prefix to enable timestamps with milliseconds: \r\n\r\n  log_line_prefix = '< %m >' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  log_line_prefix_escapes = ['%m']\r\n\r\n  log_line_prefix_escapes.each do |escape|\r\n    describe sql.query('SHOW log_line_prefix;', [pg_db]) do\r\n      its('output') { should include escape }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73041.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%m\"","run_time":0.00028914,"start_time":"2020-06-19T18:47:44+00:00","message":"expected \"%a %u %d %p %r %s %c\" to include \"%m\""}]},{"id":"V-73031","title":"PostgreSQL must only accept end entity certificates issued by DoD PKI\n  or DoD-approved PKI Certification Authorities (CAs) for the establishment of\n  all encrypted sessions.","desc":"Only DoD-approved external PKIs have been evaluated to ensure that\n  they have security controls and identity vetting procedures in place which are\n  sufficient for DoD systems to rely on the identity asserted in the certificate.\n  PKIs lacking sufficient security controls and identity vetting procedures risk\n  being compromised and issuing certificates that enable adversaries to\n  impersonate legitimate users.\n\n  The authoritative list of DoD-approved PKIs is published at\n  http://iase.disa.mil/pki-pke/interoperability.\n\n  This requirement focuses on communications protection for PostgreSQL\n  session rather than for the network packet.","descriptions":[{"label":"default","data":"Only DoD-approved external PKIs have been evaluated to ensure that\n  they have security controls and identity vetting procedures in place which are\n  sufficient for DoD systems to rely on the identity asserted in the certificate.\n  PKIs lacking sufficient security controls and identity vetting procedures risk\n  being compromised and issuing certificates that enable adversaries to\n  impersonate legitimate users.\n\n  The authoritative list of DoD-approved PKIs is published at\n  http://iase.disa.mil/pki-pke/interoperability.\n\n  This requirement focuses on communications protection for PostgreSQL\n  session rather than for the network packet."},{"label":"check","data":"As the database administrator (shown here as \"postgres\"),\n  verify the following setting in postgresql.conf:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl_ca_file\"\n  $ psql -c \"SHOW ssl_cert_file\"\n\n  If the database is not configured to used approved certificates, this is a\n  finding."},{"label":"fix","data":"Revoke trust in any certificates not issued by a DoD-approved\n  certificate authority.\n\n  Configure PostgreSQL to accept only DoD and DoD-approved PKI end-entity\n  certificates.\n\n  To configure PostgreSQL to accept approved CA's, see the official PostgreSQL\n  documentation: http://www.postgresql.org/docs/current/static/ssl-tcp.html\n\n  For more information on configuring PostgreSQL to use SSL, see supplementary\n  content APPENDIX-G."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000427-DB-000385","gid":"V-73031","rid":"SV-87683r1_rule","stig_id":"PGS9-00-010300","fix_id":"F-79477r1_fix","cci":["CCI-002470"],"nist":["SC-23 (5)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73031\" do\r\n  title \"PostgreSQL must only accept end entity certificates issued by DoD PKI\r\n  or DoD-approved PKI Certification Authorities (CAs) for the establishment of\r\n  all encrypted sessions.\"\r\n  desc  \"Only DoD-approved external PKIs have been evaluated to ensure that\r\n  they have security controls and identity vetting procedures in place which are\r\n  sufficient for DoD systems to rely on the identity asserted in the certificate.\r\n  PKIs lacking sufficient security controls and identity vetting procedures risk\r\n  being compromised and issuing certificates that enable adversaries to\r\n  impersonate legitimate users.\r\n\r\n  The authoritative list of DoD-approved PKIs is published at\r\n  http://iase.disa.mil/pki-pke/interoperability.\r\n\r\n  This requirement focuses on communications protection for PostgreSQL\r\n  session rather than for the network packet.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000427-DB-000385\"\r\n  tag \"gid\": \"V-73031\"\r\n  tag \"rid\": \"SV-87683r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-010300\"\r\n  tag \"fix_id\": \"F-79477r1_fix\"\r\n  tag \"cci\": [\"CCI-002470\"]\r\n  tag \"nist\": [\"SC-23 (5)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator (shown here as \\\"postgres\\\"),\r\n  verify the following setting in postgresql.conf:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW ssl_ca_file\\\"\r\n  $ psql -c \\\"SHOW ssl_cert_file\\\"\r\n\r\n  If the database is not configured to used approved certificates, this is a\r\n  finding.\"\r\n\r\n  desc \"fix\", \"Revoke trust in any certificates not issued by a DoD-approved\r\n  certificate authority.\r\n\r\n  Configure PostgreSQL to accept only DoD and DoD-approved PKI end-entity\r\n  certificates.\r\n\r\n  To configure PostgreSQL to accept approved CA's, see the official PostgreSQL\r\n  documentation: http://www.postgresql.org/docs/current/static/ssl-tcp.html\r\n\r\n  For more information on configuring PostgreSQL to use SSL, see supplementary\r\n  content APPENDIX-G.\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n\r\n  describe sql.query('SHOW ssl_cert_file;', [pg_db]) do\r\n    its('output') { should_not eq '' }\r\n  end\r\nend\r\n","source_location":{"line":9,"ref":"controls/V-73031.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SHOW ssl_cert_file; output is expected not to eq \"\"","run_time":0.000142514,"start_time":"2020-06-19T18:47:44+00:00"}]},{"id":"V-73047","title":"PostgreSQL must maintain the authenticity of communications sessions\n  by guarding against man-in-the-middle attacks that guess at Session ID values.","desc":"One class of man-in-the-middle, or session hijacking, attack involves\n  the adversary guessing at valid session identifiers based on patterns in\n  identifiers already known.\n\n  The preferred technique for thwarting guesses at Session IDs is the\n  generation of unique session identifiers using a FIPS 140-2 approved random\n  number generator.\n\n  However, it is recognized that available PostgreSQL products do not all\n  implement the preferred technique yet may have other protections against\n  session hijacking. Therefore, other techniques are acceptable, provided they\n  are demonstrated to be effective.","descriptions":[{"label":"default","data":"One class of man-in-the-middle, or session hijacking, attack involves\n  the adversary guessing at valid session identifiers based on patterns in\n  identifiers already known.\n\n  The preferred technique for thwarting guesses at Session IDs is the\n  generation of unique session identifiers using a FIPS 140-2 approved random\n  number generator.\n\n  However, it is recognized that available PostgreSQL products do not all\n  implement the preferred technique yet may have other protections against\n  session hijacking. Therefore, other techniques are acceptable, provided they\n  are demonstrated to be effective."},{"label":"check","data":"To check if PostgreSQL is configured to use ssl, as the database\n  administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl\"\n\n  If this is not set to on, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n  \n  To configure PostgreSQL to use SSL, as a database owner (shown here as\n  \"postgres\"), edit postgresql.conf: \n  \n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  \n  Add the following parameter: \n  \n  ssl = on \n  \n  Now, as the system administrator, reload the server with the new configuration: \n  \n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n  \n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload \n  \n  For more information on configuring PostgreSQL to use SSL, see supplementary\n  content APPENDIX-G. \n  \n  For further SSL configurations, see the official documentation:\n  https://www.postgresql.org/docs/current/static/ssl-tcp.html"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000224-DB-000384","gid":"V-73047","rid":"SV-87699r2_rule","stig_id":"PGS9-00-011400","fix_id":"F-79493r2_fix","cci":["CCI-001188"],"nist":["SC-23 (3)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73047\" do\r\n  title \"PostgreSQL must maintain the authenticity of communications sessions\r\n  by guarding against man-in-the-middle attacks that guess at Session ID values.\"\r\n  desc  \"One class of man-in-the-middle, or session hijacking, attack involves\r\n  the adversary guessing at valid session identifiers based on patterns in\r\n  identifiers already known.\r\n\r\n  The preferred technique for thwarting guesses at Session IDs is the\r\n  generation of unique session identifiers using a FIPS 140-2 approved random\r\n  number generator.\r\n\r\n  However, it is recognized that available PostgreSQL products do not all\r\n  implement the preferred technique yet may have other protections against\r\n  session hijacking. Therefore, other techniques are acceptable, provided they\r\n  are demonstrated to be effective.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000224-DB-000384\"\r\n  tag \"gid\": \"V-73047\"\r\n  tag \"rid\": \"SV-87699r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-011400\"\r\n  tag \"fix_id\": \"F-79493r2_fix\"\r\n  tag \"cci\": [\"CCI-001188\"]\r\n  tag \"nist\": [\"SC-23 (3)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"To check if PostgreSQL is configured to use ssl, as the database\r\n  administrator (shown here as \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW ssl\\\"\r\n\r\n  If this is not set to on, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n  \r\n  To configure PostgreSQL to use SSL, as a database owner (shown here as\r\n  \\\"postgres\\\"), edit postgresql.conf: \r\n  \r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  \r\n  Add the following parameter: \r\n  \r\n  ssl = on \r\n  \r\n  Now, as the system administrator, reload the server with the new configuration: \r\n  \r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n  \r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload \r\n  \r\n  For more information on configuring PostgreSQL to use SSL, see supplementary\r\n  content APPENDIX-G. \r\n  \r\n  For further SSL configurations, see the official documentation:\r\n  https://www.postgresql.org/docs/current/static/ssl-tcp.html\"\r\n  \r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW ssl;', [pg_db]) do\r\n    its('output') { should match /on|true/i }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73047.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW ssl; output is expected to match /on|true/i","run_time":0.00049552,"start_time":"2020-06-19T18:47:44+00:00","message":"expected \"off\" to match /on|true/i\nDiff:\n@@ -1,2 +1,2 @@\n-/on|true/i\n+\"off\"\n"}]},{"id":"V-73051","title":"PostgreSQL must automatically terminate a user session after\n  organization-defined conditions or trigger events requiring session disconnect.","desc":"This addresses the termination of user-initiated logical sessions in\n  contrast to the termination of network connections that are associated with\n  communications sessions (i.e., network disconnect). A logical session (for\n  local, network, and remote access) is initiated whenever a user (or process\n  acting on behalf of a user) accesses an organizational information system. Such\n  user sessions can be terminated (and thus terminate user access) without\n  terminating network sessions.\n\n  Session termination ends all processes associated with a user's logical\n  session except those batch processes/jobs that are specifically created by the\n  user (i.e., session owner) to continue after the session is terminated.\n\n  Conditions or trigger events requiring automatic session termination can\n  include, for example, organization-defined periods of user inactivity, targeted\n  responses to certain types of incidents, and time-of-day restrictions on\n  information system use.\n\n  This capability is typically reserved for specific cases where the system\n  owner, data owner, or organization requires additional assurance.","descriptions":[{"label":"default","data":"This addresses the termination of user-initiated logical sessions in\n  contrast to the termination of network connections that are associated with\n  communications sessions (i.e., network disconnect). A logical session (for\n  local, network, and remote access) is initiated whenever a user (or process\n  acting on behalf of a user) accesses an organizational information system. Such\n  user sessions can be terminated (and thus terminate user access) without\n  terminating network sessions.\n\n  Session termination ends all processes associated with a user's logical\n  session except those batch processes/jobs that are specifically created by the\n  user (i.e., session owner) to continue after the session is terminated.\n\n  Conditions or trigger events requiring automatic session termination can\n  include, for example, organization-defined periods of user inactivity, targeted\n  responses to certain types of incidents, and time-of-day restrictions on\n  information system use.\n\n  This capability is typically reserved for specific cases where the system\n  owner, data owner, or organization requires additional assurance."},{"label":"check","data":"Review system documentation to obtain the organization's\n  definition of circumstances requiring automatic session termination. If the\n  documentation explicitly states that such termination is not required or is\n  prohibited, this is not a finding.\n\n  If the documentation requires automatic session termination, but PostgreSQL is\n  not configured accordingly, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to automatically terminate a user session\n  after organization-defined conditions or trigger events requiring session\n  termination. \n\n  Examples follow. \n\n  ### Change a role to nologin and disconnect the user \n\n  ALTER ROLE '<username>' NOLOGIN; \n  SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE\n  usename='<usename>'; \n\n  ### Disconnecting users during a specific time range \n  See supplementary content APPENDIX-A for a bash script for this example. \n\n  The script found in APPENDIX-A using the -l command can disable all users with\n  rolcanlogin=t from logging in. The script keeps track of who it disables in a\n  .restore_login file. After the specified time is over, the same script can be\n  run with the -r command to restore all login connections.  \n\n  This script would be added to a cron job: \n\n  # lock at 5 am every day of the week, month, year at the 0 minute mark. \n  0 5 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -l \n  # restore at 5 pm every day of the week, month, year at the 0 minute mark. \n  0 17 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -r"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000295-DB-000305","gid":"V-73051","rid":"SV-87703r2_rule","stig_id":"PGS9-00-011600","fix_id":"F-79497r2_fix","cci":["CCI-002361"],"nist":["AC-12","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73051\" do\r\n  title \"PostgreSQL must automatically terminate a user session after\r\n  organization-defined conditions or trigger events requiring session disconnect.\"\r\n  desc  \"This addresses the termination of user-initiated logical sessions in\r\n  contrast to the termination of network connections that are associated with\r\n  communications sessions (i.e., network disconnect). A logical session (for\r\n  local, network, and remote access) is initiated whenever a user (or process\r\n  acting on behalf of a user) accesses an organizational information system. Such\r\n  user sessions can be terminated (and thus terminate user access) without\r\n  terminating network sessions.\r\n\r\n  Session termination ends all processes associated with a user's logical\r\n  session except those batch processes/jobs that are specifically created by the\r\n  user (i.e., session owner) to continue after the session is terminated.\r\n\r\n  Conditions or trigger events requiring automatic session termination can\r\n  include, for example, organization-defined periods of user inactivity, targeted\r\n  responses to certain types of incidents, and time-of-day restrictions on\r\n  information system use.\r\n\r\n  This capability is typically reserved for specific cases where the system\r\n  owner, data owner, or organization requires additional assurance.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000295-DB-000305\"\r\n  tag \"gid\": \"V-73051\"\r\n  tag \"rid\": \"SV-87703r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-011600\"\r\n  tag \"fix_id\": \"F-79497r2_fix\"\r\n  tag \"cci\": [\"CCI-002361\"]\r\n  tag \"nist\": [\"AC-12\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review system documentation to obtain the organization's\r\n  definition of circumstances requiring automatic session termination. If the\r\n  documentation explicitly states that such termination is not required or is\r\n  prohibited, this is not a finding.\r\n\r\n  If the documentation requires automatic session termination, but PostgreSQL is\r\n  not configured accordingly, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Configure PostgreSQL to automatically terminate a user session\r\n  after organization-defined conditions or trigger events requiring session\r\n  termination. \r\n\r\n  Examples follow. \r\n\r\n  ### Change a role to nologin and disconnect the user \r\n\r\n  ALTER ROLE '<username>' NOLOGIN; \r\n  SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE\r\n  usename='<usename>'; \r\n\r\n  ### Disconnecting users during a specific time range \r\n  See supplementary content APPENDIX-A for a bash script for this example. \r\n\r\n  The script found in APPENDIX-A using the -l command can disable all users with\r\n  rolcanlogin=t from logging in. The script keeps track of who it disables in a\r\n  .restore_login file. After the specified time is over, the same script can be\r\n  run with the -r command to restore all login connections.  \r\n\r\n  This script would be added to a cron job: \r\n\r\n  # lock at 5 am every day of the week, month, year at the 0 minute mark. \r\n  0 5 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -l \r\n  # restore at 5 pm every day of the week, month, year at the 0 minute mark. \r\n  0 17 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -r\"\r\n\r\n  describe \"Check if organization's definition of circumstances requiring automatic session termination is met\" do\r\n    skip \"If the documentation requires automatic session termination, but PostgreSQL is not configured accordingly, this is a finding\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-73051.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Check if organization's definition of circumstances requiring automatic session termination is met","run_time":8.298e-06,"start_time":"2020-06-19T18:47:44+00:00","resource":"","skip_message":"If the documentation requires automatic session termination, but PostgreSQL is not configured accordingly, this is a finding"}]},{"id":"V-73053","title":"PostgreSQL must prevent non-privileged users from executing privileged\n  functions, to include disabling, circumventing, or altering implemented\n  security safeguards/countermeasures.","desc":"Preventing non-privileged users from executing privileged functions\n  mitigates the risk that unauthorized individuals or processes may gain\n  unnecessary access to information or privileges.\n\n  System documentation should include a definition of the functionality\n  considered privileged.\n\n  Depending on circumstances, privileged functions can include, for example,\n  establishing accounts, performing system integrity checks, or administering\n  cryptographic key management activities. Non-privileged users are individuals\n  that do not possess appropriate authorizations. Circumventing intrusion\n  detection and prevention mechanisms or malicious code protection mechanisms are\n  examples of privileged functions that require protection from non-privileged\n  users.\n\n  A privileged function in PostgreSQL/database context is any operation that\n  modifies the structure of the database, its built-in logic, or its security\n  settings. This would include all Data Definition Language (DDL) statements and\n  all security-related statements. In an SQL environment, it encompasses, but is\n  not necessarily limited to:\n\n      CREATE\n      ALTER\n      DROP\n      GRANT\n      REVOKE\n\n      There may also be Data Manipulation Language (DML) statements that, subject\n  to context, should be regarded as privileged. Possible examples include:\n\n      TRUNCATE TABLE;\n      DELETE, or\n      DELETE affecting more than n rows, for some n, or\n      DELETE without a WHERE clause;\n\n      UPDATE or\n      UPDATE affecting more than n rows, for some n, or\n      UPDATE without a WHERE clause;\n\n      any SELECT, INSERT, UPDATE, or DELETE to an application-defined security\n  table executed by other than a security principal.\n\n  Depending on the capabilities of PostgreSQL and the design of the database\n  and associated applications, the prevention of unauthorized use of privileged\n  functions may be achieved by means of DBMS security features, database\n  triggers, other mechanisms, or a combination of these.\n\n  However, the use of procedural languages within PostgreSQL, such as pl/R\n  and pl/Python, introduce security risk. Any user on the PostgreSQL who is\n  granted access to pl/R or pl/Python is able to run UDFs to escalate privileges\n  and perform unintended functions. Procedural languages such as pl/Perl and\n  pl/Java have \"untrusted\" mode of operation, which do not allow a\n  non-privileged PostgreSQL user to escalate privileges or perform actions as a\n  database administrator.","descriptions":[{"label":"default","data":"Preventing non-privileged users from executing privileged functions\n  mitigates the risk that unauthorized individuals or processes may gain\n  unnecessary access to information or privileges.\n\n  System documentation should include a definition of the functionality\n  considered privileged.\n\n  Depending on circumstances, privileged functions can include, for example,\n  establishing accounts, performing system integrity checks, or administering\n  cryptographic key management activities. Non-privileged users are individuals\n  that do not possess appropriate authorizations. Circumventing intrusion\n  detection and prevention mechanisms or malicious code protection mechanisms are\n  examples of privileged functions that require protection from non-privileged\n  users.\n\n  A privileged function in PostgreSQL/database context is any operation that\n  modifies the structure of the database, its built-in logic, or its security\n  settings. This would include all Data Definition Language (DDL) statements and\n  all security-related statements. In an SQL environment, it encompasses, but is\n  not necessarily limited to:\n\n      CREATE\n      ALTER\n      DROP\n      GRANT\n      REVOKE\n\n      There may also be Data Manipulation Language (DML) statements that, subject\n  to context, should be regarded as privileged. Possible examples include:\n\n      TRUNCATE TABLE;\n      DELETE, or\n      DELETE affecting more than n rows, for some n, or\n      DELETE without a WHERE clause;\n\n      UPDATE or\n      UPDATE affecting more than n rows, for some n, or\n      UPDATE without a WHERE clause;\n\n      any SELECT, INSERT, UPDATE, or DELETE to an application-defined security\n  table executed by other than a security principal.\n\n  Depending on the capabilities of PostgreSQL and the design of the database\n  and associated applications, the prevention of unauthorized use of privileged\n  functions may be achieved by means of DBMS security features, database\n  triggers, other mechanisms, or a combination of these.\n\n  However, the use of procedural languages within PostgreSQL, such as pl/R\n  and pl/Python, introduce security risk. Any user on the PostgreSQL who is\n  granted access to pl/R or pl/Python is able to run UDFs to escalate privileges\n  and perform unintended functions. Procedural languages such as pl/Perl and\n  pl/Java have \"untrusted\" mode of operation, which do not allow a\n  non-privileged PostgreSQL user to escalate privileges or perform actions as a\n  database administrator."},{"label":"check","data":"Review the system documentation to obtain the definition of the\n  PostgreSQL functionality considered privileged in the context of the system in\n  question.\n\n  Review the PostgreSQL security configuration and/or other means used to protect\n  privileged functionality from unauthorized use.\n\n  If the configuration does not protect all of the actions defined as privileged,\n  this is a finding.\n\n  If PostgreSQL instance uses procedural languages, such as pl/Python or pl/R,\n  without AO authorization, this is a finding."},{"label":"fix","data":"Configure PostgreSQL security to protect all privileged\n  functionality.\n\n  If pl/R and pl/Python are used, document their intended use, document users\n  that have access to pl/R and pl/Python, as well as their business use case,\n  such as data-analytics or data-mining. Because of the risks associated with\n  using pl/R and pl/Python, their use must have AO risk acceptance.\n  \n  To remove unwanted extensions, use:\n  \n  DROP EXTENSION <extension_name>\n  \n  To remove unwanted privileges from a role, use the REVOKE command.\n  \n  See the PostgreSQL documentation for more details:\n  http://www.postgresql.org/docs/current/static/sql-revoke.html"}],"impact":0.7,"refs":[],"tags":{"severity":"high","gtitle":"SRG-APP-000340-DB-000304","gid":"V-73053","rid":"SV-87705r1_rule","stig_id":"PGS9-00-011700","fix_id":"F-79499r1_fix","cci":["CCI-002235"],"nist":["AC-6 (10)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73053\" do\r\n  title \"PostgreSQL must prevent non-privileged users from executing privileged\r\n  functions, to include disabling, circumventing, or altering implemented\r\n  security safeguards/countermeasures.\"\r\n  desc  \"Preventing non-privileged users from executing privileged functions\r\n  mitigates the risk that unauthorized individuals or processes may gain\r\n  unnecessary access to information or privileges.\r\n\r\n  System documentation should include a definition of the functionality\r\n  considered privileged.\r\n\r\n  Depending on circumstances, privileged functions can include, for example,\r\n  establishing accounts, performing system integrity checks, or administering\r\n  cryptographic key management activities. Non-privileged users are individuals\r\n  that do not possess appropriate authorizations. Circumventing intrusion\r\n  detection and prevention mechanisms or malicious code protection mechanisms are\r\n  examples of privileged functions that require protection from non-privileged\r\n  users.\r\n\r\n  A privileged function in PostgreSQL/database context is any operation that\r\n  modifies the structure of the database, its built-in logic, or its security\r\n  settings. This would include all Data Definition Language (DDL) statements and\r\n  all security-related statements. In an SQL environment, it encompasses, but is\r\n  not necessarily limited to:\r\n\r\n      CREATE\r\n      ALTER\r\n      DROP\r\n      GRANT\r\n      REVOKE\r\n\r\n      There may also be Data Manipulation Language (DML) statements that, subject\r\n  to context, should be regarded as privileged. Possible examples include:\r\n\r\n      TRUNCATE TABLE;\r\n      DELETE, or\r\n      DELETE affecting more than n rows, for some n, or\r\n      DELETE without a WHERE clause;\r\n\r\n      UPDATE or\r\n      UPDATE affecting more than n rows, for some n, or\r\n      UPDATE without a WHERE clause;\r\n\r\n      any SELECT, INSERT, UPDATE, or DELETE to an application-defined security\r\n  table executed by other than a security principal.\r\n\r\n  Depending on the capabilities of PostgreSQL and the design of the database\r\n  and associated applications, the prevention of unauthorized use of privileged\r\n  functions may be achieved by means of DBMS security features, database\r\n  triggers, other mechanisms, or a combination of these.\r\n\r\n  However, the use of procedural languages within PostgreSQL, such as pl/R\r\n  and pl/Python, introduce security risk. Any user on the PostgreSQL who is\r\n  granted access to pl/R or pl/Python is able to run UDFs to escalate privileges\r\n  and perform unintended functions. Procedural languages such as pl/Perl and\r\n  pl/Java have \\\"untrusted\\\" mode of operation, which do not allow a\r\n  non-privileged PostgreSQL user to escalate privileges or perform actions as a\r\n  database administrator.\"\r\n\r\n  impact 0.7\r\n  tag \"severity\": \"high\"\r\n  tag \"gtitle\": \"SRG-APP-000340-DB-000304\"\r\n  tag \"gid\": \"V-73053\"\r\n  tag \"rid\": \"SV-87705r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-011700\"\r\n  tag \"fix_id\": \"F-79499r1_fix\"\r\n  tag \"cci\": [\"CCI-002235\"]\r\n  tag \"nist\": [\"AC-6 (10)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review the system documentation to obtain the definition of the\r\n  PostgreSQL functionality considered privileged in the context of the system in\r\n  question.\r\n\r\n  Review the PostgreSQL security configuration and/or other means used to protect\r\n  privileged functionality from unauthorized use.\r\n\r\n  If the configuration does not protect all of the actions defined as privileged,\r\n  this is a finding.\r\n\r\n  If PostgreSQL instance uses procedural languages, such as pl/Python or pl/R,\r\n  without AO authorization, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Configure PostgreSQL security to protect all privileged\r\n  functionality.\r\n\r\n  If pl/R and pl/Python are used, document their intended use, document users\r\n  that have access to pl/R and pl/Python, as well as their business use case,\r\n  such as data-analytics or data-mining. Because of the risks associated with\r\n  using pl/R and pl/Python, their use must have AO risk acceptance.\r\n  \r\n  To remove unwanted extensions, use:\r\n  \r\n  DROP EXTENSION <extension_name>\r\n  \r\n  To remove unwanted privileges from a role, use the REVOKE command.\r\n  \r\n  See the PostgreSQL documentation for more details:\r\n  http://www.postgresql.org/docs/current/static/sql-revoke.html\"\r\n\r\n  describe \"Review the system documentation to obtain the definition of the PostgreSQL functionality considered privileged in the context of the system in question.\" do\r\n  skip \"If the configuration does not protect all of the actions defined as privileged, this is a finding.\"\r\n  skip \"If PostgreSQL instance uses procedural languages, such as pl/Python or pl/R, without AO authorization, this is a finding.\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-73053.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Review the system documentation to obtain the definition of the PostgreSQL functionality considered privileged in the context of the system in question.","run_time":5.582e-06,"start_time":"2020-06-19T18:47:44+00:00","resource":"","skip_message":"If the configuration does not protect all of the actions defined as privileged, this is a finding."},{"status":"skipped","code_desc":"Review the system documentation to obtain the definition of the PostgreSQL functionality considered privileged in the context of the system in question.","run_time":5.105e-06,"start_time":"2020-06-19T18:47:44+00:00","resource":"","skip_message":"If PostgreSQL instance uses procedural languages, such as pl/Python or pl/R, without AO authorization, this is a finding."}]},{"id":"V-73055","title":"PostgreSQL must map the PKI-authenticated identity to an associated\n  user account.","desc":"The DoD standard for authentication is DoD-approved PKI certificates.\n  Once a PKI certificate has been validated, it must be mapped to PostgreSQL user\n  account for the authenticated identity to be meaningful to PostgreSQL and\n  useful for authorization decisions.","descriptions":[{"label":"default","data":"The DoD standard for authentication is DoD-approved PKI certificates.\n  Once a PKI certificate has been validated, it must be mapped to PostgreSQL user\n  account for the authenticated identity to be meaningful to PostgreSQL and\n  useful for authorization decisions."},{"label":"check","data":"The cn (Common Name) attribute of the certificate will be\n  compared to the requested database user name, and if they match the login will\n  be allowed.\n\n  To check the cn of the certificate, using openssl, do the following:\n\n  $ openssl x509 -noout -subject -in client_cert\n\n  If the cn does not match the users listed in PostgreSQL and no user mapping is\n  used, this is a finding.\n\n  User name mapping can be used to allow cn to be different from the database\n  user name. If User Name Maps are used, run the following as the database\n  administrator (shown here as \"postgres\"), to get a list of maps used for\n  authentication:\n\n  $ sudo su - postgres\n  $ grep \"map\" ${PGDATA?}/pg_hba.conf\n\n  With the names of the maps used, check those maps against the user name\n  mappings in pg_ident.conf:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_ident.conf\n\n  If user accounts are not being mapped to authenticated identities, this is a\n  finding.\n\n  If the cn and the username mapping do not match, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to map authenticated identities directly to\n  PostgreSQL user accounts.\n\n  For information on configuring PostgreSQL to use SSL, see supplementary content\n  APPENDIX-G."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000177-DB-000069","gid":"V-73055","rid":"SV-87707r1_rule","stig_id":"PGS9-00-011800","fix_id":"F-79501r1_fix","cci":["CCI-000187"],"nist":["IA-5 (2) (c)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73055\" do\r\n  title \"PostgreSQL must map the PKI-authenticated identity to an associated\r\n  user account.\"\r\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\r\n  Once a PKI certificate has been validated, it must be mapped to PostgreSQL user\r\n  account for the authenticated identity to be meaningful to PostgreSQL and\r\n  useful for authorization decisions.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000177-DB-000069\"\r\n  tag \"gid\": \"V-73055\"\r\n  tag \"rid\": \"SV-87707r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-011800\"\r\n  tag \"fix_id\": \"F-79501r1_fix\"\r\n  tag \"cci\": [\"CCI-000187\"]\r\n  tag \"nist\": [\"IA-5 (2) (c)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"The cn (Common Name) attribute of the certificate will be\r\n  compared to the requested database user name, and if they match the login will\r\n  be allowed.\r\n\r\n  To check the cn of the certificate, using openssl, do the following:\r\n\r\n  $ openssl x509 -noout -subject -in client_cert\r\n\r\n  If the cn does not match the users listed in PostgreSQL and no user mapping is\r\n  used, this is a finding.\r\n\r\n  User name mapping can be used to allow cn to be different from the database\r\n  user name. If User Name Maps are used, run the following as the database\r\n  administrator (shown here as \\\"postgres\\\"), to get a list of maps used for\r\n  authentication:\r\n\r\n  $ sudo su - postgres\r\n  $ grep \\\"map\\\" ${PGDATA?}/pg_hba.conf\r\n\r\n  With the names of the maps used, check those maps against the user name\r\n  mappings in pg_ident.conf:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_ident.conf\r\n\r\n  If user accounts are not being mapped to authenticated identities, this is a\r\n  finding.\r\n\r\n  If the cn and the username mapping do not match, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Configure PostgreSQL to map authenticated identities directly to\r\n  PostgreSQL user accounts.\r\n\r\n  For information on configuring PostgreSQL to use SSL, see supplementary content\r\n  APPENDIX-G.\"\r\n\r\n  describe \"The cn  attribute of the certificate will be compared to the requested database user name, and if they match the login will be allowed.\" do\r\n    skip \"If the cn and the username mapping do not match, this is a finding.\"\r\n    skip \"If the cn does not match the users listed in PostgreSQL and no user mapping is used, this is a finding.\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-73055.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"The cn  attribute of the certificate will be compared to the requested database user name, and if they match the login will be allowed.","run_time":5.454e-06,"start_time":"2020-06-19T18:47:44+00:00","resource":"","skip_message":"If the cn and the username mapping do not match, this is a finding."},{"status":"skipped","code_desc":"The cn  attribute of the certificate will be compared to the requested database user name, and if they match the login will be allowed.","run_time":4.924e-06,"start_time":"2020-06-19T18:47:44+00:00","resource":"","skip_message":"If the cn does not match the users listed in PostgreSQL and no user mapping is used, this is a finding."}]},{"id":"V-73057","title":"Database contents must be protected from unauthorized and unintended\n  information transfer by enforcement of a data-transfer policy.","desc":"Applications, including PostgreSQL, must prevent unauthorized and\n  unintended information transfer via shared system resources.  \n\n  Data used for the development and testing of applications often involves\n  copying data from production. It is important that specific procedures exist\n  for this process, to include the conditions under which such transfer may take\n  place, where the copies may reside, and the rules for ensuring sensitive data\n  are not exposed. \n\n  Copies of sensitive data must not be misplaced or left in a temporary\n  location without the proper controls.","descriptions":[{"label":"default","data":"Applications, including PostgreSQL, must prevent unauthorized and\n  unintended information transfer via shared system resources.  \n\n  Data used for the development and testing of applications often involves\n  copying data from production. It is important that specific procedures exist\n  for this process, to include the conditions under which such transfer may take\n  place, where the copies may reside, and the rules for ensuring sensitive data\n  are not exposed. \n\n  Copies of sensitive data must not be misplaced or left in a temporary\n  location without the proper controls."},{"label":"check","data":"Review the procedures for the refreshing of development/test data\n  from production.\n\n  Review any scripts or code that exists for the movement of production data to\n  development/test systems, or to any other location or for any other purpose.\n\n  Verify that copies of production data are not left in unprotected locations.\n\n  If the code that exists for data movement does not comply with the\n  organization-defined data transfer policy and/or fails to remove any copies of\n  production data from unprotected locations, this is a finding."},{"label":"fix","data":"Modify any code used for moving data from production to\n  development/test systems to comply with the organization-defined data transfer\n  policy, and to ensure copies of production data are not left in unsecured\n  locations."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000243-DB-000128","gid":"V-73057","rid":"SV-87709r2_rule","stig_id":"PGS9-00-011900","fix_id":"F-79503r1_fix","cci":["CCI-001090"],"nist":["SC-4","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73057\" do\r\n  title \"Database contents must be protected from unauthorized and unintended\r\n  information transfer by enforcement of a data-transfer policy.\"\r\n  desc  \"Applications, including PostgreSQL, must prevent unauthorized and\r\n  unintended information transfer via shared system resources.  \r\n\r\n  Data used for the development and testing of applications often involves\r\n  copying data from production. It is important that specific procedures exist\r\n  for this process, to include the conditions under which such transfer may take\r\n  place, where the copies may reside, and the rules for ensuring sensitive data\r\n  are not exposed. \r\n\r\n  Copies of sensitive data must not be misplaced or left in a temporary\r\n  location without the proper controls.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000243-DB-000128\"\r\n  tag \"gid\": \"V-73057\"\r\n  tag \"rid\": \"SV-87709r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-011900\"\r\n  tag \"fix_id\": \"F-79503r1_fix\"\r\n  tag \"cci\": [\"CCI-001090\"]\r\n  tag \"nist\": [\"SC-4\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review the procedures for the refreshing of development/test data\r\n  from production.\r\n\r\n  Review any scripts or code that exists for the movement of production data to\r\n  development/test systems, or to any other location or for any other purpose.\r\n\r\n  Verify that copies of production data are not left in unprotected locations.\r\n\r\n  If the code that exists for data movement does not comply with the\r\n  organization-defined data transfer policy and/or fails to remove any copies of\r\n  production data from unprotected locations, this is a finding.\"\r\n\r\n  desc \"fix\", \"Modify any code used for moving data from production to\r\n  development/test systems to comply with the organization-defined data transfer\r\n  policy, and to ensure copies of production data are not left in unsecured\r\n  locations.\"\r\n\r\n  describe \"Review the procedures for the refreshing of development/test data from production.\" do\r\n    skip \"If code for data movement does not comply with the organization-defined data transfer policy and/or fails to remove any copies of production data from unprotected locations, this is a finding.\"\r\n  end\r\nend\r\n","source_location":{"line":1,"ref":"controls/V-73057.rb"},"waiver_data":{},"results":[{"status":"skipped","code_desc":"Review the procedures for the refreshing of development/test data from production.","run_time":5.255e-06,"start_time":"2020-06-19T18:47:44+00:00","resource":"","skip_message":"If code for data movement does not comply with the organization-defined data transfer policy and/or fails to remove any copies of production data from unprotected locations, this is a finding."}]},{"id":"V-73059","title":"Access to database files must be limited to relevant processes and to\n  authorized, administrative users.","desc":"Applications, including PostgreSQL, must prevent unauthorized and\n  unintended information transfer via shared system resources. Permitting only\n  DBMS processes and authorized, administrative users to have access to the files\n  where the database resides helps ensure that those files are not shared\n  inappropriately and are not open to backdoor access and manipulation.","descriptions":[{"label":"default","data":"Applications, including PostgreSQL, must prevent unauthorized and\n  unintended information transfer via shared system resources. Permitting only\n  DBMS processes and authorized, administrative users to have access to the files\n  where the database resides helps ensure that those files are not shared\n  inappropriately and are not open to backdoor access and manipulation."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  Review the permissions granted to users by the operating system/file system on\n  the database files, database log files and database backup files.\n\n  To verify that all files are owned by the database administrator and have the\n  correct permissions, run the following as the database administrator (shown\n  here as \"postgres\"):\n\n  $ sudo su - postgres\n  $ ls -lR ${PGDATA?}\n\n  If any files are not owned by the database administrator or allow anyone but\n  the database administrator to read/write/execute, this is a finding.\n\n  If any user/role who is not an authorized system administrator with a\n  need-to-know or database administrator with a need-to-know, or a system account\n  for running PostgreSQL processes, is permitted to read/view any of these files,\n  this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  Configure the permissions granted by the operating system/file system on the\n  database files, database log files, and database backup files so that only\n  relevant system accounts and authorized system administrators and database\n  administrators with a need to know are permitted to read/view these files.\n\n  Any files (for example: extra configuration files) created in PGDATA must be\n  owned by the database administrator, with only owner permissions to read,\n  write, and execute."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000243-DB-000374","gid":"V-73059","rid":"SV-87711r2_rule","stig_id":"PGS9-00-012000","fix_id":"F-79505r1_fix","cci":["CCI-001090"],"nist":["SC-4","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73059\" do\r\n  title \"Access to database files must be limited to relevant processes and to\r\n  authorized, administrative users.\"\r\n  desc  \"Applications, including PostgreSQL, must prevent unauthorized and\r\n  unintended information transfer via shared system resources. Permitting only\r\n  DBMS processes and authorized, administrative users to have access to the files\r\n  where the database resides helps ensure that those files are not shared\r\n  inappropriately and are not open to backdoor access and manipulation.\"\r\n  \r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000243-DB-000374\"\r\n  tag \"gid\": \"V-73059\"\r\n  tag \"rid\": \"SV-87711r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-012000\"\r\n  tag \"fix_id\": \"F-79505r1_fix\"\r\n  tag \"cci\": [\"CCI-001090\"]\r\n  tag \"nist\": [\"SC-4\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  Review the permissions granted to users by the operating system/file system on\r\n  the database files, database log files and database backup files.\r\n\r\n  To verify that all files are owned by the database administrator and have the\r\n  correct permissions, run the following as the database administrator (shown\r\n  here as \\\"postgres\\\"):\r\n\r\n  $ sudo su - postgres\r\n  $ ls -lR ${PGDATA?}\r\n\r\n  If any files are not owned by the database administrator or allow anyone but\r\n  the database administrator to read/write/execute, this is a finding.\r\n\r\n  If any user/role who is not an authorized system administrator with a\r\n  need-to-know or database administrator with a need-to-know, or a system account\r\n  for running PostgreSQL processes, is permitted to read/view any of these files,\r\n  this is a finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  Configure the permissions granted by the operating system/file system on the\r\n  database files, database log files, and database backup files so that only\r\n  relevant system accounts and authorized system administrators and database\r\n  administrators with a need to know are permitted to read/view these files.\r\n\r\n  Any files (for example: extra configuration files) created in PGDATA must be\r\n  owned by the database administrator, with only owner permissions to read,\r\n  write, and execute.\"\r\n\r\n\r\n  describe command(\"find pg_data_dir ! -user pg_owner ! -group pg_group -type f -readable -writable | wc -l\") do\r\n    its('stdout.strip') { should eq '0' }\r\n  end\r\nend\r\n","source_location":{"line":7,"ref":"controls/V-73059.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Command: `find pg_data_dir ! -user pg_owner ! -group pg_group -type f -readable -writable | wc -l` stdout.strip is expected to eq \"0\"","run_time":0.417745336,"start_time":"2020-06-19T18:47:44+00:00"}]},{"id":"V-73061","title":"PostgreSQL must protect its audit configuration from unauthorized\n  modification.","desc":"Protecting audit data also includes identifying and protecting the\n  tools used to view and manipulate log data. Therefore, protecting audit tools\n  is necessary to prevent unauthorized operation on audit data.\n\n  Applications providing tools to interface with audit data will leverage\n  user permissions and roles identifying the user accessing the tools and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the modification of audit tools.\n\n  udit tools include, but are not limited to, vendor-provided and open\n  source audit tools needed to successfully view and manipulate audit information\n  system activity and records. Audit tools include custom queries and report\n  generators.","descriptions":[{"label":"default","data":"Protecting audit data also includes identifying and protecting the\n  tools used to view and manipulate log data. Therefore, protecting audit tools\n  is necessary to prevent unauthorized operation on audit data.\n\n  Applications providing tools to interface with audit data will leverage\n  user permissions and roles identifying the user accessing the tools and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the modification of audit tools.\n\n  udit tools include, but are not limited to, vendor-provided and open\n  source audit tools needed to successfully view and manipulate audit information\n  system activity and records. Audit tools include custom queries and report\n  generators."},{"label":"check","data":"All configurations for auditing and logging can be found in the\n  postgresql.conf configuration file. By default, this file is owned by the\n  database administrator account.\n\n  To check that the permissions of the postgresql.conf are owned by the database\n  administrator with permissions of 0600, run the following as the database\n  administrator (shown here as \"postgres\"):\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}\n\n  If postgresql.conf is not owned by the database administrator or does not have\n  0600 permissions, this is a finding.\n\n  #### stderr Logging\n\n  To check that logs are created with 0600 permissions, check the postgresql.conf\n  file for the following setting:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_file_mode\"\n\n  If permissions are not 0600, this is a finding.\n\n  #### syslog Logging\n\n  If PostgreSQL is configured to use syslog, verify that the logs are owned by\n  root and have 0600 permissions. If they are not, this is a finding."},{"label":"fix","data":"Apply or modify access controls and permissions (both within\n  PostgreSQL and in the file system/operating system) to tools used to view or\n  modify audit log data. Tools must be configurable by authorized personnel only.\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n\n  Next, as the database administrator (shown here as \"postgres\"), change the\n  ownership and permissions of configuration files in PGDATA:\n\n  $ sudo su - postgres\n  $ chown postgres:postgres ${PGDATA?}/*.conf\n$ chmod 0600 ${PGDATA?}/*.conf"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000122-DB-000203","gid":"V-73061","rid":"SV-87713r1_rule","stig_id":"PGS9-00-012200","fix_id":"F-79507r1_fix","cci":["CCI-001494"],"nist":["AU-9","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73061\" do\r\n  title \"PostgreSQL must protect its audit configuration from unauthorized\r\n  modification.\"\r\n  desc  \"Protecting audit data also includes identifying and protecting the\r\n  tools used to view and manipulate log data. Therefore, protecting audit tools\r\n  is necessary to prevent unauthorized operation on audit data.\r\n\r\n  Applications providing tools to interface with audit data will leverage\r\n  user permissions and roles identifying the user accessing the tools and the\r\n  corresponding rights the user enjoys in order make access decisions regarding\r\n  the modification of audit tools.\r\n\r\n  udit tools include, but are not limited to, vendor-provided and open\r\n  source audit tools needed to successfully view and manipulate audit information\r\n  system activity and records. Audit tools include custom queries and report\r\n  generators.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000122-DB-000203\"\r\n  tag \"gid\": \"V-73061\"\r\n  tag \"rid\": \"SV-87713r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-012200\"\r\n  tag \"fix_id\": \"F-79507r1_fix\"\r\n  tag \"cci\": [\"CCI-001494\"]\r\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"All configurations for auditing and logging can be found in the\r\n  postgresql.conf configuration file. By default, this file is owned by the\r\n  database administrator account.\r\n\r\n  To check that the permissions of the postgresql.conf are owned by the database\r\n  administrator with permissions of 0600, run the following as the database\r\n  administrator (shown here as \\\"postgres\\\"):\r\n\r\n  $ sudo su - postgres\r\n  $ ls -la ${PGDATA?}\r\n\r\n  If postgresql.conf is not owned by the database administrator or does not have\r\n  0600 permissions, this is a finding.\r\n\r\n  #### stderr Logging\r\n\r\n  To check that logs are created with 0600 permissions, check the postgresql.conf\r\n  file for the following setting:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_file_mode\\\"\r\n\r\n  If permissions are not 0600, this is a finding.\r\n\r\n  #### syslog Logging\r\n\r\n  If PostgreSQL is configured to use syslog, verify that the logs are owned by\r\n  root and have 0600 permissions. If they are not, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Apply or modify access controls and permissions (both within\r\n  PostgreSQL and in the file system/operating system) to tools used to view or\r\n  modify audit log data. Tools must be configurable by authorized personnel only.\r\n\r\n  $ sudo su - postgres\r\n  $ vi ${PGDATA?}/postgresql.conf\r\n  log_file_mode = 0600\r\n\r\n  Next, as the database administrator (shown here as \\\"postgres\\\"), change the\r\n  ownership and permissions of configuration files in PGDATA:\r\n\r\n  $ sudo su - postgres\r\n  $ chown postgres:postgres ${PGDATA?}/*.conf\r\n$ chmod 0600 ${PGDATA?}/*.conf\"\r\n\r\n\r\n  describe file(pg_conf_file) do\r\n    it { should be_file }\r\n    its('mode') { should cmp '0600' }\r\n  end\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  log_destination_query = sql.query('SHOW log_destination;', [pg_db])\r\n  log_destination = log_destination_query.output\r\n\r\n  if log_destination =~ /stderr/i\r\n    describe sql.query('SHOW log_file_mode;', [pg_db]) do\r\n      its('output') { should cmp '0600' }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":13,"ref":"controls/V-73061.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/postgresql.conf is expected to be file","run_time":0.007405179,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/postgresql.conf mode is expected to cmp == \"0600\"","run_time":0.000289362,"start_time":"2020-06-19T18:47:44+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_file_mode; output is expected to cmp == \"0600\"","run_time":0.000148803,"start_time":"2020-06-19T18:47:44+00:00"}]},{"id":"V-73063","title":"PostgreSQL must use NIST FIPS 140-2 validated cryptographic modules\n  for cryptographic operations.","desc":"Use of weak or not validated cryptographic algorithms undermines the\n  purposes of utilizing encryption and digital signatures to protect data. Weak\n  algorithms can be easily broken and not validated cryptographic modules may not\n  implement algorithms correctly. Unapproved cryptographic modules or algorithms\n  should not be relied on for authentication, confidentiality or integrity. Weak\n  cryptography could allow an attacker to gain access to and modify data stored\n  in the database as well as the administration settings of the DBMS.\n\n  Applications, including DBMSs, utilizing cryptography are required to use\n  approved NIST FIPS 140-2 validated cryptographic modules that meet the\n  requirements of applicable federal laws, Executive Orders, directives,\n  policies, regulations, standards, and guidance.\n\n  The security functions validated as part of FIPS 140-2 for cryptographic\n  modules are described in FIPS 140-2 Annex A.\n\n  NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based\n  encryption modules.","descriptions":[{"label":"default","data":"Use of weak or not validated cryptographic algorithms undermines the\n  purposes of utilizing encryption and digital signatures to protect data. Weak\n  algorithms can be easily broken and not validated cryptographic modules may not\n  implement algorithms correctly. Unapproved cryptographic modules or algorithms\n  should not be relied on for authentication, confidentiality or integrity. Weak\n  cryptography could allow an attacker to gain access to and modify data stored\n  in the database as well as the administration settings of the DBMS.\n\n  Applications, including DBMSs, utilizing cryptography are required to use\n  approved NIST FIPS 140-2 validated cryptographic modules that meet the\n  requirements of applicable federal laws, Executive Orders, directives,\n  policies, regulations, standards, and guidance.\n\n  The security functions validated as part of FIPS 140-2 for cryptographic\n  modules are described in FIPS 140-2 Annex A.\n\n  NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based\n  encryption modules."},{"label":"check","data":"As the system administrator, run the following:\n\n  $ openssl version\n\n  If \"fips\" is not included in the openssl version, this is a finding."},{"label":"fix","data":"Configure OpenSSL to meet FIPS Compliance using the following\n  documentation in section 9.1:\n\n  http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp1758.pdf\n\n  For more information on configuring PostgreSQL to use SSL, see supplementary\n  content APPENDIX-G."}],"impact":0.7,"refs":[],"tags":{"severity":"high","gtitle":"SRG-APP-000179-DB-000114","gid":"V-73063","rid":"SV-87715r1_rule","stig_id":"PGS9-00-012300","fix_id":"F-79509r1_fix","cci":["CCI-000803"],"nist":["IA-7","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73063\" do\r\n  title \"PostgreSQL must use NIST FIPS 140-2 validated cryptographic modules\r\n  for cryptographic operations.\"\r\n  desc  \"Use of weak or not validated cryptographic algorithms undermines the\r\n  purposes of utilizing encryption and digital signatures to protect data. Weak\r\n  algorithms can be easily broken and not validated cryptographic modules may not\r\n  implement algorithms correctly. Unapproved cryptographic modules or algorithms\r\n  should not be relied on for authentication, confidentiality or integrity. Weak\r\n  cryptography could allow an attacker to gain access to and modify data stored\r\n  in the database as well as the administration settings of the DBMS.\r\n\r\n  Applications, including DBMSs, utilizing cryptography are required to use\r\n  approved NIST FIPS 140-2 validated cryptographic modules that meet the\r\n  requirements of applicable federal laws, Executive Orders, directives,\r\n  policies, regulations, standards, and guidance.\r\n\r\n  The security functions validated as part of FIPS 140-2 for cryptographic\r\n  modules are described in FIPS 140-2 Annex A.\r\n\r\n  NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based\r\n  encryption modules.\"\r\n\r\n  impact 0.7\r\n  tag \"severity\": \"high\"\r\n  tag \"gtitle\": \"SRG-APP-000179-DB-000114\"\r\n  tag \"gid\": \"V-73063\"\r\n  tag \"rid\": \"SV-87715r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-012300\"\r\n  tag \"fix_id\": \"F-79509r1_fix\"\r\n  tag \"cci\": [\"CCI-000803\"]\r\n  tag \"nist\": [\"IA-7\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the system administrator, run the following:\r\n\r\n  $ openssl version\r\n\r\n  If \\\"fips\\\" is not included in the openssl version, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Configure OpenSSL to meet FIPS Compliance using the following\r\n  documentation in section 9.1:\r\n\r\n  http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp1758.pdf\r\n\r\n  For more information on configuring PostgreSQL to use SSL, see supplementary\r\n  content APPENDIX-G.\"\r\n\r\n  describe command('openssl version') do\r\n      its('stdout') { should include 'fips' }\r\n  end\r\nend\r\n","source_location":{"line":27,"ref":"controls/V-73063.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"Command: `openssl version` stdout is expected to include \"fips\"","run_time":0.578111594,"start_time":"2020-06-19T18:47:44+00:00","message":"expected \"\" to include \"fips\""}]},{"id":"V-73065","title":"Audit records must be generated when categorized information (e.g.,\n  classification levels/security levels) is deleted.","desc":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.","descriptions":[{"label":"default","data":"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems."},{"label":"check","data":"As the database administrator, verify pgaudit is enabled by\n  running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If the output does not contain \"pgaudit\", this is a finding.\n\n  Verify that role, read, write, and ddl auditing are enabled:\n\n  $ psql -c \"SHOW pgaudit.log\"\n\n  If the output does not contain role, read, write, and ddl, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n\n  With pgaudit installed the following configurations can be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log='ddl, role, read, write' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000502-DB-000348","gid":"V-73065","rid":"SV-87717r2_rule","stig_id":"PGS9-00-012500","fix_id":"F-79511r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73065\" do\r\n  title \"Audit records must be generated when categorized information (e.g.,\r\n  classification levels/security levels) is deleted.\"\r\n  desc  \"Changes in categorized information must be tracked. Without an audit\r\n  trail, unauthorized access to protected data could go undetected.\r\n\r\n  For detailed information on categorizing information, refer to FIPS\r\n  Publication 199, Standards for Security Categorization of Federal Information\r\n  and Information Systems, and FIPS Publication 200, Minimum Security\r\n  Requirements for Federal Information and Information Systems.\"\r\n  \r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000502-DB-000348\"\r\n  tag \"gid\": \"V-73065\"\r\n  tag \"rid\": \"SV-87717r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-012500\"\r\n  tag \"fix_id\": \"F-79511r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator, verify pgaudit is enabled by\r\n  running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If the output does not contain \\\"pgaudit\\\", this is a finding.\r\n\r\n  Verify that role, read, write, and ddl auditing are enabled:\r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n\r\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\n  With pgaudit installed the following configurations can be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log='ddl, role, read, write' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  pgaudit_types = %w(ddl read role write)\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73065.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000233577,"start_time":"2020-06-19T18:47:45+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"ddl\"","run_time":0.000341473,"start_time":"2020-06-19T18:47:45+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"read\"","run_time":0.000268787,"start_time":"2020-06-19T18:47:45+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"read\"\nDiff:\n@@ -1,2 +1,4 @@\n-read\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"role\"","run_time":0.00026663,"start_time":"2020-06-19T18:47:45+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.00028362,"start_time":"2020-06-19T18:47:45+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-73067","title":"PostgreSQL must generate audit records when successful accesses to\n  objects occur.","desc":"Without tracking all or selected types of access to all or selected\n  objects (tables, views, procedures, functions, etc.), it would be difficult to\n  establish, correlate, and investigate the events relating to an incident, or\n  identify those responsible for one.\n\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n\n      SELECT\n      INSERT\n      UPDATE\n      DELETE\n      EXECUTE","descriptions":[{"label":"default","data":"Without tracking all or selected types of access to all or selected\n  objects (tables, views, procedures, functions, etc.), it would be difficult to\n  establish, correlate, and investigate the events relating to an incident, or\n  identify those responsible for one.\n\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n\n      SELECT\n      INSERT\n      UPDATE\n      DELETE\n      EXECUTE"},{"label":"check","data":"As the database administrator, verify pgaudit is enabled by\n  running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If the output does not contain \"pgaudit\", this is a finding.\n\n  Verify that role, read, write, and ddl auditing are enabled:\n\n  $ psql -c \"SHOW pgaudit.log\"\n\n  If the output does not contain role, read, write, and ddl, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER. To ensure that logging is enabled,\n  review supplementary content APPENDIX-C for instructions on enabling logging.\n\n  If logging is enabled, the following configurations must be made to log\n  unsuccessful connections, date/time, username, and session identifier.\n\n  As the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf:\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n\n  Edit the following parameters:\n\n  log_connections = on\n  log_line_prefix = '< %m %u %c: >'\n  pgaudit.log = 'read, write'\n\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %c is the session ID for the connection\n\n  As the system administrator, reload the server with the new configuration:\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY\n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000507-DB-000356","gid":"V-73067","rid":"SV-87719r3_rule","stig_id":"PGS9-00-012600","fix_id":"F-79513r3_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73067\" do\r\n  title \"PostgreSQL must generate audit records when successful accesses to\r\n  objects occur.\"\r\n  desc  \"Without tracking all or selected types of access to all or selected\r\n  objects (tables, views, procedures, functions, etc.), it would be difficult to\r\n  establish, correlate, and investigate the events relating to an incident, or\r\n  identify those responsible for one.\r\n\r\n  In an SQL environment, types of access include, but are not necessarily\r\n  limited to:\r\n\r\n      SELECT\r\n      INSERT\r\n      UPDATE\r\n      DELETE\r\n      EXECUTE\r\n    \"\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000507-DB-000356\"\r\n  tag \"gid\": \"V-73067\"\r\n  tag \"rid\": \"SV-87719r3_rule\"\r\n  tag \"stig_id\": \"PGS9-00-012600\"\r\n  tag \"fix_id\": \"F-79513r3_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator, verify pgaudit is enabled by\r\n  running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If the output does not contain \\\"pgaudit\\\", this is a finding.\r\n\r\n  Verify that role, read, write, and ddl auditing are enabled:\r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n\r\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\r\n    \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER. To ensure that logging is enabled,\r\n  review supplementary content APPENDIX-C for instructions on enabling logging.\r\n\r\n  If logging is enabled, the following configurations must be made to log\r\n  unsuccessful connections, date/time, username, and session identifier.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), edit\r\n  postgresql.conf:\r\n\r\n  $ sudo su - postgres\r\n  $ vi ${PGDATA?}/postgresql.conf\r\n\r\n  Edit the following parameters:\r\n\r\n  log_connections = on\r\n  log_line_prefix = '< %m %u %c: >'\r\n  pgaudit.log = 'read, write'\r\n\r\n  Where:\r\n  * %m is the time and date\r\n  * %u is the username\r\n  * %c is the session ID for the connection\r\n\r\n  As the system administrator, reload the server with the new configuration:\r\n\r\n  # SYSTEMD SERVER ONLY\r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY\r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  pgaudit_types = ['read', 'write']\r\n\r\n  pgaudit_types.each do |type|\r\n    describe sql.query('SHOW pgaudit.log;', [pg_db]) do\r\n      its('output') { should include type }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73067.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000170705,"start_time":"2020-06-19T18:47:45+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"read\"","run_time":0.000264234,"start_time":"2020-06-19T18:47:45+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"read\"\nDiff:\n@@ -1,2 +1,4 @@\n-read\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log; output is expected to include \"write\"","run_time":0.000256453,"start_time":"2020-06-19T18:47:45+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-73069","title":"PostgreSQL must generate audit records for all direct access to the\n  database(s).","desc":"In this context, direct access is any query, command, or call to the\n  DBMS that comes from any source other than the application(s) that it supports.\n  Examples would be the command line or a database management utility program.\n  The intent is to capture all activity from administrative and non-standard\n  sources.","descriptions":[{"label":"default","data":"In this context, direct access is any query, command, or call to the\n  DBMS that comes from any source other than the application(s) that it supports.\n  Examples would be the command line or a database management utility program.\n  The intent is to capture all activity from administrative and non-standard\n  sources."},{"label":"check","data":"As the database administrator, verify pgaudit is enabled by\n  running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If the output does not contain \"pgaudit\", this is a finding.\n\n  Verify that connections and disconnections are being logged by running the\n  following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_connections\"\n  $ psql -c \"SHOW log_disconnections\"\n\n  If the output does not contain \"on\", this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \n\n  With pgaudit installed the following configurations should be made: \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n\n  Add the following parameters (or edit existing parameters): \n\n  pgaudit.log='ddl, role, read, write' \n  log_connections='on' \n  log_disconnections='on' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000508-DB-000358","gid":"V-73069","rid":"SV-87721r2_rule","stig_id":"PGS9-00-012700","fix_id":"F-79515r2_fix","cci":["CCI-000172"],"nist":["AU-12 c","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73069\" do\r\n  title \"PostgreSQL must generate audit records for all direct access to the\r\n  database(s).\"\r\n  desc  \"In this context, direct access is any query, command, or call to the\r\n  DBMS that comes from any source other than the application(s) that it supports.\r\n  Examples would be the command line or a database management utility program.\r\n  The intent is to capture all activity from administrative and non-standard\r\n  sources.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000508-DB-000358\"\r\n  tag \"gid\": \"V-73069\"\r\n  tag \"rid\": \"SV-87721r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-012700\"\r\n  tag \"fix_id\": \"F-79515r2_fix\"\r\n  tag \"cci\": [\"CCI-000172\"]\r\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator, verify pgaudit is enabled by\r\n  running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If the output does not contain \\\"pgaudit\\\", this is a finding.\r\n\r\n  Verify that connections and disconnections are being logged by running the\r\n  following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_connections\\\"\r\n  $ psql -c \\\"SHOW log_disconnections\\\"\r\n\r\n  If the output does not contain \\\"on\\\", this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\r\n  supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\n  With pgaudit installed the following configurations should be made: \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n\r\n  Add the following parameters (or edit existing parameters): \r\n\r\n  pgaudit.log='ddl, role, read, write' \r\n  log_connections='on' \r\n  log_disconnections='on' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\r\n    its('output') { should include 'pgaudit' }\r\n  end\r\n\r\n  describe sql.query('SHOW log_connections;', [pg_db]) do\r\n    its('output') { should match /on|true/i }\r\n  end\r\n\r\n  describe sql.query('SHOW log_disconnections;', [pg_db]) do\r\n    its('output') { should match /on|true/i }\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73069.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries; output is expected to include \"pgaudit\"","run_time":0.000170117,"start_time":"2020-06-19T18:47:45+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_connections; output is expected to match /on|true/i","run_time":0.000134067,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_disconnections; output is expected to match /on|true/i","run_time":8.8567e-05,"start_time":"2020-06-19T18:47:45+00:00"}]},{"id":"V-73123","title":"PostgreSQL must produce audit records containing sufficient\n  information to establish where the events occurred.","desc":"Information system auditing capability is critical for accurate\n  forensic analysis. Without establishing where events occurred, it is impossible\n  to establish, correlate, and investigate the events relating to an incident.\n\n  In order to compile an accurate risk assessment and provide forensic\n  analysis, it is essential for security personnel to know where events occurred,\n  such as application components, modules, session identifiers, filenames, host\n  names, and functionality.\n\n  Associating information about where the event occurred within the\n  application provides a means of investigating an attack; recognizing resource\n  utilization or capacity thresholds; or identifying an improperly configured\n  application.","descriptions":[{"label":"default","data":"Information system auditing capability is critical for accurate\n  forensic analysis. Without establishing where events occurred, it is impossible\n  to establish, correlate, and investigate the events relating to an incident.\n\n  In order to compile an accurate risk assessment and provide forensic\n  analysis, it is essential for security personnel to know where events occurred,\n  such as application components, modules, session identifiers, filenames, host\n  names, and functionality.\n\n  Associating information about where the event occurred within the\n  application provides a means of investigating an attack; recognizing resource\n  utilization or capacity thresholds; or identifying an improperly configured\n  application."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  First, as the database administrator (shown here as \"postgres\"), check the\n  current log_line_prefix setting by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_line_prefix\"\n\n  If log_line_prefix does not contain %m %u %d %s, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  To check that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n\n  First edit the postgresql.conf file as the database administrator (shown here\n  as \"postgres\"):\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n\n  Extra parameters can be added to the setting log_line_prefix to log application\n  related information:\n\n  # %a = application name\n  # %u = user name\n  # %d = database name\n  # %r = remote host and port\n  # %p = process ID\n  # %m = timestamp with milliseconds\n  # %i = command tag\n  # %s = session startup\n  # %e = SQL state\n\n  For example:\n\n  log_line_prefix = '< %m %a %u %d %r %p %i %e %s>’\n\n  Now, as the system administrator, reload the server with the new configuration:\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000097-DB-000041","gid":"V-73123","rid":"SV-87775r1_rule","stig_id":"PGS9-00-007100","fix_id":"F-79569r1_fix","cci":["CCI-000132"],"nist":["AU-3","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73123\" do\r\n  title \"PostgreSQL must produce audit records containing sufficient\r\n  information to establish where the events occurred.\"\r\n  desc  \"Information system auditing capability is critical for accurate\r\n  forensic analysis. Without establishing where events occurred, it is impossible\r\n  to establish, correlate, and investigate the events relating to an incident.\r\n\r\n  In order to compile an accurate risk assessment and provide forensic\r\n  analysis, it is essential for security personnel to know where events occurred,\r\n  such as application components, modules, session identifiers, filenames, host\r\n  names, and functionality.\r\n\r\n  Associating information about where the event occurred within the\r\n  application provides a means of investigating an attack; recognizing resource\r\n  utilization or capacity thresholds; or identifying an improperly configured\r\n  application.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000097-DB-000041\"\r\n  tag \"gid\": \"V-73123\"\r\n  tag \"rid\": \"SV-87775r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-007100\"\r\n  tag \"fix_id\": \"F-79569r1_fix\"\r\n  tag \"cci\": [\"CCI-000132\"]\r\n  tag \"nist\": [\"AU-3\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), check the\r\n  current log_line_prefix setting by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_line_prefix\\\"\r\n\r\n  If log_line_prefix does not contain %m %u %d %s, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  To check that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging.\r\n\r\n  First edit the postgresql.conf file as the database administrator (shown here\r\n  as \\\"postgres\\\"):\r\n\r\n  $ sudo su - postgres\r\n  $ vi ${PGDATA?}/postgresql.conf\r\n\r\n  Extra parameters can be added to the setting log_line_prefix to log application\r\n  related information:\r\n\r\n  # %a = application name\r\n  # %u = user name\r\n  # %d = database name\r\n  # %r = remote host and port\r\n  # %p = process ID\r\n  # %m = timestamp with milliseconds\r\n  # %i = command tag\r\n  # %s = session startup\r\n  # %e = SQL state\r\n\r\n  For example:\r\n\r\n  log_line_prefix = '< %m %a %u %d %r %p %i %e %s>’\r\n\r\n  Now, as the system administrator, reload the server with the new configuration:\r\n\r\n  # SYSTEMD SERVER ONLY\r\n  $ sudo systemctl reload postgresql-9.5\r\n\r\n  # INITD SERVER ONLY\r\n  $ sudo service postgresql-9.5 reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  log_line_prefix_escapes = %w(%m %u %d %s)\r\n\r\n  log_line_prefix_escapes.each do |escape|\r\n    describe sql.query('SHOW log_line_prefix;', [pg_db]) do\r\n      its('output') { should include escape }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":9,"ref":"controls/V-73123.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%m\"","run_time":0.000171522,"start_time":"2020-06-19T18:47:45+00:00","message":"expected \"%a %u %d %p %r %s %c\" to include \"%m\""},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%u\"","run_time":0.000105687,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%d\"","run_time":0.00012641,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_line_prefix; output is expected to include \"%s\"","run_time":0.000100519,"start_time":"2020-06-19T18:47:45+00:00"}]},{"id":"V-72847","title":"The audit information produced by PostgreSQL must be protected from\n  unauthorized modification.","desc":"If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is impossible to achieve.\n\n  To ensure the veracity of audit data the information system and/or the\n  application must protect audit information from unauthorized modification.\n\n  This requirement can be achieved through multiple methods that will depend\n  upon system architecture and design. Some commonly employed methods include\n  ensuring log files enjoy the proper file system permissions and limiting log\n  data locations.\n\n  Applications providing a user interface to audit data will leverage user\n  permissions and roles identifying the user accessing the data and the\n  corresponding rights that the user enjoys in order to make access decisions\n  regarding the modification of audit data.\n\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity.\n\n  Modification of database audit data could mask the theft of, or the\n  unauthorized modification of, sensitive data stored in the database.","descriptions":[{"label":"default","data":"If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is impossible to achieve.\n\n  To ensure the veracity of audit data the information system and/or the\n  application must protect audit information from unauthorized modification.\n\n  This requirement can be achieved through multiple methods that will depend\n  upon system architecture and design. Some commonly employed methods include\n  ensuring log files enjoy the proper file system permissions and limiting log\n  data locations.\n\n  Applications providing a user interface to audit data will leverage user\n  permissions and roles identifying the user accessing the data and the\n  corresponding rights that the user enjoys in order to make access decisions\n  regarding the modification of audit data.\n\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity.\n\n  Modification of database audit data could mask the theft of, or the\n  unauthorized modification of, sensitive data stored in the database."},{"label":"check","data":"Review locations of audit logs, both internal to the database and\n  database audit logs located at the operating system level.\n\n  Verify there are appropriate controls and permissions to protect the audit\n  information from unauthorized modification.\n\n  Note: The following instructions use the PGDATA environment variable. See\n  supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\n  #### stderr Logging\n\n  If the PostgreSQL server is configured to use stderr for logging, the logs will\n  be owned by the database owner (usually postgres user) with a default\n  permissions level of 0600. The permissions can be configured in\n  postgresql.conf.\n\n  To check the permissions for log files in postgresql.conf, as the database\n  owner (shown here as \"postgres\"), run the following command:\n\n  $ sudo su - postgres\n  $ grep \"log_file_mode\" ${PGDATA?}/postgresql.conf\n\n  If the permissions are not 0600, this is a finding.\n\n  Next, navigate to where the logs are stored. This can be found by running the\n  following command against postgresql.conf as the database owner (shown here as\n  \"postgres\"):\n\n  $ sudo su - postgres\n  $ grep \"log_directory\" ${PGDATA?}/postgresql.conf\n\n  With the log directory identified, as the database owner (shown here as\n  \"postgres\"), list the permissions of the logs:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}/pg_log\n\n  If logs are not owned by the database owner (shown here as \"postgres\") and\n  are not the same permissions as configured in postgresql.conf, this is a\n  finding.\n\n  #### syslog Logging\n\n  If the PostgreSQL server is configured to use syslog for logging, consult the\n  organization syslog setting for permissions and ownership of logs."},{"label":"fix","data":"To ensure that logging is enabled, review supplementary content\n  APPENDIX-C for instructions on enabling logging.\n  \n  Note: The following instructions use the PGDATA environment variable. See\n  supplementary content APPENDIX-F for instructions on configuring PGDATA.\n  \n  #### stderr Logging\n  \n  With stderr logging enabled, as the database owner (shown here as\n  \"postgres\"), set the following parameter in postgresql.conf:\n  \n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n  \n  To change the owner and permissions of the log files, run the following:\n  \n  $ chown postgres:postgres ${PGDATA?}/<log directory name>\n  $ chmod 0700 ${PGDATA?}/<log directory name>\n  $ chmod 600 ${PGDATA?}/<log directory name>/*.log\n  \n  #### syslog Logging\n  \n  If PostgreSQL is configuredd to use syslog for logging, the log files must be\n  configured to be owned by root with 0600 permissions.\n  \n  $ chown root:root <log directory name>/<log_filename>\n  $ chmod 0700 <log directory name>\n  $ chmod 0600 <log directory name>/*.log"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000119-DB-000060","gid":"V-72847","rid":"SV-87499r2_rule","stig_id":"PGS9-00-000400","fix_id":"F-79289r1_fix","cci":["CCI-000163"],"nist":["AU-9","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72847\" do\r\n  title \"The audit information produced by PostgreSQL must be protected from\r\n  unauthorized modification.\"\r\n  desc  \"If audit data were to become compromised, then competent forensic\r\n  analysis and discovery of the true source of potentially malicious system\r\n  activity is impossible to achieve.\r\n\r\n  To ensure the veracity of audit data the information system and/or the\r\n  application must protect audit information from unauthorized modification.\r\n\r\n  This requirement can be achieved through multiple methods that will depend\r\n  upon system architecture and design. Some commonly employed methods include\r\n  ensuring log files enjoy the proper file system permissions and limiting log\r\n  data locations.\r\n\r\n  Applications providing a user interface to audit data will leverage user\r\n  permissions and roles identifying the user accessing the data and the\r\n  corresponding rights that the user enjoys in order to make access decisions\r\n  regarding the modification of audit data.\r\n\r\n  Audit information includes all information (e.g., audit records, audit\r\n  settings, and audit reports) needed to successfully audit information system\r\n  activity.\r\n\r\n  Modification of database audit data could mask the theft of, or the\r\n  unauthorized modification of, sensitive data stored in the database.\"\r\n  \r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000119-DB-000060\"\r\n  tag \"gid\": \"V-72847\"\r\n  tag \"rid\": \"SV-87499r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-000400\"\r\n  tag \"fix_id\": \"F-79289r1_fix\"\r\n  tag \"cci\": [\"CCI-000163\"]\r\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review locations of audit logs, both internal to the database and\r\n  database audit logs located at the operating system level.\r\n\r\n  Verify there are appropriate controls and permissions to protect the audit\r\n  information from unauthorized modification.\r\n\r\n  Note: The following instructions use the PGDATA environment variable. See\r\n  supplementary content APPENDIX-F for instructions on configuring PGDATA.\r\n\r\n  #### stderr Logging\r\n\r\n  If the PostgreSQL server is configured to use stderr for logging, the logs will\r\n  be owned by the database owner (usually postgres user) with a default\r\n  permissions level of 0600. The permissions can be configured in\r\n  postgresql.conf.\r\n\r\n  To check the permissions for log files in postgresql.conf, as the database\r\n  owner (shown here as \\\"postgres\\\"), run the following command:\r\n\r\n  $ sudo su - postgres\r\n  $ grep \\\"log_file_mode\\\" ${PGDATA?}/postgresql.conf\r\n\r\n  If the permissions are not 0600, this is a finding.\r\n\r\n  Next, navigate to where the logs are stored. This can be found by running the\r\n  following command against postgresql.conf as the database owner (shown here as\r\n  \\\"postgres\\\"):\r\n\r\n  $ sudo su - postgres\r\n  $ grep \\\"log_directory\\\" ${PGDATA?}/postgresql.conf\r\n\r\n  With the log directory identified, as the database owner (shown here as\r\n  \\\"postgres\\\"), list the permissions of the logs:\r\n\r\n  $ sudo su - postgres\r\n  $ ls -la ${PGDATA?}/pg_log\r\n\r\n  If logs are not owned by the database owner (shown here as \\\"postgres\\\") and\r\n  are not the same permissions as configured in postgresql.conf, this is a\r\n  finding.\r\n\r\n  #### syslog Logging\r\n\r\n  If the PostgreSQL server is configured to use syslog for logging, consult the\r\n  organization syslog setting for permissions and ownership of logs.\"\r\n  \r\n  desc \"fix\", \"To ensure that logging is enabled, review supplementary content\r\n  APPENDIX-C for instructions on enabling logging.\r\n  \r\n  Note: The following instructions use the PGDATA environment variable. See\r\n  supplementary content APPENDIX-F for instructions on configuring PGDATA.\r\n  \r\n  #### stderr Logging\r\n  \r\n  With stderr logging enabled, as the database owner (shown here as\r\n  \\\"postgres\\\"), set the following parameter in postgresql.conf:\r\n  \r\n  $ vi ${PGDATA?}/postgresql.conf\r\n  log_file_mode = 0600\r\n  \r\n  To change the owner and permissions of the log files, run the following:\r\n  \r\n  $ chown postgres:postgres ${PGDATA?}/<log directory name>\r\n  $ chmod 0700 ${PGDATA?}/<log directory name>\r\n  $ chmod 600 ${PGDATA?}/<log directory name>/*.log\r\n  \r\n  #### syslog Logging\r\n  \r\n  If PostgreSQL is configuredd to use syslog for logging, the log files must be\r\n  configured to be owned by root with 0600 permissions.\r\n  \r\n  $ chown root:root <log directory name>/<log_filename>\r\n  $ chmod 0700 <log directory name>\r\n  $ chmod 0600 <log directory name>/*.log\"\r\n  \r\n\r\n# @todo also need to test that error logging is enabled (where?) or test if log\r\n# outputs to stderr? the pg_log directory should be 0700.\r\n# @todo we need to decide how we are going to test for error logging and what the\r\n# default setup will be per the CM\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW log_file_mode;', [pg_db]) do\r\n    its('output') { should cmp '0600'}\r\n  end\r\n  \r\n  describe sql.query('SHOW logging_collector;', [pg_db]) do\r\n    its('output') { should cmp 'on'}\r\n  end\r\n      \r\n  describe directory(pg_log_dir) do\r\n    it { should be_directory }\r\n    it { should be_owned_by pg_owner }\r\n    it { should be_grouped_into pg_owner }\r\n    its('mode') { should  cmp '0700' }\r\n  end\r\n\r\n  describe command(\"find #{pg_log_dir} -type f -perm 600 ! -perm 600 | wc -l\") do\r\n    its('stdout.strip') { should eq '0' }\r\n  end\r\nend\r\n","source_location":{"line":15,"ref":"controls/V-72847.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SHOW log_file_mode; output is expected to cmp == \"0600\"","run_time":0.000167836,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW logging_collector; output is expected to cmp == \"on\"","run_time":0.000154721,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be directory","run_time":0.007289594,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be owned by \"postgres\"","run_time":0.007193402,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be grouped into \"postgres\"","run_time":0.006896148,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log mode is expected to cmp == \"0700\"","run_time":0.000223251,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"Command: `find /var/lib/pgsql/data/userdata/pg_log -type f -perm 600 ! -perm 600 | wc -l` stdout.strip is expected to eq \"0\"","run_time":0.413567997,"start_time":"2020-06-19T18:47:45+00:00"}]},{"id":"V-73045","title":"PostgreSQL must off-load audit data to a separate log management\n  facility; this must be continuous and in near real time for systems with a\n  network connection to the storage facility and weekly or more often for\n  stand-alone systems.","desc":"Information stored in one location is vulnerable to accidental or\n  incidental deletion or alteration.\n\n  Off-loading is a common process in information systems with limited audit\n  storage capacity.\n\n  PostgreSQL may write audit records to database tables, to files in the file\n  system, to other kinds of local repository, or directly to a centralized log\n  management system. Whatever the method used, it must be compatible with\n  off-loading the records to the centralized system.","descriptions":[{"label":"default","data":"Information stored in one location is vulnerable to accidental or\n  incidental deletion or alteration.\n\n  Off-loading is a common process in information systems with limited audit\n  storage capacity.\n\n  PostgreSQL may write audit records to database tables, to files in the file\n  system, to other kinds of local repository, or directly to a centralized log\n  management system. Whatever the method used, it must be compatible with\n  off-loading the records to the centralized system."},{"label":"check","data":"First, as the database administrator (shown here as\n  \"postgres\"), ensure PostgreSQL uses syslog by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_destination\"\n\n  If log_destination is not syslog, this is a finding.\n\n  Next, as the database administrator, check which log facility is configured by\n\n  $ psql -c \"SHOW syslog_facility\"\n\n  Check with the organization to see how syslog facilities are defined in their\n  organization.\n\n  If the wrong facility is configured, this is a finding.\n\n  If PostgreSQL does not have a continuous network connection to the centralized\n  log management system, and PostgreSQL audit records are not transferred to the\n  centralized log management system weekly or more often, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  Configure PostgreSQL or deploy and configure software tools to transfer audit\n  records to a centralized log management system, continuously and in near-real\n  time where a continuous network connection to the log management system exists,\n  or at least weekly in the absence of such a connection. \n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. \n\n  With logging enabled, as the database administrator (shown here as\n  \"postgres\"), configure the follow parameters in postgresql.conf (the example\n  uses the default values - tailor for environment): \n\n  Note: Consult the organization on how syslog facilities are defined in the\n  syslog daemon configuration. \n\n  $ sudo su - postgres \n  $ vi ${PGDATA?}/postgresql.conf \n  log_destination = 'syslog' \n  syslog_facility = 'LOCAL0' \n  syslog_ident = 'postgres' \n\n  Now, as the system administrator, reload the server with the new configuration: \n\n  # SYSTEMD SERVER ONLY \n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY \n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000515-DB-000318","gid":"V-73045","rid":"SV-87697r2_rule","stig_id":"PGS9-00-011300","fix_id":"F-79491r2_fix","cci":["CCI-001851"],"nist":["AU-4 (1)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73045\" do\r\n  title \"PostgreSQL must off-load audit data to a separate log management\r\n  facility; this must be continuous and in near real time for systems with a\r\n  network connection to the storage facility and weekly or more often for\r\n  stand-alone systems.\"\r\n  desc  \"Information stored in one location is vulnerable to accidental or\r\n  incidental deletion or alteration.\r\n\r\n  Off-loading is a common process in information systems with limited audit\r\n  storage capacity.\r\n\r\n  PostgreSQL may write audit records to database tables, to files in the file\r\n  system, to other kinds of local repository, or directly to a centralized log\r\n  management system. Whatever the method used, it must be compatible with\r\n  off-loading the records to the centralized system.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000515-DB-000318\"\r\n  tag \"gid\": \"V-73045\"\r\n  tag \"rid\": \"SV-87697r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-011300\"\r\n  tag \"fix_id\": \"F-79491r2_fix\"\r\n  tag \"cci\": [\"CCI-001851\"]\r\n  tag \"nist\": [\"AU-4 (1)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator (shown here as\r\n  \\\"postgres\\\"), ensure PostgreSQL uses syslog by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW log_destination\\\"\r\n\r\n  If log_destination is not syslog, this is a finding.\r\n\r\n  Next, as the database administrator, check which log facility is configured by\r\n\r\n  $ psql -c \\\"SHOW syslog_facility\\\"\r\n\r\n  Check with the organization to see how syslog facilities are defined in their\r\n  organization.\r\n\r\n  If the wrong facility is configured, this is a finding.\r\n\r\n  If PostgreSQL does not have a continuous network connection to the centralized\r\n  log management system, and PostgreSQL audit records are not transferred to the\r\n  centralized log management system weekly or more often, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  Configure PostgreSQL or deploy and configure software tools to transfer audit\r\n  records to a centralized log management system, continuously and in near-real\r\n  time where a continuous network connection to the log management system exists,\r\n  or at least weekly in the absence of such a connection. \r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\r\n  instructions on enabling logging. \r\n\r\n  With logging enabled, as the database administrator (shown here as\r\n  \\\"postgres\\\"), configure the follow parameters in postgresql.conf (the example\r\n  uses the default values - tailor for environment): \r\n\r\n  Note: Consult the organization on how syslog facilities are defined in the\r\n  syslog daemon configuration. \r\n\r\n  $ sudo su - postgres \r\n  $ vi ${PGDATA?}/postgresql.conf \r\n  log_destination = 'syslog' \r\n  syslog_facility = 'LOCAL0' \r\n  syslog_ident = 'postgres' \r\n\r\n  Now, as the system administrator, reload the server with the new configuration: \r\n\r\n  # SYSTEMD SERVER ONLY \r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY \r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW log_destination;', [pg_db]) do\r\n    its('output') { should cmp 'syslog'}\r\n  end\r\n\r\n  \r\n  #Change comparison value based on organizational syslog defintions\r\n  describe sql.query('SHOW syslog_facility;', [pg_db]) do\r\n    its('output') { should cmp 'local0'}\r\n  end  \r\n\r\n  describe \"Configure PostgreSQL or deploy and configure software tools to transfer audit records to a centralized log management system\" do\r\n    skip \"If continuous network connection to the log management system does not exist, or at least weekly in the absence of such a connection. This is a finding\"\r\n  end\r\nend\r\n","source_location":{"line":13,"ref":"controls/V-73045.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW log_destination; output is expected to cmp == \"syslog\"","run_time":0.000321044,"start_time":"2020-06-19T18:47:45+00:00","message":"\nexpected: syslog\n     got: stderr\n\n(compared using `cmp` matcher)\n"},{"status":"passed","code_desc":"PostgreSQL query: SHOW syslog_facility; output is expected to cmp == \"local0\"","run_time":0.000203539,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"skipped","code_desc":"Configure PostgreSQL or deploy and configure software tools to transfer audit records to a centralized log management system","run_time":6.691e-06,"start_time":"2020-06-19T18:47:45+00:00","resource":"","skip_message":"If continuous network connection to the log management system does not exist, or at least weekly in the absence of such a connection. This is a finding"}]},{"id":"V-73043","title":"PostgreSQL must protect its audit features from unauthorized removal.","desc":"Protecting audit data also includes identifying and protecting the\n  tools used to view and manipulate log data. Therefore, protecting audit tools\n  is necessary to prevent unauthorized operation on audit data.\n\n  Applications providing tools to interface with audit data will leverage\n  user permissions and roles identifying the user accessing the tools and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the deletion of audit tools.\n\n  Audit tools include, but are not limited to, vendor-provided and open\n  source audit tools needed to successfully view and manipulate audit information\n  system activity and records. Audit tools include custom queries and report\n  generators.","descriptions":[{"label":"default","data":"Protecting audit data also includes identifying and protecting the\n  tools used to view and manipulate log data. Therefore, protecting audit tools\n  is necessary to prevent unauthorized operation on audit data.\n\n  Applications providing tools to interface with audit data will leverage\n  user permissions and roles identifying the user accessing the tools and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the deletion of audit tools.\n\n  Audit tools include, but are not limited to, vendor-provided and open\n  source audit tools needed to successfully view and manipulate audit information\n  system activity and records. Audit tools include custom queries and report\n  generators."},{"label":"check","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  As the database administrator (shown here as \"postgres\"), verify the\n  permissions of PGDATA:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}\n\n  If PGDATA is not owned by postgres:postgres or if files can be accessed by\n  others, this is a finding.\n\n  As the system administrator, verify the permissions of pgsql shared objects and\n  compiled binaries:\n\n  $ ls -la /usr/pgsql-${PGVER?}/bin\n  $ ls -la /usr/pgsql-${PGVER?}/include\n  $ ls -la /usr/pgsql-${PGVER?}/lib\n  $ ls -la /usr/pgsql-${PGVER?}/share\n\n  If any of these are not owned by root:root, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  As the system administrator, change the permissions of PGDATA:\n\n  $ sudo chown -R postgres:postgres ${PGDATA?}\n  $ sudo chmod 700 ${PGDATA?}\n\n  As the system administrator, change the permissions of pgsql:\n\n  $ sudo chown -R root:root /usr/pgsql-${PGVER?}"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000123-DB-000204","gid":"V-73043","rid":"SV-87695r2_rule","stig_id":"PGS9-00-011200","fix_id":"F-79489r2_fix","cci":["CCI-001495"],"nist":["AU-9","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73043\" do\r\n  title \"PostgreSQL must protect its audit features from unauthorized removal.\"\r\n  desc  \"Protecting audit data also includes identifying and protecting the\r\n  tools used to view and manipulate log data. Therefore, protecting audit tools\r\n  is necessary to prevent unauthorized operation on audit data.\r\n\r\n  Applications providing tools to interface with audit data will leverage\r\n  user permissions and roles identifying the user accessing the tools and the\r\n  corresponding rights the user enjoys in order make access decisions regarding\r\n  the deletion of audit tools.\r\n\r\n  Audit tools include, but are not limited to, vendor-provided and open\r\n  source audit tools needed to successfully view and manipulate audit information\r\n  system activity and records. Audit tools include custom queries and report\r\n  generators.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000123-DB-000204\"\r\n  tag \"gid\": \"V-73043\"\r\n  tag \"rid\": \"SV-87695r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-011200\"\r\n  tag \"fix_id\": \"F-79489r2_fix\"\r\n  tag \"cci\": [\"CCI-001495\"]\r\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  permissions of PGDATA:\r\n\r\n  $ sudo su - postgres\r\n  $ ls -la ${PGDATA?}\r\n\r\n  If PGDATA is not owned by postgres:postgres or if files can be accessed by\r\n  others, this is a finding.\r\n\r\n  As the system administrator, verify the permissions of pgsql shared objects and\r\n  compiled binaries:\r\n\r\n  $ ls -la /usr/pgsql-${PGVER?}/bin\r\n  $ ls -la /usr/pgsql-${PGVER?}/include\r\n  $ ls -la /usr/pgsql-${PGVER?}/lib\r\n  $ ls -la /usr/pgsql-${PGVER?}/share\r\n\r\n  If any of these are not owned by root:root, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  As the system administrator, change the permissions of PGDATA:\r\n\r\n  $ sudo chown -R postgres:postgres ${PGDATA?}\r\n  $ sudo chmod 700 ${PGDATA?}\r\n\r\n  As the system administrator, change the permissions of pgsql:\r\n\r\n  $ sudo chown -R root:root /usr/pgsql-${PGVER?}\"\r\n\r\n  describe file(pg_hba_conf_file) do\r\n    it { should be_owned_by pg_owner }\r\n    its('mode') { should cmp '0600' }\r\n  end\r\n\r\n  describe file(pg_ident_conf_file) do\r\n    it { should be_owned_by pg_owner }\r\n    its('mode') { should cmp '0600' }\r\n  end  \r\n\r\n  describe file(pg_user_defined_conf_file) do\r\n    it { should be_owned_by pg_owner }\r\n    its('mode') { should cmp '0600' }\r\n  end  \r\n\r\n  describe directory(pg_data_dir) do\r\n    it { should be_owned_by pg_owner }\r\n    it { should be_grouped_into pg_group }\r\n  end\r\n\r\n  describe command(\"find #{pg_data_dir} ! -user #{pg_owner} | wc -l\") do\r\n    its('stdout') { should cmp 0 }\r\n  end\r\n\r\n  describe command(\"find #{pg_data_dir} ! -group #{pg_group} | wc -l\") do\r\n    its('stdout') { should cmp 0 }\r\n  end\r\n\r\n  # note this accounts for stig-postgresql.conf, hba_conf, pg_ident\r\n  describe command(\"find /var/lib/pgsql/9.5/data/ ! -perm 600 -type f | wc -l\") do\r\n    its('stdout.strip') { should be <= '3' }\r\n  end\r\n\r\n  describe command(\"find /var/lib/pgsql/9.5/data/ ! -perm 700 -type d | wc -l\") do\r\n    its('stdout.strip') { should cmp \"0\" }\r\n  end\r\n\r\n  pg_shared_dirs.each do |dir|\r\n    next unless directory(dir).exist?\r\n    describe directory(dir) do\r\n      it { should be_owned_by 'root' }\r\n      it { should be_grouped_into 'root' }\r\n    end\r\n  end\r\n\r\nend\r\n","source_location":{"line":37,"ref":"controls/V-73043.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_hba.conf is expected to be owned by \"postgres\"","run_time":0.00775761,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_hba.conf mode is expected to cmp == \"0600\"","run_time":0.00020819,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_ident.conf is expected to be owned by \"postgres\"","run_time":0.006790256,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/pg_ident.conf mode is expected to cmp == \"0600\"","run_time":0.000167749,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data/userdata/stig-postgresql.conf is expected to be owned by \"postgres\"","run_time":0.006757595,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"failed","code_desc":"File /var/lib/pgsql/data/userdata/stig-postgresql.conf mode is expected to cmp == \"0600\"","run_time":0.000233047,"start_time":"2020-06-19T18:47:45+00:00","message":"\nexpected: 0600\n     got: 0644\n\n(compared using `cmp` matcher)\n"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data is expected to be owned by \"postgres\"","run_time":0.007797848,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"failed","code_desc":"Directory /var/lib/pgsql/data is expected to be grouped into \"postgres\"","run_time":0.007169334,"start_time":"2020-06-19T18:47:45+00:00","message":"expected `Directory /var/lib/pgsql/data.grouped_into?(\"postgres\")` to return true, got false"},{"status":"passed","code_desc":"Command: `find /var/lib/pgsql/data ! -user postgres | wc -l` stdout is expected to cmp == 0","run_time":0.406567714,"start_time":"2020-06-19T18:47:45+00:00"},{"status":"failed","code_desc":"Command: `find /var/lib/pgsql/data ! -group postgres | wc -l` stdout is expected to cmp == 0","run_time":0.418879968,"start_time":"2020-06-19T18:47:46+00:00","message":"\nexpected: 0\n     got: 1\n\n\n(compared using `cmp` matcher)\n"},{"status":"passed","code_desc":"Command: `find /var/lib/pgsql/9.5/data/ ! -perm 600 -type f | wc -l` stdout.strip is expected to be <= 3","run_time":0.561209942,"start_time":"2020-06-19T18:47:46+00:00"},{"status":"passed","code_desc":"Command: `find /var/lib/pgsql/9.5/data/ ! -perm 700 -type d | wc -l` stdout.strip is expected to cmp == \"0\"","run_time":0.395133225,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"Directory /var/lib/pgsql/data is expected to be owned by \"root\"","run_time":0.007555893,"start_time":"2020-06-19T18:47:47+00:00","message":"expected `Directory /var/lib/pgsql/data.owned_by?(\"root\")` to return true, got false"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data is expected to be grouped into \"root\"","run_time":0.00706997,"start_time":"2020-06-19T18:47:47+00:00"}]},{"id":"V-72841","title":"PostgreSQL must be configured to prohibit or restrict the use of\n\torganization-defined functions, ports, protocols, and/or services, as defined\n\tin the PPSM CAL and vulnerability assessments.","desc":"In order to prevent unauthorized connection of devices, unauthorized\n\ttransfer of information, or unauthorized tunneling (i.e., embedding of data\n\ttypes within data types), organizations must disable or restrict unused or\n\tunnecessary physical and logical ports/protocols/services on information\n\tsystems.\n\n    Applications are capable of providing a wide variety of functions and\n\tservices. Some of the functions and services provided by default may not be\n\tnecessary to support essential organizational operations. Additionally, it is\n\tsometimes convenient to provide multiple services from a single component\n\t(e.g., email and web services); however, doing so increases risk over limiting\n\tthe services provided by any one component.\n\n    To support the requirements and principles of least functionality, the\n\tapplication must support the organizational requirements providing only\n\tessential capabilities and limiting the use of ports, protocols, and/or\n\tservices to only those required, authorized, and approved to conduct official\n\tbusiness or to address authorized quality of life issues.\n\n    Database Management Systems using ports, protocols, and services deemed\n\tunsafe are open to attack through those ports, protocols, and services. This\n\tcan allow unauthorized access to the database and through the database to other\n\tcomponents of the information system.","descriptions":[{"label":"default","data":"In order to prevent unauthorized connection of devices, unauthorized\n\ttransfer of information, or unauthorized tunneling (i.e., embedding of data\n\ttypes within data types), organizations must disable or restrict unused or\n\tunnecessary physical and logical ports/protocols/services on information\n\tsystems.\n\n    Applications are capable of providing a wide variety of functions and\n\tservices. Some of the functions and services provided by default may not be\n\tnecessary to support essential organizational operations. Additionally, it is\n\tsometimes convenient to provide multiple services from a single component\n\t(e.g., email and web services); however, doing so increases risk over limiting\n\tthe services provided by any one component.\n\n    To support the requirements and principles of least functionality, the\n\tapplication must support the organizational requirements providing only\n\tessential capabilities and limiting the use of ports, protocols, and/or\n\tservices to only those required, authorized, and approved to conduct official\n\tbusiness or to address authorized quality of life issues.\n\n    Database Management Systems using ports, protocols, and services deemed\n\tunsafe are open to attack through those ports, protocols, and services. This\n\tcan allow unauthorized access to the database and through the database to other\n\tcomponents of the information system."},{"label":"check","data":"As the database administrator, run the following SQL:\n\n\t$ psql -c \"SHOW port\"\n\n\tIf the currently defined port configuration is deemed prohibited, this is a\n\tfinding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n\tenvironment variables. See supplementary content APPENDIX-F for instructions on\n\tconfiguring PGDATA and APPENDIX-H for PGVER.\n\n\tTo change the listening port of the database, as the database administrator,\n\tchange the following setting in postgresql.conf:\n\n\t$ sudo su - postgres\n\t$ vi $PGDATA/postgresql.conf\n\t\n\tChange the port parameter to the desired port.\n\n\tNext, restart the database:\n\n\t# SYSTEMD SERVER ONLY\n\t$ sudo systemctl restart postgresql-${PGVER?}\n\t\n\t# INITD SERVER ONLY\n\t$ sudo service postgresql-${PGVER?} restart\n\n\tNote: psql uses the default port 5432 by default. This can be changed by\n\tspecifying the port with psql or by setting the PGPORT environment variable:\n\n\t$ psql -p 5432 -c \"SHOW port\"\n\t$ export PGPORT=5432"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000142-DB-000094","gid":"V-72841","rid":"SV-87493r2_rule","stig_id":"PGS9-00-000100","fix_id":"F-79283r5_fix","cci":["CCI-000382","CCI-001762"],"nist":["CM-7 b","CM-7 (1) (b)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72841\" do\r\n  title \"PostgreSQL must be configured to prohibit or restrict the use of\r\n\torganization-defined functions, ports, protocols, and/or services, as defined\r\n\tin the PPSM CAL and vulnerability assessments.\"\r\n  desc  \"In order to prevent unauthorized connection of devices, unauthorized\r\n\ttransfer of information, or unauthorized tunneling (i.e., embedding of data\r\n\ttypes within data types), organizations must disable or restrict unused or\r\n\tunnecessary physical and logical ports/protocols/services on information\r\n\tsystems.\r\n\r\n    Applications are capable of providing a wide variety of functions and\r\n\tservices. Some of the functions and services provided by default may not be\r\n\tnecessary to support essential organizational operations. Additionally, it is\r\n\tsometimes convenient to provide multiple services from a single component\r\n\t(e.g., email and web services); however, doing so increases risk over limiting\r\n\tthe services provided by any one component.\r\n\r\n    To support the requirements and principles of least functionality, the\r\n\tapplication must support the organizational requirements providing only\r\n\tessential capabilities and limiting the use of ports, protocols, and/or\r\n\tservices to only those required, authorized, and approved to conduct official\r\n\tbusiness or to address authorized quality of life issues.\r\n\r\n    Database Management Systems using ports, protocols, and services deemed\r\n\tunsafe are open to attack through those ports, protocols, and services. This\r\n\tcan allow unauthorized access to the database and through the database to other\r\n\tcomponents of the information system.\"\r\n\r\n  \timpact 0.5\r\n  \ttag \"severity\": \"medium\"\r\n  \ttag \"gtitle\": \"SRG-APP-000142-DB-000094\"\r\n  \ttag \"gid\": \"V-72841\"\r\n  \ttag \"rid\": \"SV-87493r2_rule\"\r\n  \ttag \"stig_id\": \"PGS9-00-000100\"\r\n  \ttag \"fix_id\": \"F-79283r5_fix\"\r\n  \ttag \"cci\": [\"CCI-000382\", \"CCI-001762\"]\r\n  \ttag \"nist\": [\"CM-7 b\", \"CM-7 (1) (b)\", \"Rev_4\"]\r\n  \ttag \"false_negatives\": nil\r\n  \ttag \"false_positives\": nil\r\n  \ttag \"documentable\": false\r\n  \ttag \"mitigations\": nil\r\n  \ttag \"severity_override_guidance\": false\r\n  \ttag \"potential_impacts\": nil\r\n  \ttag \"third_party_tools\": nil\r\n  \ttag \"mitigation_controls\": nil\r\n  \ttag \"responsibility\": nil\r\n  \ttag \"ia_controls\": nil\r\n  \tdesc \"check\", \"As the database administrator, run the following SQL:\r\n\r\n\t$ psql -c \\\"SHOW port\\\"\r\n\r\n\tIf the currently defined port configuration is deemed prohibited, this is a\r\n\tfinding.\"\r\n\r\n  \tdesc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n\tenvironment variables. See supplementary content APPENDIX-F for instructions on\r\n\tconfiguring PGDATA and APPENDIX-H for PGVER.\r\n\r\n\tTo change the listening port of the database, as the database administrator,\r\n\tchange the following setting in postgresql.conf:\r\n\r\n\t$ sudo su - postgres\r\n\t$ vi $PGDATA/postgresql.conf\r\n\t\r\n\tChange the port parameter to the desired port.\r\n\r\n\tNext, restart the database:\r\n\r\n\t# SYSTEMD SERVER ONLY\r\n\t$ sudo systemctl restart postgresql-${PGVER?}\r\n\t\r\n\t# INITD SERVER ONLY\r\n\t$ sudo service postgresql-${PGVER?} restart\r\n\r\n\tNote: psql uses the default port 5432 by default. This can be changed by\r\n\tspecifying the port with psql or by setting the PGPORT environment variable:\r\n\r\n\t$ psql -p 5432 -c \\\"SHOW port\\\"\r\n\t$ export PGPORT=5432\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW port;', [pg_db]) do\r\n    its('output') { should eq pg_port }\r\n  end\r\n\r\n  if virtualization.system == 'docker'\r\n\tdescribe \"The docker container must have networking tools to check its open ports and their processes\" do\r\n\t\tskip \"This system is a docker container and the check for the pg_port status should be tested manually or specified through the docker configuration\"\r\n\tend\r\n\r\n  else\r\n    describe port(pg_port) do\r\n      it { should be_listening }\r\n      its('processes') { should include 'postgres' }\r\n    end \r\n end\r\nend\r\n","source_location":{"line":13,"ref":"controls/V-72841.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SHOW port; output is expected to eq \"5432\"","run_time":0.000124641,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"skipped","code_desc":"The docker container must have networking tools to check its open ports and their processes","run_time":5.925e-06,"start_time":"2020-06-19T18:47:47+00:00","resource":"","skip_message":"This system is a docker container and the check for the pg_port status should be tested manually or specified through the docker configuration"}]},{"id":"V-72843","title":"PostgreSQL must produce audit records containing sufficient\n          information to establish the outcome (success or failure) of the events.","desc":"Information system auditing capability is critical for accurate\n          forensic analysis. Without information about the outcome of events, security\n          personnel cannot make an accurate assessment as to whether an attack was\n          successful or if changes were made to the security state of the system.\n  \n          Event outcomes can include indicators of event success or failure and\n          event-specific results (e.g., the security state of the information system\n          after the event occurred). As such, they also provide a means to measure the\n          impact of an event and help authorized personnel to determine the appropriate\n          response.","descriptions":[{"label":"default","data":"Information system auditing capability is critical for accurate\n          forensic analysis. Without information about the outcome of events, security\n          personnel cannot make an accurate assessment as to whether an attack was\n          successful or if changes were made to the security state of the system.\n  \n          Event outcomes can include indicators of event success or failure and\n          event-specific results (e.g., the security state of the information system\n          after the event occurred). As such, they also provide a means to measure the\n          impact of an event and help authorized personnel to determine the appropriate\n          response."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n    variable. See supplementary content APPENDIX-F for instructions on configuring\n    PGDATA.\n    \n    As a database administrator (shown here as \"postgres\"), create a table,\n    insert a value, alter the table and update the table by running the following\n    SQL:\n    \n    CREATE TABLE stig_test(id INT);\n    INSERT INTO stig_test(id) VALUES (0);\n    ALTER TABLE stig_test ADD COLUMN name text;\n    UPDATE stig_test SET id = 1 WHERE id = 0;\n    \n    Next, as a user without access to the stig_test table, run the following SQL:\n\n    INSERT INTO stig_test(id) VALUES (1);\n    ALTER TABLE stig_test DROP COLUMN name;\n    UPDATE stig_test SET id = 0 WHERE id = 1;\n\n    The prior SQL should generate errors:\n\n    ERROR: permission denied for relation stig_test\n    ERROR: must be owner of relation stig_test\n    ERROR: permission denied for relation stig_test\n\n    Now, as the database administrator, drop the test table by running the\n    following SQL:\n\n    DROP TABLE stig_test;\n\n    Now verify the errors were logged:\n    $ sudo su - postgres\n    $ cat ${PGDATA?}/pg_log/<latest_logfile>$PGDATA/\n    < 2016-02-23 14:51:31.103 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE\n    stig_test(id INT);,<none>\n    < 2016-02-23 14:51:44.835 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,2,1,WRITE,INSERT,,,INSERT INTO\n    stig_test(id) VALUES (0);,<none>\n    < 2016-02-23 14:53:25.805 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,3,1,DDL,ALTER TABLE,,,ALTER TABLE\n    stig_test ADD COLUMN name text;,<none>\n    < 2016-02-23 14:53:54.381 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,4,1,WRITE,UPDATE,,,UPDATE stig_test\n    SET id = 1 WHERE id = 0;,<none>\n    < 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >ERROR: permission denied for relation stig_test\n    < 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >STATEMENT: INSERT INTO stig_test(id) VALUES (1);\n    < 2016-02-23 14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >ERROR: must be owner of relation stig_test\n    < 2016-02-23 14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >STATEMENT: ALTER TABLE stig_test DROP COLUMN name;\n    < 2016-02-23 14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >ERROR: permission denied for relation stig_test\n    < 2016-02-23 14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >STATEMENT: UPDATE stig_test SET id = 0 WHERE id = 1;\n    < 2016-02-23 14:55:23.723 EDT psql postgres postgres 570bf307.3b0a 2016-04-11\n    14:55:03 EDT [local] >LOG: AUDIT: SESSION,1,1,DDL,DROP TABLE,,,DROP TABLE\n    stig_test;,<none>\n\n    If audit records exist without the outcome of the event that occurred, this is\n    a finding."},{"label":"fix","data":"Using pgaudit PostgreSQL can be configured to audit various facets\n    of PostgreSQL. See supplementary content APPENDIX-B for documentation on\n    installing pgaudit.\n\n    All errors, denials and unsuccessful requests are logged if logging is enabled.\n    See supplementary content APPENDIX-C for documentation on enabling logging.\n\n    Note: The following instructions use the PGDATA and PGVER environment\n    variables. See supplementary content APPENDIX-F for instructions on configuring\n    PGDATA and APPENDIX-H for PGVER.\n\n    With pgaudit and logging enabled, set the following configuration settings in\n    postgresql.conf, as the database administrator (shown here as \"postgres\"), to\n    the following:\n\n    $ sudo su - postgres\n    $ vi ${PGDATA?}/postgresql.conf\n    pgaudit.log_catalog='on'\n    pgaudit.log_level='log'\n    pgaudit.log_parameter='on'\n    pgaudit.log_statement_once='off'\n    pgaudit.log='all, -misc'\n\n    Next, tune the following logging configurations in postgresql.conf:\n\n    $ sudo su - postgres\n    $ vi ${PGDATA?}/postgresql.conf\n    log_line_prefix = '< %m %u %d %e: >'\n    log_error_verbosity = default\n\n    Last, as the system administrator, restart PostgreSQL:\n\n    # SYSTEMD SERVER ONLY\n    $ sudo systemctl reload postgresql-${PGVER?}\n\n    # INITD SERVER ONLY\n    $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000099-DB-000043","gid":"V-72843","rid":"SV-87495r3_rule","stig_id":"PGS9-00-000200","fix_id":"F-79285r5_fix","cci":["CCI-000134"],"nist":["AU-3","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"  control \"V-72843\" do\r\n    title \"PostgreSQL must produce audit records containing sufficient\r\n          information to establish the outcome (success or failure) of the events.\"\r\n    desc  \"Information system auditing capability is critical for accurate\r\n          forensic analysis. Without information about the outcome of events, security\r\n          personnel cannot make an accurate assessment as to whether an attack was\r\n          successful or if changes were made to the security state of the system.\r\n  \r\n          Event outcomes can include indicators of event success or failure and\r\n          event-specific results (e.g., the security state of the information system\r\n          after the event occurred). As such, they also provide a means to measure the\r\n          impact of an event and help authorized personnel to determine the appropriate\r\n          response.\"\r\n\r\n    impact 0.5\r\n    tag \"severity\": \"medium\"\r\n    tag \"gtitle\": \"SRG-APP-000099-DB-000043\"\r\n    tag \"gid\": \"V-72843\"\r\n    tag \"rid\": \"SV-87495r3_rule\"\r\n    tag \"stig_id\": \"PGS9-00-000200\"\r\n    tag \"fix_id\": \"F-79285r5_fix\"\r\n    tag \"cci\": [\"CCI-000134\"]\r\n    tag \"nist\": [\"AU-3\", \"Rev_4\"]\r\n    tag \"false_negatives\": nil\r\n    tag \"false_positives\": nil\r\n    tag \"documentable\": false\r\n    tag \"mitigations\": nil\r\n    tag \"severity_override_guidance\": false\r\n    tag \"potential_impacts\": nil\r\n    tag \"third_party_tools\": nil\r\n    tag \"mitigation_controls\": nil\r\n    tag \"responsibility\": nil\r\n    tag \"ia_controls\": nil\r\n    desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n    variable. See supplementary content APPENDIX-F for instructions on configuring\r\n    PGDATA.\r\n    \r\n    As a database administrator (shown here as \\\"postgres\\\"), create a table,\r\n    insert a value, alter the table and update the table by running the following\r\n    SQL:\r\n    \r\n    CREATE TABLE stig_test(id INT);\r\n    INSERT INTO stig_test(id) VALUES (0);\r\n    ALTER TABLE stig_test ADD COLUMN name text;\r\n    UPDATE stig_test SET id = 1 WHERE id = 0;\r\n    \r\n    Next, as a user without access to the stig_test table, run the following SQL:\r\n\r\n    INSERT INTO stig_test(id) VALUES (1);\r\n    ALTER TABLE stig_test DROP COLUMN name;\r\n    UPDATE stig_test SET id = 0 WHERE id = 1;\r\n\r\n    The prior SQL should generate errors:\r\n\r\n    ERROR: permission denied for relation stig_test\r\n    ERROR: must be owner of relation stig_test\r\n    ERROR: permission denied for relation stig_test\r\n\r\n    Now, as the database administrator, drop the test table by running the\r\n    following SQL:\r\n\r\n    DROP TABLE stig_test;\r\n\r\n    Now verify the errors were logged:\r\n    $ sudo su - postgres\r\n    $ cat ${PGDATA?}/pg_log/<latest_logfile>$PGDATA/\r\n    < 2016-02-23 14:51:31.103 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\r\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE\r\n    stig_test(id INT);,<none>\r\n    < 2016-02-23 14:51:44.835 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\r\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,2,1,WRITE,INSERT,,,INSERT INTO\r\n    stig_test(id) VALUES (0);,<none>\r\n    < 2016-02-23 14:53:25.805 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\r\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,3,1,DDL,ALTER TABLE,,,ALTER TABLE\r\n    stig_test ADD COLUMN name text;,<none>\r\n    < 2016-02-23 14:53:54.381 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\r\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,4,1,WRITE,UPDATE,,,UPDATE stig_test\r\n    SET id = 1 WHERE id = 0;,<none>\r\n    < 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\r\n    14:51:22 EDT [local] >ERROR: permission denied for relation stig_test\r\n    < 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\r\n    14:51:22 EDT [local] >STATEMENT: INSERT INTO stig_test(id) VALUES (1);\r\n    < 2016-02-23 14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\r\n    14:51:22 EDT [local] >ERROR: must be owner of relation stig_test\r\n    < 2016-02-23 14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\r\n    14:51:22 EDT [local] >STATEMENT: ALTER TABLE stig_test DROP COLUMN name;\r\n    < 2016-02-23 14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\r\n    14:51:22 EDT [local] >ERROR: permission denied for relation stig_test\r\n    < 2016-02-23 14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\r\n    14:51:22 EDT [local] >STATEMENT: UPDATE stig_test SET id = 0 WHERE id = 1;\r\n    < 2016-02-23 14:55:23.723 EDT psql postgres postgres 570bf307.3b0a 2016-04-11\r\n    14:55:03 EDT [local] >LOG: AUDIT: SESSION,1,1,DDL,DROP TABLE,,,DROP TABLE\r\n    stig_test;,<none>\r\n\r\n    If audit records exist without the outcome of the event that occurred, this is\r\n    a finding.\"\r\n\r\n    desc \"fix\", \"Using pgaudit PostgreSQL can be configured to audit various facets\r\n    of PostgreSQL. See supplementary content APPENDIX-B for documentation on\r\n    installing pgaudit.\r\n\r\n    All errors, denials and unsuccessful requests are logged if logging is enabled.\r\n    See supplementary content APPENDIX-C for documentation on enabling logging.\r\n\r\n    Note: The following instructions use the PGDATA and PGVER environment\r\n    variables. See supplementary content APPENDIX-F for instructions on configuring\r\n    PGDATA and APPENDIX-H for PGVER.\r\n\r\n    With pgaudit and logging enabled, set the following configuration settings in\r\n    postgresql.conf, as the database administrator (shown here as \\\"postgres\\\"), to\r\n    the following:\r\n\r\n    $ sudo su - postgres\r\n    $ vi ${PGDATA?}/postgresql.conf\r\n    pgaudit.log_catalog='on'\r\n    pgaudit.log_level='log'\r\n    pgaudit.log_parameter='on'\r\n    pgaudit.log_statement_once='off'\r\n    pgaudit.log='all, -misc'\r\n\r\n    Next, tune the following logging configurations in postgresql.conf:\r\n\r\n    $ sudo su - postgres\r\n    $ vi ${PGDATA?}/postgresql.conf\r\n    log_line_prefix = '< %m %u %d %e: >'\r\n    log_error_verbosity = default\r\n\r\n    Last, as the system administrator, restart PostgreSQL:\r\n\r\n    # SYSTEMD SERVER ONLY\r\n    $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n    # INITD SERVER ONLY\r\n    $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n    admin_sql = postgres_session(pg_dba, pg_dba_password, pg_host)    \r\n\r\n    describe admin_sql.query('DROP TABLE IF EXISTS stig_test;', [pg_db]) do\r\n      its('output') { should eq 'DROP TABLE' }\r\n    end\r\n\r\n    describe admin_sql.query('CREATE TABLE stig_test(id INT);', [pg_db]) do\r\n      its('output') { should eq 'CREATE TABLE' }\r\n    end\r\n\r\n    describe admin_sql.query('INSERT INTO stig_test(id) VALUES (0);', [pg_db]) do\r\n      its('output') { should eq 'INSERT 0 1' }\r\n    end\r\n\r\n    describe admin_sql.query('ALTER TABLE stig_test ADD COLUMN name text;', [pg_db]) do\r\n      its('output') { should eq 'ALTER TABLE' }\r\n    end\r\n\r\n    describe admin_sql.query('UPDATE stig_test SET id = 1 WHERE id = 0;', [pg_db]) do\r\n      its('output') { should eq 'UPDATE 1' }\r\n    end\r\n\r\n    describe admin_sql.query('show pgaudit.log_catalog') do\r\n      its('output') { should eq 'on' }\r\n    end\r\n\r\n    describe admin_sql.query('show pgaudit.log_level') do\r\n      its('output') { should eq 'log' }\r\n    end\r\n\r\n    describe admin_sql.query('show pgaudit.log_parameter') do\r\n      its('output') { should eq 'on' }\r\n    end\r\n\r\n    describe admin_sql.query('show pgaudit.log_statement_once') do\r\n      its('output') { should eq 'off' }\r\n    end\r\n\r\n    describe admin_sql.query('show pgaudit.log') do\r\n      its('output') { should eq 'ddl,read,role, write' }\r\n    end\r\n\r\n    describe admin_sql.query('CREATE ROLE foostigtest LOGIN CONNECTION LIMIT 100;') do\r\n      its('output') { should eq 'CREATE ROLE' }\r\n    end\r\n\r\n    describe admin_sql.query('SET ROLE foostigtest; INSERT INTO stig_test(id) VALUES (1);', [pg_db]) do\r\n      its('output') { should match /ERROR:  permission denied for relation stig_test/ }\r\n    end\r\n\r\n    describe admin_sql.query('SET ROLE foostigtest; ALTER TABLE stig_test DROP COLUMN name;', [pg_db]) do\r\n      its('output') { should match /ERROR:  must be owner of relation stig_test/ }\r\n    end\r\n    \r\n    describe admin_sql.query('SET ROLE foostigtest; UPDATE stig_test SET id = 0 WHERE id = 1;', [pg_db]) do\r\n      its('output') { should match /ERROR:  permission denied for relation stig_test/ }\r\n    end\r\n\r\n   describe admin_sql.query('DROP TABLE stig_test;', [pg_db]) do\r\n      its('output') { should eq 'DROP TABLE' }\r\n   end\r\n  \r\n  describe admin_sql.query('DROP ROLE foostigtest') do\r\n      its('output') { should eq 'DROP ROLE' }\r\n  end   \r\n\r\n    describe postgres_conf(pg_conf_file) do\r\n      its('log_error_verbosity') { should eq 'default' }\r\n      its('log_duration') { should eq 'on'}\r\n    end\r\n  end\r\n","source_location":{"line":13,"ref":"controls/V-72843.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: DROP TABLE IF EXISTS stig_test; output is expected to eq \"DROP TABLE\"","run_time":0.000109434,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: CREATE TABLE stig_test(id INT); output is expected to eq \"CREATE TABLE\"","run_time":9.663e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: INSERT INTO stig_test(id) VALUES (0); output is expected to eq \"INSERT 0 1\"","run_time":9.3768e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: ALTER TABLE stig_test ADD COLUMN name text; output is expected to eq \"ALTER TABLE\"","run_time":8.8297e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: UPDATE stig_test SET id = 1 WHERE id = 0; output is expected to eq \"UPDATE 1\"","run_time":0.000138586,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"PostgreSQL query with errors: show pgaudit.log_catalog output is expected to eq \"on\"","run_time":0.00032726,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: \"on\"\n     got: \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log_catalog\\\"\\ncommand terminated with exit code 1\\n\"\n\n(compared using ==)\n\nDiff:\n@@ -1,2 +1,4 @@\n-on\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log_catalog\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: show pgaudit.log_level output is expected to eq \"log\"","run_time":0.000235909,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: \"log\"\n     got: \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log_level\\\"\\ncommand terminated with exit code 1\\n\"\n\n(compared using ==)\n\nDiff:\n@@ -1,2 +1,4 @@\n-log\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log_level\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: show pgaudit.log_parameter output is expected to eq \"on\"","run_time":0.000230393,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: \"on\"\n     got: \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log_parameter\\\"\\ncommand terminated with exit code 1\\n\"\n\n(compared using ==)\n\nDiff:\n@@ -1,2 +1,4 @@\n-on\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log_parameter\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: show pgaudit.log_statement_once output is expected to eq \"off\"","run_time":0.000231246,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: \"off\"\n     got: \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log_statement_once\\\"\\ncommand terminated with exit code 1\\n\"\n\n(compared using ==)\n\nDiff:\n@@ -1,2 +1,4 @@\n-off\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log_statement_once\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: show pgaudit.log output is expected to eq \"ddl,read,role, write\"","run_time":0.000264645,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: \"ddl,read,role, write\"\n     got: \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\"\n\n(compared using ==)\n\nDiff:\n@@ -1,2 +1,4 @@\n-ddl,read,role, write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"passed","code_desc":"PostgreSQL query: CREATE ROLE foostigtest LOGIN CONNECTION LIMIT 100; output is expected to eq \"CREATE ROLE\"","run_time":0.000102887,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query with errors: SET ROLE foostigtest; INSERT INTO stig_test(id) VALUES (1); output is expected to match /ERROR:  permission denied for relation stig_test/","run_time":0.000107694,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query with errors: SET ROLE foostigtest; ALTER TABLE stig_test DROP COLUMN name; output is expected to match /ERROR:  must be owner of relation stig_test/","run_time":8.8523e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query with errors: SET ROLE foostigtest; UPDATE stig_test SET id = 0 WHERE id = 1; output is expected to match /ERROR:  permission denied for relation stig_test/","run_time":0.000117577,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: DROP TABLE stig_test; output is expected to eq \"DROP TABLE\"","run_time":9.6012e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: DROP ROLE foostigtest output is expected to eq \"DROP ROLE\"","run_time":8.9249e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL Configuration log_error_verbosity is expected to eq \"default\"","run_time":0.000108164,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL Configuration log_duration is expected to eq \"on\"","run_time":0.000106555,"start_time":"2020-06-19T18:47:47+00:00"}]},{"id":"V-72849","title":"PostgreSQL must integrate with an organization-level\n  authentication/access mechanism providing account management and automation for\n  all users, groups, roles, and any other principals.","desc":"Enterprise environments make account management for applications and\n  databases challenging and complex. A manual process for account management\n  functions adds the risk of a potential oversight or other error. Managing\n  accounts for the same person in multiple places is inefficient and prone to\n  problems with consistency and synchronization.\n\n    A comprehensive application account management process that includes\n  automation helps to ensure that accounts designated as requiring attention are\n  consistently and promptly addressed.\n\n  Examples include, but are not limited to, using automation to take action\n  on multiple accounts designated as inactive, suspended, or terminated, or by\n  disabling accounts located in non-centralized account stores, such as multiple\n  servers. Account management functions can also include: assignment of group or\n  role membership; identifying account type; specifying user access\n  authorizations (i.e., privileges); account removal, update, or termination; and\n  administrative alerts. The use of automated mechanisms can include, for\n  example: using email or text messaging to notify account managers when users\n  are terminated or transferred; using the information system to monitor account\n  usage; and using automated telephone notification to report atypical system\n  account usage.\n\n  PostgreSQL must be configured to automatically utilize organization-level\n  account management functions, and these functions must immediately enforce the\n  organization's current account policy.\n\n  Automation may be comprised of differing technologies that when placed\n  together contain an overall mechanism supporting an organization's automated\n  account management requirements.","descriptions":[{"label":"default","data":"Enterprise environments make account management for applications and\n  databases challenging and complex. A manual process for account management\n  functions adds the risk of a potential oversight or other error. Managing\n  accounts for the same person in multiple places is inefficient and prone to\n  problems with consistency and synchronization.\n\n    A comprehensive application account management process that includes\n  automation helps to ensure that accounts designated as requiring attention are\n  consistently and promptly addressed.\n\n  Examples include, but are not limited to, using automation to take action\n  on multiple accounts designated as inactive, suspended, or terminated, or by\n  disabling accounts located in non-centralized account stores, such as multiple\n  servers. Account management functions can also include: assignment of group or\n  role membership; identifying account type; specifying user access\n  authorizations (i.e., privileges); account removal, update, or termination; and\n  administrative alerts. The use of automated mechanisms can include, for\n  example: using email or text messaging to notify account managers when users\n  are terminated or transferred; using the information system to monitor account\n  usage; and using automated telephone notification to report atypical system\n  account usage.\n\n  PostgreSQL must be configured to automatically utilize organization-level\n  account management functions, and these functions must immediately enforce the\n  organization's current account policy.\n\n  Automation may be comprised of differing technologies that when placed\n  together contain an overall mechanism supporting an organization's automated\n  account management requirements."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  If all accounts are authenticated by the organization-level\n  authentication/access mechanism, such as LDAP or Kerberos and not by\n  PostgreSQL, this is not a finding.\n\n  As the database administrator (shown here as \"postgres\"), review pg_hba.conf\n  authentication file settings:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n\n  All records must use an auth-method of gss, sspi, or ldap. For details on the\n  specifics of these authentication methods see:\n  http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\n\n  If there are any records with a different auth-method than gss, sspi, or ldap,\n  review the system documentation for justification and approval of these records.\n\n  If there are any records with a different auth-method than gss, sspi, or ldap,\n  that are not documented and approved, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  Integrate PostgreSQL security with an organization-level authentication/access\n  mechanism providing account management for all users, groups, roles, and any\n  other principals.\n\n  As the database administrator (shown here as \"postgres\"), edit pg_hba.conf\n  authentication file:\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n\n  For each PostgreSQL-managed account that is not documented and approved, either\n  transfer it to management by the external mechanism, or document the need for\n  it and obtain approval, as appropriate."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000023-DB-000001","gid":"V-72849","rid":"SV-87501r1_rule","stig_id":"PGS9-00-000500","fix_id":"F-79291r1_fix","cci":["CCI-000015"],"nist":["AC-2 (1)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72849\" do\r\n  title \"PostgreSQL must integrate with an organization-level\r\n  authentication/access mechanism providing account management and automation for\r\n  all users, groups, roles, and any other principals.\"\r\n  desc  \"Enterprise environments make account management for applications and\r\n  databases challenging and complex. A manual process for account management\r\n  functions adds the risk of a potential oversight or other error. Managing\r\n  accounts for the same person in multiple places is inefficient and prone to\r\n  problems with consistency and synchronization.\r\n\r\n    A comprehensive application account management process that includes\r\n  automation helps to ensure that accounts designated as requiring attention are\r\n  consistently and promptly addressed.\r\n\r\n  Examples include, but are not limited to, using automation to take action\r\n  on multiple accounts designated as inactive, suspended, or terminated, or by\r\n  disabling accounts located in non-centralized account stores, such as multiple\r\n  servers. Account management functions can also include: assignment of group or\r\n  role membership; identifying account type; specifying user access\r\n  authorizations (i.e., privileges); account removal, update, or termination; and\r\n  administrative alerts. The use of automated mechanisms can include, for\r\n  example: using email or text messaging to notify account managers when users\r\n  are terminated or transferred; using the information system to monitor account\r\n  usage; and using automated telephone notification to report atypical system\r\n  account usage.\r\n\r\n  PostgreSQL must be configured to automatically utilize organization-level\r\n  account management functions, and these functions must immediately enforce the\r\n  organization's current account policy.\r\n\r\n  Automation may be comprised of differing technologies that when placed\r\n  together contain an overall mechanism supporting an organization's automated\r\n  account management requirements.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000023-DB-000001\"\r\n  tag \"gid\": \"V-72849\"\r\n  tag \"rid\": \"SV-87501r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-000500\"\r\n  tag \"fix_id\": \"F-79291r1_fix\"\r\n  tag \"cci\": [\"CCI-000015\"]\r\n  tag \"nist\": [\"AC-2 (1)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  If all accounts are authenticated by the organization-level\r\n  authentication/access mechanism, such as LDAP or Kerberos and not by\r\n  PostgreSQL, this is not a finding.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), review pg_hba.conf\r\n  authentication file settings:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_hba.conf\r\n\r\n  All records must use an auth-method of gss, sspi, or ldap. For details on the\r\n  specifics of these authentication methods see:\r\n  http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\r\n\r\n  If there are any records with a different auth-method than gss, sspi, or ldap,\r\n  review the system documentation for justification and approval of these records.\r\n\r\n  If there are any records with a different auth-method than gss, sspi, or ldap,\r\n  that are not documented and approved, this is a finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  Integrate PostgreSQL security with an organization-level authentication/access\r\n  mechanism providing account management for all users, groups, roles, and any\r\n  other principals.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), edit pg_hba.conf\r\n  authentication file:\r\n\r\n  $ sudo su - postgres\r\n  $ vi ${PGDATA?}/pg_hba.conf\r\n\r\n  For each PostgreSQL-managed account that is not documented and approved, either\r\n  transfer it to management by the external mechanism, or document the need for\r\n  it and obtain approval, as appropriate.\"\r\n\r\n  describe postgres_hba_conf(pg_hba_conf_file).where { type == 'local' } do\r\n    its('auth_method.uniq') { should be_in approved_auth_methods }\r\n  end\r\n\r\n  describe postgres_hba_conf(pg_hba_conf_file).where { database == 'replication' } do\r\n    its('auth_method.uniq') { should be_in approved_auth_methods }\r\n  end\r\n  \r\n  describe postgres_hba_conf(pg_hba_conf_file).where { type == 'host' } do\r\n    its('auth_method.uniq') { should be_in approved_auth_methods }\r\n  end\r\nend\r\n","source_location":{"line":5,"ref":"controls/V-72849.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with type == \"local\" auth_method.uniq is expected to be in \"gss\", \"sspi\", and \"ldap\"","run_time":0.00018964,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with database == \"replication\" auth_method.uniq is expected to be in \"gss\", \"sspi\", and \"ldap\"","run_time":0.000144064,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with type == \"host\" auth_method.uniq is expected to be in \"gss\", \"sspi\", and \"ldap\"","run_time":0.000269078,"start_time":"2020-06-19T18:47:47+00:00"}]},{"id":"V-72851","title":"PostgreSQL must provide non-privileged users with error messages that\n  provide information necessary for corrective actions without revealing\n  information that could be exploited by adversaries.","desc":"Any PostgreSQL or associated application providing too much\n  information in error messages on the screen or printout risks compromising the\n  data and security of the system. The structure and content of error messages\n  need to be carefully considered by the organization and development team.\n\n  Databases can inadvertently provide a wealth of information to an attacker\n  through improperly handled error messages. In addition to sensitive business or\n  personal information, database errors can provide host names, IP addresses,\n  user names, and other system information not required for troubleshooting but\n  very useful to someone targeting the system.\n\n  Carefully consider the structure/content of error messages. The extent to\n  which information systems are able to identify and handle error conditions is\n  guided by organizational policy and operational requirements. Information that\n  could be exploited by adversaries includes, for example, logon attempts with\n  passwords entered by mistake as the username, mission/business information that\n  can be derived from (if not stated explicitly by) information recorded, and\n  personal information, such as account numbers, social security numbers, and\n  credit card numbers.","descriptions":[{"label":"default","data":"Any PostgreSQL or associated application providing too much\n  information in error messages on the screen or printout risks compromising the\n  data and security of the system. The structure and content of error messages\n  need to be carefully considered by the organization and development team.\n\n  Databases can inadvertently provide a wealth of information to an attacker\n  through improperly handled error messages. In addition to sensitive business or\n  personal information, database errors can provide host names, IP addresses,\n  user names, and other system information not required for troubleshooting but\n  very useful to someone targeting the system.\n\n  Carefully consider the structure/content of error messages. The extent to\n  which information systems are able to identify and handle error conditions is\n  guided by organizational policy and operational requirements. Information that\n  could be exploited by adversaries includes, for example, logon attempts with\n  passwords entered by mistake as the username, mission/business information that\n  can be derived from (if not stated explicitly by) information recorded, and\n  personal information, such as account numbers, social security numbers, and\n  credit card numbers."},{"label":"check","data":"As the database administrator, run the following SQL:\n\n  SELECT current_setting('client_min_messages');\n\n  If client_min_messages is not set to error, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  As the database administrator, edit \"postgresql.conf\":\n\n  $ sudo su - postgres\n  $ vi $PGDATA/postgresql.conf\n\n  Change the client_min_messages parameter to be \"error\":\n\n  client_min_messages = error\n\n  Reload the server with the new configuration (this just reloads settings\n  currently in memory; it will not cause an interruption):\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY\n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000266-DB-000162","gid":"V-72851","rid":"SV-87503r3_rule","stig_id":"PGS9-00-000600","fix_id":"F-79293r3_fix","cci":["CCI-001312"],"nist":["SI-11 a","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72851\" do\r\n  title \"PostgreSQL must provide non-privileged users with error messages that\r\n  provide information necessary for corrective actions without revealing\r\n  information that could be exploited by adversaries.\"\r\n  desc  \"Any PostgreSQL or associated application providing too much\r\n  information in error messages on the screen or printout risks compromising the\r\n  data and security of the system. The structure and content of error messages\r\n  need to be carefully considered by the organization and development team.\r\n\r\n  Databases can inadvertently provide a wealth of information to an attacker\r\n  through improperly handled error messages. In addition to sensitive business or\r\n  personal information, database errors can provide host names, IP addresses,\r\n  user names, and other system information not required for troubleshooting but\r\n  very useful to someone targeting the system.\r\n\r\n  Carefully consider the structure/content of error messages. The extent to\r\n  which information systems are able to identify and handle error conditions is\r\n  guided by organizational policy and operational requirements. Information that\r\n  could be exploited by adversaries includes, for example, logon attempts with\r\n  passwords entered by mistake as the username, mission/business information that\r\n  can be derived from (if not stated explicitly by) information recorded, and\r\n  personal information, such as account numbers, social security numbers, and\r\n  credit card numbers.\"\r\n  \r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000266-DB-000162\"\r\n  tag \"gid\": \"V-72851\"\r\n  tag \"rid\": \"SV-87503r3_rule\"\r\n  tag \"stig_id\": \"PGS9-00-000600\"\r\n  tag \"fix_id\": \"F-79293r3_fix\"\r\n  tag \"cci\": [\"CCI-001312\"]\r\n  tag \"nist\": [\"SI-11 a\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"As the database administrator, run the following SQL:\r\n\r\n  SELECT current_setting('client_min_messages');\r\n\r\n  If client_min_messages is not set to error, this is a finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  As the database administrator, edit \\\"postgresql.conf\\\":\r\n\r\n  $ sudo su - postgres\r\n  $ vi $PGDATA/postgresql.conf\r\n\r\n  Change the client_min_messages parameter to be \\\"error\\\":\r\n\r\n  client_min_messages = error\r\n\r\n  Reload the server with the new configuration (this just reloads settings\r\n  currently in memory; it will not cause an interruption):\r\n\r\n  # SYSTEMD SERVER ONLY\r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY\r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  default = postgres_conf(pg_conf_file)\r\n  override = postgres_conf(pg_user_defined_conf)\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query('SHOW client_min_messages;', [pg_db]) do\r\n   its('output') { should match /^error$/i }\r\n  end\r\n\r\n  cmm_conf = override.client_min_messages ? override : default\r\n  describe cmm_conf do\r\n    its('client_min_messages') { should match /^error$/i }\r\n  end\r\nend\r\n","source_location":{"line":17,"ref":"controls/V-72851.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SHOW client_min_messages; output is expected to match /^error$/i","run_time":0.000127744,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL Configuration client_min_messages is expected to match /^error$/i","run_time":0.000102633,"start_time":"2020-06-19T18:47:47+00:00"}]},{"id":"V-72853","title":"Privileges to change PostgreSQL software modules must be limited.","desc":"If the system were to allow any user to make changes to software\n  libraries, those changes might be implemented without undergoing the\n  appropriate testing and approvals that are part of a robust change management\n  process.\n    \n  Accordingly, only qualified and authorized individuals must be allowed to\n  obtain access to information system components for purposes of initiating\n  changes, including upgrades and modifications.\n      \n  Unmanaged changes that occur to the database software libraries or\n  configuration can lead to unauthorized or compromised installations.","descriptions":[{"label":"default","data":"If the system were to allow any user to make changes to software\n  libraries, those changes might be implemented without undergoing the\n  appropriate testing and approvals that are part of a robust change management\n  process.\n    \n  Accordingly, only qualified and authorized individuals must be allowed to\n  obtain access to information system components for purposes of initiating\n  changes, including upgrades and modifications.\n      \n  Unmanaged changes that occur to the database software libraries or\n  configuration can lead to unauthorized or compromised installations."},{"label":"check","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  As the database administrator (shown here as \"postgres\"), check the\n  permissions of configuration files for the database: \n\n  $ sudo su - postgres \n  $ ls -la ${PGDATA?} \n\n  If any files are not owned by the database owner or have permissions allowing\n  others to modify (write) configuration files, this is a finding. \n\n  As the server administrator, check the permissions on the shared libraries for\n  PostgreSQL: \n\n  $ sudo ls -la /usr/pgsql-${PGVER?}\n  $ sudo ls -la /usr/pgsql-${PGVER?}/bin \n  $ sudo ls -la /usr/pgsql-${PGVER?}/include \n  $ sudo ls -la /usr/pgsql-${PGVER?}/lib \n  $ sudo ls -la /usr/pgsql-${PGVER?}/share \n\n  If any files are not owned by root or have permissions allowing others to\n  modify (write) configuration files, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA and PGVER\n  environment variables. See supplementary content APPENDIX-F for instructions on\n  configuring PGDATA and APPENDIX-H for PGVER.\n\n  As the database administrator (shown here as \"postgres\"), change the\n  ownership and permissions of configuration files in PGDATA:\n\n  $ sudo su - postgres\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 0600 ${PGDATA?}/postgresql.conf\n\n  As the server administrator, change the ownership and permissions of shared\n  objects in /usr/pgsql-${PGVER?}/*.so\n\n  $ sudo chown root:root /usr/pgsql-${PGVER?}/lib/*.so\n  $ sudo chmod 0755 /usr/pgsql-${PGVER?}/lib/*.so\n\n  As the service administrator, change the ownership and permissions of\n  executables in /usr/pgsql-${PGVER?}/bin:\n\n  $ sudo chown root:root /usr/pgsql-${PGVER?}/bin/*\n  $ sudo chmod 0755 /usr/pgsql-${PGVER?}/bin/*"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000133-DB-000179","gid":"V-72853","rid":"SV-87505r2_rule","stig_id":"PGS9-00-000700","fix_id":"F-79295r4_fix","cci":["CCI-001499"],"nist":["CM-5 (6)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72853\" do\r\n  title \"Privileges to change PostgreSQL software modules must be limited.\"\r\n  desc  \"If the system were to allow any user to make changes to software\r\n  libraries, those changes might be implemented without undergoing the\r\n  appropriate testing and approvals that are part of a robust change management\r\n  process.\r\n    \r\n  Accordingly, only qualified and authorized individuals must be allowed to\r\n  obtain access to information system components for purposes of initiating\r\n  changes, including upgrades and modifications.\r\n      \r\n  Unmanaged changes that occur to the database software libraries or\r\n  configuration can lead to unauthorized or compromised installations.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000133-DB-000179\"\r\n  tag \"gid\": \"V-72853\"\r\n  tag \"rid\": \"SV-87505r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-000700\"\r\n  tag \"fix_id\": \"F-79295r4_fix\"\r\n  tag \"cci\": [\"CCI-001499\"]\r\n  tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), check the\r\n  permissions of configuration files for the database: \r\n\r\n  $ sudo su - postgres \r\n  $ ls -la ${PGDATA?} \r\n\r\n  If any files are not owned by the database owner or have permissions allowing\r\n  others to modify (write) configuration files, this is a finding. \r\n\r\n  As the server administrator, check the permissions on the shared libraries for\r\n  PostgreSQL: \r\n\r\n  $ sudo ls -la /usr/pgsql-${PGVER?}\r\n  $ sudo ls -la /usr/pgsql-${PGVER?}/bin \r\n  $ sudo ls -la /usr/pgsql-${PGVER?}/include \r\n  $ sudo ls -la /usr/pgsql-${PGVER?}/lib \r\n  $ sudo ls -la /usr/pgsql-${PGVER?}/share \r\n\r\n  If any files are not owned by root or have permissions allowing others to\r\n  modify (write) configuration files, this is a finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\r\n  environment variables. See supplementary content APPENDIX-F for instructions on\r\n  configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), change the\r\n  ownership and permissions of configuration files in PGDATA:\r\n\r\n  $ sudo su - postgres\r\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\r\n  $ chmod 0600 ${PGDATA?}/postgresql.conf\r\n\r\n  As the server administrator, change the ownership and permissions of shared\r\n  objects in /usr/pgsql-${PGVER?}/*.so\r\n\r\n  $ sudo chown root:root /usr/pgsql-${PGVER?}/lib/*.so\r\n  $ sudo chmod 0755 /usr/pgsql-${PGVER?}/lib/*.so\r\n\r\n  As the service administrator, change the ownership and permissions of\r\n  executables in /usr/pgsql-${PGVER?}/bin:\r\n\r\n  $ sudo chown root:root /usr/pgsql-${PGVER?}/bin/*\r\n  $ sudo chmod 0755 /usr/pgsql-${PGVER?}/bin/*\"\r\n\r\n\r\n  #ver=nil\r\n  #ver=inspec.command(\"psql --version | awk \\'{ print $NF }\\' | awk -F. \\'{ print $1\\\".\\\"$2 }\\'\").stdout.strip\r\n\r\n  describe file(pg_data_dir) do\r\n      it { should be_directory }\r\n      it { should be_owned_by pg_owner }\r\n      its('mode') { should cmp '0700' }\r\n    end\r\n\r\n    pg_shared_dirs.each do |dirs|\r\n      describe file(dirs) do\r\n        it { should be_directory }\r\n        it { should be_owned_by 'root' }\r\n        its('mode') { should cmp '0755' }\r\n      end\r\n    end\r\n  end\r\n","source_location":{"line":9,"ref":"controls/V-72853.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"File /var/lib/pgsql/data is expected to be directory","run_time":0.008681243,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"File /var/lib/pgsql/data is expected to be owned by \"postgres\"","run_time":0.008298329,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"File /var/lib/pgsql/data mode is expected to cmp == \"0700\"","run_time":0.000299678,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: 0700\n     got: 0755\n\n(compared using `cmp` matcher)\n"},{"status":"passed","code_desc":"File /var/lib/pgsql/data is expected to be directory","run_time":0.007166849,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"File /var/lib/pgsql/data is expected to be owned by \"root\"","run_time":0.007526444,"start_time":"2020-06-19T18:47:47+00:00","message":"expected `File /var/lib/pgsql/data.owned_by?(\"root\")` to return true, got false"},{"status":"passed","code_desc":"File /var/lib/pgsql/data mode is expected to cmp == \"0755\"","run_time":0.000253529,"start_time":"2020-06-19T18:47:47+00:00"}]},{"id":"V-72857","title":"If passwords are used for authentication, PostgreSQL must transmit\n  only encrypted representations of passwords.","desc":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n  Authentication based on User ID and Password may be used only when it is\n  not possible to employ a PKI certificate, and requires AO approval.\n\n  In such cases, passwords need to be protected at all times, and encryption\n  is the standard method for protecting passwords during transmission.\n\n  PostgreSQL passwords sent in clear text format across the network are\n  vulnerable to discovery by unauthorized users. Disclosure of passwords may\n  easily lead to unauthorized access to the database.","descriptions":[{"label":"default","data":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n  Authentication based on User ID and Password may be used only when it is\n  not possible to employ a PKI certificate, and requires AO approval.\n\n  In such cases, passwords need to be protected at all times, and encryption\n  is the standard method for protecting passwords during transmission.\n\n  PostgreSQL passwords sent in clear text format across the network are\n  vulnerable to discovery by unauthorized users. Disclosure of passwords may\n  easily lead to unauthorized access to the database."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  As the database administrator (shown here as \"postgres\"), review the\n  authentication entries in pg_hba.conf:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n\n  If any entries use the auth_method (last column in records) \"password\", this\n  is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  As the database administrator (shown here as \"postgres\"), edit pg_hba.conf\n  authentication file and change all entries of \"password\" to \"md5\":\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n  host all all .example.com md5"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000172-DB-000075","gid":"V-72857","rid":"SV-87509r1_rule","stig_id":"PGS9-00-000800","fix_id":"F-79299r1_fix","cci":["CCI-000197"],"nist":["IA-5 (1) (c)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72857\" do\r\n  title \"If passwords are used for authentication, PostgreSQL must transmit\r\n  only encrypted representations of passwords.\"\r\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\r\n\r\n  Authentication based on User ID and Password may be used only when it is\r\n  not possible to employ a PKI certificate, and requires AO approval.\r\n\r\n  In such cases, passwords need to be protected at all times, and encryption\r\n  is the standard method for protecting passwords during transmission.\r\n\r\n  PostgreSQL passwords sent in clear text format across the network are\r\n  vulnerable to discovery by unauthorized users. Disclosure of passwords may\r\n  easily lead to unauthorized access to the database.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000172-DB-000075\"\r\n  tag \"gid\": \"V-72857\"\r\n  tag \"rid\": \"SV-87509r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-000800\"\r\n  tag \"fix_id\": \"F-79299r1_fix\"\r\n  tag \"cci\": [\"CCI-000197\"]\r\n  tag \"nist\": [\"IA-5 (1) (c)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), review the\r\n  authentication entries in pg_hba.conf:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_hba.conf\r\n\r\n  If any entries use the auth_method (last column in records) \\\"password\\\", this\r\n  is a finding.\"\r\n\r\n  desc \"fix\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), edit pg_hba.conf\r\n  authentication file and change all entries of \\\"password\\\" to \\\"md5\\\":\r\n\r\n  $ sudo su - postgres\r\n  $ vi ${PGDATA?}/pg_hba.conf\r\n  host all all .example.com md5\"\r\n\r\n  describe postgres_hba_conf(pg_hba_conf_file) do\r\n    its('auth_method') { should_not include 'password' }\r\n  end\r\nend\r\n","source_location":{"line":5,"ref":"controls/V-72857.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf auth_method is expected not to include \"password\"","run_time":0.000181483,"start_time":"2020-06-19T18:47:47+00:00"}]},{"id":"V-72859","title":"PostgreSQL must enforce approved authorizations for logical access to\n  information and system resources in accordance with applicable access control\n  policies.","desc":"Authentication with a DoD-approved PKI certificate does not\n  necessarily imply authorization to access PostgreSQL. To mitigate the risk of\n  unauthorized access to sensitive information by entities that have been issued\n  certificates by DoD-approved PKIs, all DoD systems, including databases, must\n  be properly configured to implement access control policies.\n\n  Successful authentication must not automatically give an entity access to\n  an asset or security boundary. Authorization procedures and controls must be\n  implemented to ensure each authenticated entity also has a validated and\n  current authorization. Authorization is the process of determining whether an\n  entity, once authenticated, is permitted to access a specific asset.\n  Information systems use access control policies and enforcement mechanisms to\n  implement this requirement.\n\n  Access control policies include identity-based policies, role-based\n  policies, and attribute-based policies. Access enforcement mechanisms include\n  access control lists, access control matrices, and cryptography. These policies\n  and mechanisms must be employed by the application to control access between\n  users (or processes acting on behalf of users) and objects (e.g., devices,\n  files, records, processes, programs, and domains) in the information system.\n\n  This requirement is applicable to access control enforcement applications,\n  a category that includes database management systems. If PostgreSQL does not\n  follow applicable policy when approving access, it may be in conflict with\n  networks or other applications in the information system. This may result in\n  users either gaining or being denied access inappropriately and in conflict\n  with applicable policy.","descriptions":[{"label":"default","data":"Authentication with a DoD-approved PKI certificate does not\n  necessarily imply authorization to access PostgreSQL. To mitigate the risk of\n  unauthorized access to sensitive information by entities that have been issued\n  certificates by DoD-approved PKIs, all DoD systems, including databases, must\n  be properly configured to implement access control policies.\n\n  Successful authentication must not automatically give an entity access to\n  an asset or security boundary. Authorization procedures and controls must be\n  implemented to ensure each authenticated entity also has a validated and\n  current authorization. Authorization is the process of determining whether an\n  entity, once authenticated, is permitted to access a specific asset.\n  Information systems use access control policies and enforcement mechanisms to\n  implement this requirement.\n\n  Access control policies include identity-based policies, role-based\n  policies, and attribute-based policies. Access enforcement mechanisms include\n  access control lists, access control matrices, and cryptography. These policies\n  and mechanisms must be employed by the application to control access between\n  users (or processes acting on behalf of users) and objects (e.g., devices,\n  files, records, processes, programs, and domains) in the information system.\n\n  This requirement is applicable to access control enforcement applications,\n  a category that includes database management systems. If PostgreSQL does not\n  follow applicable policy when approving access, it may be in conflict with\n  networks or other applications in the information system. This may result in\n  users either gaining or being denied access inappropriately and in conflict\n  with applicable policy."},{"label":"check","data":"From the system security plan or equivalent documentation,\n  determine the appropriate permissions on database objects for each kind (group\n  role) of user. If this documentation is missing, this is a finding.\n\n  First, as the database administrator (shown here as \"postgres\"), check the\n  privileges of all roles in the database by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c '\\du'\n\n  Review all roles and their associated privileges. If any roles' privileges\n  exceed those documented, this is a finding.\n\n  Next, as the database administrator (shown here as \"postgres\"), check the\n  configured privileges for tables and columns by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c '\\dp'\n\n  Review all access privileges and column access privileges list. If any roles'\n  privileges exceed those documented, this is a finding.\n\n  Next, as the database administrator (shown here as \"postgres\"), check the\n  configured authentication settings in pg_hba.conf:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n\n  Review all entries and their associated authentication methods. If any entries\n  do not have their documented authentication requirements, this is a finding."},{"label":"fix","data":"Create and/or maintain documentation of each group role's\n  appropriate permissions on database objects.\n\n  Implement these permissions in the database, and remove any permissions that\n  exceed those documented.\n\n\n  The following are examples of how to use role privileges in PostgreSQL to\n  enforce access controls. For a complete list of privileges, see the official\n  documentation:\n  https://www.postgresql.org/docs/current/static/sql-createrole.html\n\n  #### Roles Example 1\n\n  The following example demonstrates how to create an admin role with CREATEDB\n  and CREATEROLE privileges.\n\n  As the database administrator (shown here as \"postgres\"), run the following\n  SQL:\n\n  $ sudo su - postgres\n\n  $ psql -c \"CREATE ROLE admin WITH CREATEDB CREATEROLE\"\n\n  #### Roles Example 2\n\n  The following example demonstrates how to create a role with a password that\n  expires and makes the role a member of the \"admin\" group.\n\n  As the database administrator (shown here as \"postgres\"), run the following\n  SQL:\n\n  $ sudo su - postgres\n\n  $ psql -c \"CREATE ROLE joe LOGIN ENCRYPTED PASSWORD 'stig2016!' VALID UNTIL\n  '2016-09-20' IN ROLE admin\"\n\n  #### Roles Example 3\n\n  The following demonstrates how to revoke privileges from a role using REVOKE.\n\n  As the database administrator (shown here as \"postgres\"), run the following\n  SQL:\n\n  $ sudo su - postgres\n\n  $ psql -c \"REVOKE admin FROM joe\"\n\n  #### Roles Example 4\n\n  The following demonstrates how to alter privileges in a role using ALTER.\n\n  As the database administrator (shown here as \"postgres\"), run the following\n  SQL:\n\n  $ sudo su - postgres\n\n  $ psql -c \"ALTER ROLE joe NOLOGIN\"\n\n  The following are examples of how to use grant privileges in PostgreSQL to\n  enforce access controls on objects. For a complete list of privileges, see the\n  official documentation:\n  https://www.postgresql.org/docs/current/static/sql-grant.html\n\n  #### Grant Example 1\n\n  The following example demonstrates how to grant INSERT on a table to a role.\n\n  As the database administrator (shown here as \"postgres\"), run the following\n  SQL:\n\n  $ sudo su - postgres\n\n  $ psql -c \"GRANT SELECT ON stig_test TO joe\"\n\n  #### Grant Example 2\n\n  The following example demonstrates how to grant ALL PRIVILEGES on a table to a\n  role.\n\n  As the database administrator (shown here as \"postgres\"), run the following\n  SQL:\n\n  $ sudo su - postgres\n\n  $ psql -c \"GRANT ALL PRIVILEGES ON stig_test TO joe\"\n\n  #### Grant Example 3\n\n  The following example demonstrates how to grant a role to a role.\n\n  As the database administrator (shown here as \"postgres\"), run the following\n  SQL:\n\n  $ sudo su - postgres\n\n  $ psql -c \"GRANT admin TO joe\"\n\n  #### Revoke Example 1\n\n  The following example demonstrates how to revoke access from a role.\n\n  As the database administrator (shown here as \"postgres\"), run the following\n  SQL:\n\n  $ sudo su - postgres\n\n  $ psql -c \"REVOKE admin FROM joe\"\n\n  To change authentication requirements for the database, as the database\n  administrator (shown here as \"postgres\"), edit pg_hba.conf:\n\n  $ sudo su - postgres\n\n  $ vi ${PGDATA?}/pg_hba.conf\n\n  Edit authentication requirements to the organizational requirements. See the\n  official documentation for the complete list of options for authentication:\n  http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\n\n  After changes to pg_hba.conf, reload the server:\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-${PGVER?}\n\n  # INITD SERVER ONLY\n  $ sudo service postgresql-${PGVER?} reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000033-DB-000084","gid":"V-72859","rid":"SV-87511r2_rule","stig_id":"PGS9-00-000900","fix_id":"F-79301r3_fix","cci":["CCI-000213"],"nist":["AC-3","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72859\" do\r\n  title \"PostgreSQL must enforce approved authorizations for logical access to\r\n  information and system resources in accordance with applicable access control\r\n  policies.\"\r\n  desc  \"Authentication with a DoD-approved PKI certificate does not\r\n  necessarily imply authorization to access PostgreSQL. To mitigate the risk of\r\n  unauthorized access to sensitive information by entities that have been issued\r\n  certificates by DoD-approved PKIs, all DoD systems, including databases, must\r\n  be properly configured to implement access control policies.\r\n\r\n  Successful authentication must not automatically give an entity access to\r\n  an asset or security boundary. Authorization procedures and controls must be\r\n  implemented to ensure each authenticated entity also has a validated and\r\n  current authorization. Authorization is the process of determining whether an\r\n  entity, once authenticated, is permitted to access a specific asset.\r\n  Information systems use access control policies and enforcement mechanisms to\r\n  implement this requirement.\r\n\r\n  Access control policies include identity-based policies, role-based\r\n  policies, and attribute-based policies. Access enforcement mechanisms include\r\n  access control lists, access control matrices, and cryptography. These policies\r\n  and mechanisms must be employed by the application to control access between\r\n  users (or processes acting on behalf of users) and objects (e.g., devices,\r\n  files, records, processes, programs, and domains) in the information system.\r\n\r\n  This requirement is applicable to access control enforcement applications,\r\n  a category that includes database management systems. If PostgreSQL does not\r\n  follow applicable policy when approving access, it may be in conflict with\r\n  networks or other applications in the information system. This may result in\r\n  users either gaining or being denied access inappropriately and in conflict\r\n  with applicable policy.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000033-DB-000084\"\r\n  tag \"gid\": \"V-72859\"\r\n  tag \"rid\": \"SV-87511r2_rule\"\r\n  tag \"stig_id\": \"PGS9-00-000900\"\r\n  tag \"fix_id\": \"F-79301r3_fix\"\r\n  tag \"cci\": [\"CCI-000213\"]\r\n  tag \"nist\": [\"AC-3\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"From the system security plan or equivalent documentation,\r\n  determine the appropriate permissions on database objects for each kind (group\r\n  role) of user. If this documentation is missing, this is a finding.\r\n\r\n  First, as the database administrator (shown here as \\\"postgres\\\"), check the\r\n  privileges of all roles in the database by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c '\\\\du'\r\n\r\n  Review all roles and their associated privileges. If any roles' privileges\r\n  exceed those documented, this is a finding.\r\n\r\n  Next, as the database administrator (shown here as \\\"postgres\\\"), check the\r\n  configured privileges for tables and columns by running the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c '\\\\dp'\r\n\r\n  Review all access privileges and column access privileges list. If any roles'\r\n  privileges exceed those documented, this is a finding.\r\n\r\n  Next, as the database administrator (shown here as \\\"postgres\\\"), check the\r\n  configured authentication settings in pg_hba.conf:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_hba.conf\r\n\r\n  Review all entries and their associated authentication methods. If any entries\r\n  do not have their documented authentication requirements, this is a finding.\"\r\n\r\n  desc \"fix\", \"Create and/or maintain documentation of each group role's\r\n  appropriate permissions on database objects.\r\n\r\n  Implement these permissions in the database, and remove any permissions that\r\n  exceed those documented.\r\n\r\n\r\n  The following are examples of how to use role privileges in PostgreSQL to\r\n  enforce access controls. For a complete list of privileges, see the official\r\n  documentation:\r\n  https://www.postgresql.org/docs/current/static/sql-createrole.html\r\n\r\n  #### Roles Example 1\r\n\r\n  The following example demonstrates how to create an admin role with CREATEDB\r\n  and CREATEROLE privileges.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), run the following\r\n  SQL:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ psql -c \\\"CREATE ROLE admin WITH CREATEDB CREATEROLE\\\"\r\n\r\n  #### Roles Example 2\r\n\r\n  The following example demonstrates how to create a role with a password that\r\n  expires and makes the role a member of the \\\"admin\\\" group.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), run the following\r\n  SQL:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ psql -c \\\"CREATE ROLE joe LOGIN ENCRYPTED PASSWORD 'stig2016!' VALID UNTIL\r\n  '2016-09-20' IN ROLE admin\\\"\r\n\r\n  #### Roles Example 3\r\n\r\n  The following demonstrates how to revoke privileges from a role using REVOKE.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), run the following\r\n  SQL:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ psql -c \\\"REVOKE admin FROM joe\\\"\r\n\r\n  #### Roles Example 4\r\n\r\n  The following demonstrates how to alter privileges in a role using ALTER.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), run the following\r\n  SQL:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ psql -c \\\"ALTER ROLE joe NOLOGIN\\\"\r\n\r\n  The following are examples of how to use grant privileges in PostgreSQL to\r\n  enforce access controls on objects. For a complete list of privileges, see the\r\n  official documentation:\r\n  https://www.postgresql.org/docs/current/static/sql-grant.html\r\n\r\n  #### Grant Example 1\r\n\r\n  The following example demonstrates how to grant INSERT on a table to a role.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), run the following\r\n  SQL:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ psql -c \\\"GRANT SELECT ON stig_test TO joe\\\"\r\n\r\n  #### Grant Example 2\r\n\r\n  The following example demonstrates how to grant ALL PRIVILEGES on a table to a\r\n  role.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), run the following\r\n  SQL:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ psql -c \\\"GRANT ALL PRIVILEGES ON stig_test TO joe\\\"\r\n\r\n  #### Grant Example 3\r\n\r\n  The following example demonstrates how to grant a role to a role.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), run the following\r\n  SQL:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ psql -c \\\"GRANT admin TO joe\\\"\r\n\r\n  #### Revoke Example 1\r\n\r\n  The following example demonstrates how to revoke access from a role.\r\n\r\n  As the database administrator (shown here as \\\"postgres\\\"), run the following\r\n  SQL:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ psql -c \\\"REVOKE admin FROM joe\\\"\r\n\r\n  To change authentication requirements for the database, as the database\r\n  administrator (shown here as \\\"postgres\\\"), edit pg_hba.conf:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ vi ${PGDATA?}/pg_hba.conf\r\n\r\n  Edit authentication requirements to the organizational requirements. See the\r\n  official documentation for the complete list of options for authentication:\r\n  http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\r\n\r\n  After changes to pg_hba.conf, reload the server:\r\n\r\n  # SYSTEMD SERVER ONLY\r\n  $ sudo systemctl reload postgresql-${PGVER?}\r\n\r\n  # INITD SERVER ONLY\r\n  $ sudo service postgresql-${PGVER?} reload\"\r\n\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r;'\r\n  roles_query = sql.query(roles_sql, [pg_db])\r\n  roles = roles_query.lines\r\n\r\n  roles.each do |role|\r\n    unless pg_superusers.include?(role)\r\n      superuser_sql = \"SELECT r.rolsuper FROM pg_catalog.pg_roles r \"\\\r\n        \"WHERE r.rolname = '#{role}';\"\r\n\r\n      describe sql.query(superuser_sql, [pg_db]) do\r\n        its('output') { should_not eq 't' }\r\n      end\r\n    end\r\n  end\r\n\r\n  authorized_owners = pg_superusers\r\n  owners = authorized_owners.join('|')\r\n\r\n  object_granted_privileges = 'arwdDxtU'\r\n  object_public_privileges = 'r'\r\n  object_acl = \"^((((#{owners})=[#{object_granted_privileges}]+|\"\\\r\n    \"=[#{object_public_privileges}]+)\\/\\\\w+,?)+|)\\\\|\"\r\n  object_acl_regex = Regexp.new(object_acl)\r\n\r\n  objects_sql = \"SELECT n.nspname, c.relname, c.relkind \"\\\r\n    \"FROM pg_catalog.pg_class c \"\\\r\n    \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\r\n    \"WHERE c.relkind IN ('r', 'v', 'm', 'S', 'f') \"\\\r\n    \"AND n.nspname !~ '^pg_' AND pg_catalog.pg_table_is_visible(c.oid);\"\r\n\r\n  databases_sql = 'SELECT datname FROM pg_catalog.pg_database where not datistemplate;'\r\n  databases_query = sql.query(databases_sql, [pg_db])\r\n  databases = databases_query.lines\r\n\r\n  databases.each do |database|\r\n    rows = sql.query(objects_sql, [database])\r\n    if rows.methods.include?(:output) # Handle connection disabled on database\r\n      objects = rows.lines\r\n\r\n      objects.each do |obj|\r\n        schema, object, type = obj.split('|')\r\n        relacl_sql = \"SELECT pg_catalog.array_to_string(c.relacl, E','), \"\\\r\n          \"n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c \"\\\r\n          \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\r\n          \"WHERE n.nspname = '#{schema}' AND c.relname = '#{object}' \"\\\r\n          \"AND c.relkind = '#{type}';\"\r\n\r\n        describe sql.query(relacl_sql, [database]) do\r\n          its('output') { should match object_acl_regex }\r\n        end\r\n      end\r\n    end\r\n  end\r\n\r\n  describe \"Column acl check\" do\r\n    skip \"Review all access privileges and column access privileges list. If any roles' privileges exceed those documented, this is a finding.\"\r\n  end\r\n  \r\n  describe postgres_hba_conf(pg_hba_conf_file).where { type == 'local' } do\r\n    its('user.uniq') { should cmp pg_owner }\r\n    its('auth_method.uniq') { should_not cmp 'trust'}\r\n  end\r\n\r\n  describe postgres_hba_conf(pg_hba_conf_file).where { database == 'replication' } do\r\n    its('type.uniq') { should cmp 'host' }\r\n    its('address.uniq.sort') { should cmp pg_replicas.sort }\r\n    its('user.uniq') { should cmp 'replication' }\r\n    its('auth_method.uniq') { should be_in approved_auth_methods }\r\n  end\r\n\r\n  describe postgres_hba_conf(pg_hba_conf_file).where { type == 'host' } do\r\n    its('auth_method.uniq') { should be_in approved_auth_methods }\r\n  end\r\nend\r\n","source_location":{"line":23,"ref":"controls/V-72859.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'pg_signal_backend'; output is expected not to eq \"t\"","run_time":0.000129073,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'bob'; output is expected not to eq \"t\"","run_time":9.4187e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'fooaudit'; output is expected not to eq \"t\"","run_time":8.9731e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'test'; output is expected not to eq \"t\"","run_time":9.2227e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'user'; output is expected not to eq \"t\"","run_time":0.000119812,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'public' AND c.relname = 'test' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":0.000107092,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(c.relacl, E','), n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'public' AND c.relname = 'test' AND c.relkind = 'r'; output is expected to match /^((((postgres)=[arwdDxtU]+|=[r]+)\\/\\w+,?)+|)\\|/","run_time":9.2853e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"skipped","code_desc":"Column acl check","run_time":6.092e-06,"start_time":"2020-06-19T18:47:47+00:00","resource":"","skip_message":"Review all access privileges and column access privileges list. If any roles' privileges exceed those documented, this is a finding."},{"status":"failed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with type == \"local\" user.uniq is expected to cmp == \"postgres\"","run_time":0.000227287,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: postgres\n     got: [\"all\"]\n\n(compared using `cmp` matcher)\n"},{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with type == \"local\" auth_method.uniq is expected not to cmp == \"trust\"","run_time":0.000153713,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with database == \"replication\" type.uniq is expected to cmp == \"host\"","run_time":0.000184369,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with database == \"replication\" address.uniq.sort is expected to cmp == [\"192.168.1.3/32\"]","run_time":0.000182694,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: [\"192.168.1.3/32\"]\n     got: [\"all\"]\n\n(compared using `cmp` matcher)\n"},{"status":"failed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with database == \"replication\" user.uniq is expected to cmp == \"replication\"","run_time":0.000183814,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: replication\n     got: [\"all\"]\n\n(compared using `cmp` matcher)\n"},{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with database == \"replication\" auth_method.uniq is expected to be in \"gss\", \"sspi\", and \"ldap\"","run_time":0.000153376,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with type == \"host\" auth_method.uniq is expected to be in \"gss\", \"sspi\", and \"ldap\"","run_time":0.000192391,"start_time":"2020-06-19T18:47:47+00:00"}]},{"id":"V-72885","title":"The audit information produced by PostgreSQL must be protected from\n  unauthorized deletion.","desc":"If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is impossible to achieve.\n\n  To ensure the veracity of audit data, the information system and/or the\n  application must protect audit information from unauthorized deletion. This\n  requirement can be achieved through multiple methods which will depend upon\n  system architecture and design.\n\n  Some commonly employed methods include: ensuring log files enjoy the proper\n  file system permissions utilizing file system protections; restricting access;\n  and backing up log data to ensure log data is retained.\n\n  Applications providing a user interface to audit data will leverage user\n  permissions and roles identifying the user accessing the data and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the deletion of audit data.\n\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity.\n\n  Deletion of database audit data could mask the theft of, or the\n  unauthorized modification of, sensitive data stored in the database.","descriptions":[{"label":"default","data":"If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is impossible to achieve.\n\n  To ensure the veracity of audit data, the information system and/or the\n  application must protect audit information from unauthorized deletion. This\n  requirement can be achieved through multiple methods which will depend upon\n  system architecture and design.\n\n  Some commonly employed methods include: ensuring log files enjoy the proper\n  file system permissions utilizing file system protections; restricting access;\n  and backing up log data to ensure log data is retained.\n\n  Applications providing a user interface to audit data will leverage user\n  permissions and roles identifying the user accessing the data and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the deletion of audit data.\n\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity.\n\n  Deletion of database audit data could mask the theft of, or the\n  unauthorized modification of, sensitive data stored in the database."},{"label":"check","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  Review locations of audit logs, both internal to the database and database\n  audit logs located at the operating system level.\n\n  Verify there are appropriate controls and permissions to protect the audit\n  information from unauthorized modification.\n\n  #### stderr Logging\n\n  If the PostgreSQL server is configured to use stderr for logging, the logs will\n  be owned by the database administrator (shown here as \"postgres\") with a\n  default permissions level of 0600. The permissions can be configured in\n  postgresql.conf.\n\n  To check the permissions for log files in postgresql.conf, as the database\n  administrator (shown here as \"postgres\"), run the following command:\n\n  $ sudo su - postgres\n\n  $ grep \"log_file_mode\" ${PGDATA?}/postgresql.conf\n\n  If the permissions are not 0600, this is a finding.\n\n  Next, navigate to where the logs are stored. This can be found by running the\n  following command against postgresql.conf as the database administrator (shown\n  here as \"postgres\"):\n\n  $ sudo su - postgres\n\n  $ grep \"log_directory\" ${PGDATA?}/postgresql.conf\n\n  With the log directory identified, as the database administrator (shown here as\n  \"postgres\"), list the permissions of the logs:\n\n  $ sudo su - postgres\n\n  $ ls -la ${PGDATA?}/pg_log\n\n  If logs are not owned by the database administrator (shown here as\n  \"postgres\") and are not the same permissions as configured in\n  postgresql.conf, this is a finding.\n\n  #### syslog Logging\n\n  If the PostgreSQL server is configured to use syslog for logging, consult\n  organization syslog setting for permissions and ownership of logs"},{"label":"fix","data":"To ensure that logging is enabled, review supplementary content\n  APPENDIX-C for instructions on enabling logging.\n\n  Note: The following instructions use the PGDATA environment variable. See\n  supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\n  #### stderr Logging\n\n  With stderr logging enabled, as the database owner (shown here as\n  \"postgres\"), set the following parameter in postgresql.conf:\n\n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n\n  To change the owner and permissions of the log files, run the following:\n\n  $ chown postgres:postgres ${PGDATA?}/<log directory name>\n  $ chmod 0700 ${PGDATA?}/<log directory name>\n  $ chmod 600 ${PGDATA?}/<log directory name>/*.log\n\n  #### syslog Logging\n\n  If PostgreSQL is configured to use syslog for logging, the log files must be\n  configured to be owned by root with 0600 permissions.\n\n  $ chown root:root <log directory name>/<log_filename>\n  $ chmod 0700 <log directory name>\n  $ chmod 0600 <log directory name>/*.log"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000120-DB-000061","gid":"V-72885","rid":"SV-87537r3_rule","stig_id":"PGS9-00-002300","fix_id":"F-79327r4_fix","cci":["CCI-000164"],"nist":["AU-9","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72885\" do\r\n  title \"The audit information produced by PostgreSQL must be protected from\r\n  unauthorized deletion.\"\r\n  desc  \"If audit data were to become compromised, then competent forensic\r\n  analysis and discovery of the true source of potentially malicious system\r\n  activity is impossible to achieve.\r\n\r\n  To ensure the veracity of audit data, the information system and/or the\r\n  application must protect audit information from unauthorized deletion. This\r\n  requirement can be achieved through multiple methods which will depend upon\r\n  system architecture and design.\r\n\r\n  Some commonly employed methods include: ensuring log files enjoy the proper\r\n  file system permissions utilizing file system protections; restricting access;\r\n  and backing up log data to ensure log data is retained.\r\n\r\n  Applications providing a user interface to audit data will leverage user\r\n  permissions and roles identifying the user accessing the data and the\r\n  corresponding rights the user enjoys in order make access decisions regarding\r\n  the deletion of audit data.\r\n\r\n  Audit information includes all information (e.g., audit records, audit\r\n  settings, and audit reports) needed to successfully audit information system\r\n  activity.\r\n\r\n  Deletion of database audit data could mask the theft of, or the\r\n  unauthorized modification of, sensitive data stored in the database.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000120-DB-000061\"\r\n  tag \"gid\": \"V-72885\"\r\n  tag \"rid\": \"SV-87537r3_rule\"\r\n  tag \"stig_id\": \"PGS9-00-002300\"\r\n  tag \"fix_id\": \"F-79327r4_fix\"\r\n  tag \"cci\": [\"CCI-000164\"]\r\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  Review locations of audit logs, both internal to the database and database\r\n  audit logs located at the operating system level.\r\n\r\n  Verify there are appropriate controls and permissions to protect the audit\r\n  information from unauthorized modification.\r\n\r\n  #### stderr Logging\r\n\r\n  If the PostgreSQL server is configured to use stderr for logging, the logs will\r\n  be owned by the database administrator (shown here as \\\"postgres\\\") with a\r\n  default permissions level of 0600. The permissions can be configured in\r\n  postgresql.conf.\r\n\r\n  To check the permissions for log files in postgresql.conf, as the database\r\n  administrator (shown here as \\\"postgres\\\"), run the following command:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ grep \\\"log_file_mode\\\" ${PGDATA?}/postgresql.conf\r\n\r\n  If the permissions are not 0600, this is a finding.\r\n\r\n  Next, navigate to where the logs are stored. This can be found by running the\r\n  following command against postgresql.conf as the database administrator (shown\r\n  here as \\\"postgres\\\"):\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ grep \\\"log_directory\\\" ${PGDATA?}/postgresql.conf\r\n\r\n  With the log directory identified, as the database administrator (shown here as\r\n  \\\"postgres\\\"), list the permissions of the logs:\r\n\r\n  $ sudo su - postgres\r\n\r\n  $ ls -la ${PGDATA?}/pg_log\r\n\r\n  If logs are not owned by the database administrator (shown here as\r\n  \\\"postgres\\\") and are not the same permissions as configured in\r\n  postgresql.conf, this is a finding.\r\n\r\n  #### syslog Logging\r\n\r\n  If the PostgreSQL server is configured to use syslog for logging, consult\r\n  organization syslog setting for permissions and ownership of logs\"\r\n  \r\n  desc \"fix\", \"To ensure that logging is enabled, review supplementary content\r\n  APPENDIX-C for instructions on enabling logging.\r\n\r\n  Note: The following instructions use the PGDATA environment variable. See\r\n  supplementary content APPENDIX-F for instructions on configuring PGDATA.\r\n\r\n  #### stderr Logging\r\n\r\n  With stderr logging enabled, as the database owner (shown here as\r\n  \\\"postgres\\\"), set the following parameter in postgresql.conf:\r\n\r\n  $ vi ${PGDATA?}/postgresql.conf\r\n  log_file_mode = 0600\r\n\r\n  To change the owner and permissions of the log files, run the following:\r\n\r\n  $ chown postgres:postgres ${PGDATA?}/<log directory name>\r\n  $ chmod 0700 ${PGDATA?}/<log directory name>\r\n  $ chmod 600 ${PGDATA?}/<log directory name>/*.log\r\n\r\n  #### syslog Logging\r\n\r\n  If PostgreSQL is configured to use syslog for logging, the log files must be\r\n  configured to be owned by root with 0600 permissions.\r\n\r\n  $ chown root:root <log directory name>/<log_filename>\r\n  $ chmod 0700 <log directory name>\r\n  $ chmod 0600 <log directory name>/*.log\"\r\n\r\n  # @todo also need to test that error logging is enabled (where?) or test if log\r\n  # outputs to stderr? the pg_log directory should be 0700.\r\n  # @todo we need to decide how we are going to test for error logging and what the\r\n  # default setup will be per the CM\r\n  # @todo this test is dupe of V-72847.\r\n    \r\n  admin_sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n   \r\n  describe admin_sql.query('show logging_collector;', [pg_db]) do\r\n    its('output') { should_not match /off|false/i }\r\n  end\r\n\r\n  describe directory(pg_log_dir) do\r\n    it { should be_directory }\r\n    it { should be_owned_by pg_owner }\r\n    it { should be_grouped_into pg_owner }\r\n    its('mode') { should  cmp '0700' }\r\n  end\r\n\r\n  describe command(\"find #{pg_log_dir} -type f -perm 600 ! -perm 600 | wc -l\") do\r\n    its('stdout.strip') { should eq '0' }\r\n  end\r\n\r\nend\r\n","source_location":{"line":17,"ref":"controls/V-72885.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: show logging_collector; output is expected not to match /off|false/i","run_time":9.9503e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be directory","run_time":0.007651434,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be owned by \"postgres\"","run_time":0.006946774,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log is expected to be grouped into \"postgres\"","run_time":0.007354133,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"Directory /var/lib/pgsql/data/userdata/pg_log mode is expected to cmp == \"0700\"","run_time":0.000264469,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"Command: `find /var/lib/pgsql/data/userdata/pg_log -type f -perm 600 ! -perm 600 | wc -l` stdout.strip is expected to eq \"0\"","run_time":0.000188065,"start_time":"2020-06-19T18:47:47+00:00"}]},{"id":"V-73049","title":"PostgreSQL must uniquely identify and authenticate organizational\n  users (or processes acting on behalf of organizational users).","desc":"To assure accountability and prevent unauthenticated access,\n  organizational users must be identified and authenticated to prevent potential\n  misuse and compromise of the system.\n\n  Organizational users include organizational employees or individuals the\n  organization deems to have equivalent status of employees (e.g., contractors).\n  Organizational users (and any processes acting on behalf of users) must be\n  uniquely identified and authenticated for all accesses, except the following:\n\n      (i) Accesses explicitly identified and documented by the organization.\n  Organizations document specific user actions that can be performed on the\n  information system without identification or authentication; and\n      (ii) Accesses that occur through authorized use of group authenticators\n  without individual authentication. Organizations may require unique\n  identification of individuals using shared accounts, for detailed\n  accountability of individual activity.","descriptions":[{"label":"default","data":"To assure accountability and prevent unauthenticated access,\n  organizational users must be identified and authenticated to prevent potential\n  misuse and compromise of the system.\n\n  Organizational users include organizational employees or individuals the\n  organization deems to have equivalent status of employees (e.g., contractors).\n  Organizational users (and any processes acting on behalf of users) must be\n  uniquely identified and authenticated for all accesses, except the following:\n\n      (i) Accesses explicitly identified and documented by the organization.\n  Organizations document specific user actions that can be performed on the\n  information system without identification or authentication; and\n      (ii) Accesses that occur through authorized use of group authenticators\n  without individual authentication. Organizations may require unique\n  identification of individuals using shared accounts, for detailed\n  accountability of individual activity."},{"label":"check","data":"Review PostgreSQL settings to determine whether organizational\n  users are uniquely identified and authenticated when logging on/connecting to\n  the system.\n\n  To list all roles in the database, as the database administrator (shown here as\n  \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"\\du\"\n\n  If organizational users are not uniquely identified and authenticated, this is\n  a finding.\n\n  Next, as the database administrator (shown here as \"postgres\"), verify the\n  current pg_hba.conf authentication settings:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n\n  If every role does not have unique authentication requirements, this is a\n  finding.\n\n  If accounts are determined to be shared, determine if individuals are first\n  individually authenticated. If individuals are not individually authenticated\n  before using the shared account, this is a finding."},{"label":"fix","data":"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  Configure PostgreSQL settings to uniquely identify and authenticate all\n  organizational users who log on/connect to the system.\n\n  To create roles, use the following SQL:\n\n  CREATE ROLE <role_name> [OPTIONS]\n\n  For more information on CREATE ROLE, see the official documentation:\n  https://www.postgresql.org/docs/current/static/sql-createrole.html\n\n  For each role created, the database administrator can specify database\n  authentication by editing pg_hba.conf:\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n\n  An example pg_hba entry looks like this:\n\n  # TYPE DATABASE USER ADDRESS METHOD\n  host test_db bob 192.168.0.0/16 md5\n\n  For more information on pg_hba.conf, see the official documentation:\n  https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000148-DB-000103","gid":"V-73049","rid":"SV-87701r1_rule","stig_id":"PGS9-00-011500","fix_id":"F-79495r1_fix","cci":["CCI-000764"],"nist":["IA-2","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73049\" do\r\n  title \"PostgreSQL must uniquely identify and authenticate organizational\r\n  users (or processes acting on behalf of organizational users).\"\r\n  desc  \"To assure accountability and prevent unauthenticated access,\r\n  organizational users must be identified and authenticated to prevent potential\r\n  misuse and compromise of the system.\r\n\r\n  Organizational users include organizational employees or individuals the\r\n  organization deems to have equivalent status of employees (e.g., contractors).\r\n  Organizational users (and any processes acting on behalf of users) must be\r\n  uniquely identified and authenticated for all accesses, except the following:\r\n\r\n      (i) Accesses explicitly identified and documented by the organization.\r\n  Organizations document specific user actions that can be performed on the\r\n  information system without identification or authentication; and\r\n      (ii) Accesses that occur through authorized use of group authenticators\r\n  without individual authentication. Organizations may require unique\r\n  identification of individuals using shared accounts, for detailed\r\n  accountability of individual activity.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000148-DB-000103\"\r\n  tag \"gid\": \"V-73049\"\r\n  tag \"rid\": \"SV-87701r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-011500\"\r\n  tag \"fix_id\": \"F-79495r1_fix\"\r\n  tag \"cci\": [\"CCI-000764\"]\r\n  tag \"nist\": [\"IA-2\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"Review PostgreSQL settings to determine whether organizational\r\n  users are uniquely identified and authenticated when logging on/connecting to\r\n  the system.\r\n\r\n  To list all roles in the database, as the database administrator (shown here as\r\n  \\\"postgres\\\"), run the following SQL:\r\n\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"\\\\du\\\"\r\n\r\n  If organizational users are not uniquely identified and authenticated, this is\r\n  a finding.\r\n\r\n  Next, as the database administrator (shown here as \\\"postgres\\\"), verify the\r\n  current pg_hba.conf authentication settings:\r\n\r\n  $ sudo su - postgres\r\n  $ cat ${PGDATA?}/pg_hba.conf\r\n\r\n  If every role does not have unique authentication requirements, this is a\r\n  finding.\r\n\r\n  If accounts are determined to be shared, determine if individuals are first\r\n  individually authenticated. If individuals are not individually authenticated\r\n  before using the shared account, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Note: The following instructions use the PGDATA environment\r\n  variable. See supplementary content APPENDIX-F for instructions on configuring\r\n  PGDATA.\r\n\r\n  Configure PostgreSQL settings to uniquely identify and authenticate all\r\n  organizational users who log on/connect to the system.\r\n\r\n  To create roles, use the following SQL:\r\n\r\n  CREATE ROLE <role_name> [OPTIONS]\r\n\r\n  For more information on CREATE ROLE, see the official documentation:\r\n  https://www.postgresql.org/docs/current/static/sql-createrole.html\r\n\r\n  For each role created, the database administrator can specify database\r\n  authentication by editing pg_hba.conf:\r\n\r\n  $ sudo su - postgres\r\n  $ vi ${PGDATA?}/pg_hba.conf\r\n\r\n  An example pg_hba entry looks like this:\r\n\r\n  # TYPE DATABASE USER ADDRESS METHOD\r\n  host test_db bob 192.168.0.0/16 md5\r\n\r\n  For more information on pg_hba.conf, see the official documentation:\r\n  https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  authorized_roles = pg_users\r\n\r\n  roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r;'\r\n\r\n  describe sql.query(roles_sql, [pg_db]) do\r\n    its('lines.sort') { should cmp authorized_roles.sort }\r\n  end\r\n\r\n  describe postgres_hba_conf(pg_hba_conf_file).where { type == 'local' } do\r\n    its('user.uniq') { should cmp pg_owner }\r\n    its('auth_method.uniq') { should cmp(['gss']).or cmp(['sspi']).or cmp(['ldap']) }\r\n  end\r\n\r\n  describe postgres_hba_conf(pg_hba_conf_file).where { database == 'replication' } do\r\n    its('type.uniq') { should cmp 'host' }\r\n    its('address.uniq.sort') { should cmp pg_replicas.sort }\r\n    its('user.uniq') { should cmp 'replication' }\r\n    its('auth_method.uniq') { should cmp(['gss']).or cmp(['sspi']).or cmp(['ldap']) }\r\n  end\r\n\r\n  describe postgres_hba_conf(pg_hba_conf_file).where { type == 'host' } do\r\n    its('auth_method.uniq') { should cmp(['gss']).or cmp(['sspi']).or cmp(['ldap']) }\r\n  end\r\nend\r\n","source_location":{"line":19,"ref":"controls/V-73049.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SELECT r.rolname FROM pg_catalog.pg_roles r; lines.sort is expected to cmp == [\"\"]","run_time":0.000237109,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: [\"\"]\n     got: [\"bob\", \"fooaudit\", \"pg_signal_backend\", \"postgres\", \"test\", \"user\"]\n\n(compared using `cmp` matcher)\n"},{"status":"failed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with type == \"local\" user.uniq is expected to cmp == \"postgres\"","run_time":0.000198156,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: postgres\n     got: [\"all\"]\n\n(compared using `cmp` matcher)\n"},{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with type == \"local\" auth_method.uniq is expected to cmp == [\"gss\"] or cmp  nil or cmp  nil","run_time":0.003077562,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with database == \"replication\" type.uniq is expected to cmp == \"host\"","run_time":0.000175568,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with database == \"replication\" address.uniq.sort is expected to cmp == [\"192.168.1.3/32\"]","run_time":0.000214947,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: [\"192.168.1.3/32\"]\n     got: [\"all\"]\n\n(compared using `cmp` matcher)\n"},{"status":"failed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with database == \"replication\" user.uniq is expected to cmp == \"replication\"","run_time":0.000181391,"start_time":"2020-06-19T18:47:47+00:00","message":"\nexpected: replication\n     got: [\"all\"]\n\n(compared using `cmp` matcher)\n"},{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with database == \"replication\" auth_method.uniq is expected to cmp == [\"gss\"] or cmp  nil or cmp  nil","run_time":0.000229075,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"Postgres Hba Config /var/lib/pgsql/data/userdata/pg_hba.conf with type == \"host\" auth_method.uniq is expected to cmp == [\"gss\"] or cmp  nil or cmp  nil","run_time":0.000275494,"start_time":"2020-06-19T18:47:47+00:00"}]},{"id":"V-72917","title":"When updates are applied to PostgreSQL software, any software\n  components that have been replaced or made unnecessary must be removed.","desc":"Previous versions of PostgreSQL components that are not removed from\n  the information system after updates have been installed may be exploited by\n  adversaries.\n\n  Some PostgreSQL installation tools may remove older versions of software\n  automatically from the information system. In other cases, manual review and\n  removal will be required. In planning installations and upgrades, organizations\n  must include steps (automated, manual, or both) to identify and remove the\n  outdated modules.\n\n  A transition period may be necessary when both the old and the new software\n  are required. This should be taken into account in the planning.","descriptions":[{"label":"default","data":"Previous versions of PostgreSQL components that are not removed from\n  the information system after updates have been installed may be exploited by\n  adversaries.\n\n  Some PostgreSQL installation tools may remove older versions of software\n  automatically from the information system. In other cases, manual review and\n  removal will be required. In planning installations and upgrades, organizations\n  must include steps (automated, manual, or both) to identify and remove the\n  outdated modules.\n\n  A transition period may be necessary when both the old and the new software\n  are required. This should be taken into account in the planning."},{"label":"check","data":"To check software installed by packages, as the system\n  administrator, run the following command:\n\n  # RHEL/CENT Systems\n  $ sudo rpm -qa | grep postgres\n\n  If multiple versions of postgres are installed but are unused, this is a\n  finding."},{"label":"fix","data":"Use package managers (RPM or apt-get) for installing PostgreSQL.\n  Unused software is removed when updated."}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000454-DB-000389","gid":"V-72917","rid":"SV-87569r1_rule","stig_id":"PGS9-00-004300","fix_id":"F-79361r1_fix","cci":["CCI-002617"],"nist":["SI-2 (6)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-72917\" do\r\n  title \"When updates are applied to PostgreSQL software, any software\r\n  components that have been replaced or made unnecessary must be removed.\"\r\n  desc  \"Previous versions of PostgreSQL components that are not removed from\r\n  the information system after updates have been installed may be exploited by\r\n  adversaries.\r\n\r\n  Some PostgreSQL installation tools may remove older versions of software\r\n  automatically from the information system. In other cases, manual review and\r\n  removal will be required. In planning installations and upgrades, organizations\r\n  must include steps (automated, manual, or both) to identify and remove the\r\n  outdated modules.\r\n\r\n  A transition period may be necessary when both the old and the new software\r\n  are required. This should be taken into account in the planning.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000454-DB-000389\"\r\n  tag \"gid\": \"V-72917\"\r\n  tag \"rid\": \"SV-87569r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-004300\"\r\n  tag \"fix_id\": \"F-79361r1_fix\"\r\n  tag \"cci\": [\"CCI-002617\"]\r\n  tag \"nist\": [\"SI-2 (6)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"To check software installed by packages, as the system\r\n  administrator, run the following command:\r\n\r\n  # RHEL/CENT Systems\r\n  $ sudo rpm -qa | grep postgres\r\n\r\n  If multiple versions of postgres are installed but are unused, this is a\r\n  finding.\"\r\n\r\n  desc \"fix\", \"Use package managers (RPM or apt-get) for installing PostgreSQL.\r\n  Unused software is removed when updated.\"\r\n\r\n  packages = command(\"rpm -qa | grep postgres\").stdout.split(\"\\n\")\r\n\r\n  packages.each do |package|\r\n    describe(package) do\r\n      it { should include (pg_version) }\r\n    end\r\n  end\r\nend\r\n","source_location":{"line":3,"ref":"controls/V-72917.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"rh-postgresql96-runtime-3.0-10.el7.x86_64 is expected to include \"9.6\"","run_time":0.000243709,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"rh-postgresql96-runtime-3.0-10.el7.x86_64\" to include \"9.6\""},{"status":"passed","code_desc":"rh-postgresql96-postgresql-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.000103454,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"rh-postgresql95-postgresql-libs-9.5.14-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.0002453,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"rh-postgresql95-postgresql-libs-9.5.14-1.el7.x86_64\" to include \"9.6\""},{"status":"passed","code_desc":"rh-postgresql96-postgresql-server-syspaths-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.00010039,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"rh-postgresql96-postgresql-syspaths-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.000103488,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"rh-postgresql96-postgresql-contrib-syspaths-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":8.6357e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"rh-postgresql96-syspaths-3.0-10.el7.x86_64 is expected to include \"9.6\"","run_time":0.000153691,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"rh-postgresql96-syspaths-3.0-10.el7.x86_64\" to include \"9.6\""},{"status":"failed","code_desc":"rh-postgresql96-3.0-10.el7.x86_64 is expected to include \"9.6\"","run_time":0.000167189,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"rh-postgresql96-3.0-10.el7.x86_64\" to include \"9.6\""},{"status":"passed","code_desc":"rh-postgresql96-postgresql-libs-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":9.1848e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"rh-postgresql95-runtime-2.2-2.el7.x86_64 is expected to include \"9.6\"","run_time":0.000154842,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"rh-postgresql95-runtime-2.2-2.el7.x86_64\" to include \"9.6\""},{"status":"passed","code_desc":"rh-postgresql96-postgresql-server-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":9.1892e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"rh-postgresql95-postgresql-9.5.14-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.000160204,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"rh-postgresql95-postgresql-9.5.14-1.el7.x86_64\" to include \"9.6\""},{"status":"passed","code_desc":"rh-postgresql96-postgresql-contrib-9.6.10-1.el7.x86_64 is expected to include \"9.6\"","run_time":9.2682e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"rh-postgresql95-postgresql-server-9.5.14-1.el7.x86_64 is expected to include \"9.6\"","run_time":0.000176127,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"rh-postgresql95-postgresql-server-9.5.14-1.el7.x86_64\" to include \"9.6\""}]},{"id":"V-73021","title":"PostgreSQL must provide the capability for authorized users\n  to capture, record, and log all content related to a user session.","desc":"Without the capability to capture, record, and log all content related to a user session, \n  investigations into suspicious user activity would be hampered. Typically, this PostgreSQL capability \n  would be used in conjunction with comparable monitoring of a user's online session, involving other software \n  components such as operating systems, web servers and front-end user applications. The current requirement, \n  however, deals specifically with PostgreSQL.","descriptions":[{"label":"default","data":"Without the capability to capture, record, and log all content related to a user session, \n  investigations into suspicious user activity would be hampered. Typically, this PostgreSQL capability \n  would be used in conjunction with comparable monitoring of a user's online session, involving other software \n  components such as operating systems, web servers and front-end user applications. The current requirement, \n  however, deals specifically with PostgreSQL."},{"label":"check","data":"First, as the database administrator \n  (shown here as \"postgres\"), verify pgaudit is installed by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n\n  If shared_preload_libraries does not contain pgaudit, this is a finding.\n\n  Next, to verify connections and disconnections are logged, run the following SQL:\n\n  $ psql -c \"SHOW log_connections\"\n  $ psql -c \"SHOW log_disconnections\"\n\n  If log_connections and log_disconnections are off, this is a finding.\n\n  Now, to verify that pgaudit is configured to log, run the following SQL:\n\n  $ psql -c \"SHOW pgaudit.log\"\n\n  If pgaudit.log does not contain ddl, role, read, write, this is a finding."},{"label":"fix","data":"Configure the database capture, record, and log all content related \n  to a user session.\n\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for \n  instructions on enabling logging.\n\n  With logging enabled, as the database administrator (shown here as \"postgres\"), \n  enable log_connections and log_disconnections:\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_connections = on\n  log_disconnections = on\n\n  Using pgaudit PostgreSQL can be configured to audit activity. See supplementary content \n  APPENDIX-B for documentation on installing pgaudit.\n\n  With pgaudit installed, as a database administrator (shown here as \"postgres\"), enable which \n  objects required for auditing a user's session:\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  pgaudit.log = 'write, ddl, role, read, function';\n  pgaudit.log_relation = on;\n\n  Now, as the system administrator, reload the server with the new configuration:\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000359-DB-000319","gid":"V-73021","rid":"SV-87673r1_rule","stig_id":"PGS9-00-009900","fix_id":"F-79469r2_fix","cci":["CCI-001855"],"nist":["AU-5 (1)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73021\" do\r\n  title \"PostgreSQL must provide the capability for authorized users\r\n  to capture, record, and log all content related to a user session.\"\r\n  desc  \"Without the capability to capture, record, and log all content related to a user session, \r\n  investigations into suspicious user activity would be hampered. Typically, this PostgreSQL capability \r\n  would be used in conjunction with comparable monitoring of a user's online session, involving other software \r\n  components such as operating systems, web servers and front-end user applications. The current requirement, \r\n  however, deals specifically with PostgreSQL.\"\r\n\r\n  impact 0.5\r\n  tag \"severity\": \"medium\"\r\n  tag \"gtitle\": \"SRG-APP-000359-DB-000319\"\r\n  tag \"gid\": \"V-73021\"\r\n  tag \"rid\": \"SV-87673r1_rule\"\r\n  tag \"stig_id\": \"PGS9-00-009900\"\r\n  tag \"fix_id\": \"F-79469r2_fix\"\r\n  tag \"cci\": [\"CCI-001855\"]\r\n  tag \"nist\": [\"AU-5 (1)\", \"Rev_4\"]\r\n  tag \"false_negatives\": nil\r\n  tag \"false_positives\": nil\r\n  tag \"documentable\": false\r\n  tag \"mitigations\": nil\r\n  tag \"severity_override_guidance\": false\r\n  tag \"potential_impacts\": nil\r\n  tag \"third_party_tools\": nil\r\n  tag \"mitigation_controls\": nil\r\n  tag \"responsibility\": nil\r\n  tag \"ia_controls\": nil\r\n  desc \"check\", \"First, as the database administrator \r\n  (shown here as \\\"postgres\\\"), verify pgaudit is installed by running the following SQL:\r\n  $ sudo su - postgres\r\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\r\n\r\n  If shared_preload_libraries does not contain pgaudit, this is a finding.\r\n\r\n  Next, to verify connections and disconnections are logged, run the following SQL:\r\n\r\n  $ psql -c \\\"SHOW log_connections\\\"\r\n  $ psql -c \\\"SHOW log_disconnections\\\"\r\n\r\n  If log_connections and log_disconnections are off, this is a finding.\r\n\r\n  Now, to verify that pgaudit is configured to log, run the following SQL:\r\n\r\n  $ psql -c \\\"SHOW pgaudit.log\\\"\r\n\r\n  If pgaudit.log does not contain ddl, role, read, write, this is a finding.\"\r\n  \r\n  desc \"fix\", \"Configure the database capture, record, and log all content related \r\n  to a user session.\r\n\r\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for \r\n  instructions on enabling logging.\r\n\r\n  With logging enabled, as the database administrator (shown here as \\\"postgres\\\"), \r\n  enable log_connections and log_disconnections:\r\n\r\n  $ sudo su - postgres\r\n  $ vi ${PGDATA?}/postgresql.conf\r\n  log_connections = on\r\n  log_disconnections = on\r\n\r\n  Using pgaudit PostgreSQL can be configured to audit activity. See supplementary content \r\n  APPENDIX-B for documentation on installing pgaudit.\r\n\r\n  With pgaudit installed, as a database administrator (shown here as \\\"postgres\\\"), enable which \r\n  objects required for auditing a user's session:\r\n\r\n  $ sudo su - postgres\r\n  $ vi ${PGDATA?}/postgresql.conf\r\n  pgaudit.log = 'write, ddl, role, read, function';\r\n  pgaudit.log_relation = on;\r\n\r\n  Now, as the system administrator, reload the server with the new configuration:\r\n\r\n  # SYSTEMD SERVER ONLY\r\n  $ sudo systemctl reload postgresql-9.5\r\n\r\n  # INITD SERVER ONLY\r\n  $ sudo service postgresql-9.5 reload\"\r\n\r\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\r\n\r\n  describe sql.query (\"SHOW shared_preload_libraries\") do\r\n    its('output') { should include 'pgaudit' } \r\n  end\r\n\r\n  describe sql.query (\"SHOW log_connections\") do\r\n    its('output') { should_not match /off|false/i } \r\n  end\r\n\r\n  describe sql.query (\"SHOW log_disconnections\") do\r\n    its('output') { should_not match /off|false/i } \r\n  end\r\n  \r\n  describe sql.query (\"SHOW pgaudit.log\") do\r\n    its('output') { should include 'write'}\r\n    its('output') { should include 'ddl'}\r\n    its('output') { should include 'role'}\r\n    its('output') { should include 'read'}\r\n  end\r\nend\r\n","source_location":{"line":11,"ref":"controls/V-73021.rb"},"waiver_data":{},"results":[{"status":"failed","code_desc":"PostgreSQL query: SHOW shared_preload_libraries output is expected to include \"pgaudit\"","run_time":0.000177814,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"\" to include \"pgaudit\""},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_connections output is expected not to match /off|false/i","run_time":0.000124329,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SHOW log_disconnections output is expected not to match /off|false/i","run_time":9.1511e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log output is expected to include \"write\"","run_time":0.00040941,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"write\"\nDiff:\n@@ -1,2 +1,4 @@\n-write\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log output is expected to include \"ddl\"","run_time":0.000273677,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"ddl\"\nDiff:\n@@ -1,2 +1,4 @@\n-ddl\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log output is expected to include \"role\"","run_time":0.000254419,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"role\"\nDiff:\n@@ -1,2 +1,4 @@\n-role\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"},{"status":"failed","code_desc":"PostgreSQL query with errors: SHOW pgaudit.log output is expected to include \"read\"","run_time":0.000279505,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"\\nERROR:  unrecognized configuration parameter \\\"pgaudit.log\\\"\\ncommand terminated with exit code 1\\n\" to include \"read\"\nDiff:\n@@ -1,2 +1,4 @@\n-read\n+\n+ERROR:  unrecognized configuration parameter \"pgaudit.log\"\n+command terminated with exit code 1\n"}]},{"id":"V-73017","title":"PostgreSQL must enforce access restrictions associated with changes to\n  the configuration of PostgreSQL or database(s).","desc":"Failure to provide logical access restrictions associated with changes\n  to configuration may have significant effects on the overall security of the\n  system.\n\n  When dealing with access restrictions pertaining to change control, it\n  should be noted that any changes to the hardware, software, and/or firmware\n  components of the information system can potentially have significant effects\n  on the overall security of the system.\n\n  Accordingly, only qualified and authorized individuals should be allowed to\n  obtain access to system components for the purposes of initiating changes,\n  including upgrades and modifications.","descriptions":[{"label":"default","data":"Failure to provide logical access restrictions associated with changes\n  to configuration may have significant effects on the overall security of the\n  system.\n\n  When dealing with access restrictions pertaining to change control, it\n  should be noted that any changes to the hardware, software, and/or firmware\n  components of the information system can potentially have significant effects\n  on the overall security of the system.\n\n  Accordingly, only qualified and authorized individuals should be allowed to\n  obtain access to system components for the purposes of initiating changes,\n  including upgrades and modifications."},{"label":"check","data":"To list all the permissions of individual roles, as the database\n  administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"\\du\n\n  If any role has SUPERUSER that should not, this is a finding.\n\n  Next, list all the permissions of databases and schemas by running the\n  following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"\\l\"\n  $ psql -c \"\\dn+\"\n\n  If any database or schema has update (\"W\") or create (\"C\") privileges and\n  should not, this is a finding."},{"label":"fix","data":"Configure PostgreSQL to enforce access restrictions associated with\n  changes to the configuration of PostgreSQL or database(s). \n\n  Use ALTER ROLE to remove accesses from roles: \n\n  $ psql -c \"ALTER ROLE <role_name> NOSUPERUSER\" \n\n  Use REVOKE to remove privileges from databases and schemas: \n\n  $ psql -c \"REVOKE ALL PRIVILEGES ON <table> FROM <role_name>\""}],"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000380-DB-000360","gid":"V-73017","rid":"SV-87669r2_rule","stig_id":"PGS9-00-009600","fix_id":"F-79463r2_fix","cci":["CCI-001813"],"nist":["CM-5 (1)","Rev_4"],"false_negatives":null,"false_positives":null,"documentable":false,"mitigations":null,"severity_override_guidance":false,"potential_impacts":null,"third_party_tools":null,"mitigation_controls":null,"responsibility":null,"ia_controls":null},"code":"control \"V-73017\" do\n  title \"PostgreSQL must enforce access restrictions associated with changes to\n  the configuration of PostgreSQL or database(s).\"\n  desc  \"Failure to provide logical access restrictions associated with changes\n  to configuration may have significant effects on the overall security of the\n  system.\n\n  When dealing with access restrictions pertaining to change control, it\n  should be noted that any changes to the hardware, software, and/or firmware\n  components of the information system can potentially have significant effects\n  on the overall security of the system.\n\n  Accordingly, only qualified and authorized individuals should be allowed to\n  obtain access to system components for the purposes of initiating changes,\n  including upgrades and modifications.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000380-DB-000360\"\n  tag \"gid\": \"V-73017\"\n  tag \"rid\": \"SV-87669r2_rule\"\n  tag \"stig_id\": \"PGS9-00-009600\"\n  tag \"fix_id\": \"F-79463r2_fix\"\n  tag \"cci\": [\"CCI-001813\"]\n  tag \"nist\": [\"CM-5 (1)\", \"Rev_4\"]\n  tag \"false_negatives\": nil\n  tag \"false_positives\": nil\n  tag \"documentable\": false\n  tag \"mitigations\": nil\n  tag \"severity_override_guidance\": false\n  tag \"potential_impacts\": nil\n  tag \"third_party_tools\": nil\n  tag \"mitigation_controls\": nil\n  tag \"responsibility\": nil\n  tag \"ia_controls\": nil\n  desc \"check\", \"To list all the permissions of individual roles, as the database\n  administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \\\"\\\\du\n\n  If any role has SUPERUSER that should not, this is a finding.\n\n  Next, list all the permissions of databases and schemas by running the\n  following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \\\"\\\\l\\\"\n  $ psql -c \\\"\\\\dn+\\\"\n\n  If any database or schema has update (\\\"W\\\") or create (\\\"C\\\") privileges and\n  should not, this is a finding.\"\n\n  desc \"fix\", \"Configure PostgreSQL to enforce access restrictions associated with\n  changes to the configuration of PostgreSQL or database(s). \n\n  Use ALTER ROLE to remove accesses from roles: \n\n  $ psql -c \\\"ALTER ROLE <role_name> NOSUPERUSER\\\" \n\n  Use REVOKE to remove privileges from databases and schemas: \n\n  $ psql -c \\\"REVOKE ALL PRIVILEGES ON <table> FROM <role_name>\\\"\"\n\n\n  sql = postgres_session(pg_dba, pg_dba_password, pg_host)\n\n  roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r;'\n  roles_query = sql.query(roles_sql, [pg_db])\n  roles = roles_query.lines\n\n  roles.each do |role|\n    unless pg_superusers.include?(role)\n      superuser_sql = \"SELECT r.rolsuper FROM pg_catalog.pg_roles r \"\\\n        \"WHERE r.rolname = '#{role}';\"\n\n      describe sql.query(superuser_sql, [pg_db]) do\n        its('output') { should_not eq 't' }\n      end\n    end\n  end\n\n  authorized_owners = pg_superusers\n  owners = authorized_owners.join('|')\n\n  database_granted_privileges = 'CTc'\n  database_public_privileges = 'c'\n  database_acl = \"^((((#{owners})=[#{database_granted_privileges}]+|\"\\\n    \"=[#{database_public_privileges}]+)\\/\\\\w+,?)+|)\\\\|\"\n  database_acl_regex = Regexp.new(database_acl)\n\n  schema_granted_privileges = 'UC'\n  schema_public_privileges = 'U'\n  schema_acl = \"^((((#{owners})=[#{schema_granted_privileges}]+|\"\\\n    \"=[#{schema_public_privileges}]+)\\/\\\\w+,?)+|)\\\\|\"\n  schema_acl_regex = Regexp.new(schema_acl)\n\n  databases_sql = 'SELECT datname FROM pg_catalog.pg_database where not datistemplate;'\n  databases_query = sql.query(databases_sql, [pg_db])\n  databases = databases_query.lines\n\n  databases.each do |database|\n    datacl_sql = \"SELECT pg_catalog.array_to_string(datacl, E','), datname \"\\\n      \"FROM pg_catalog.pg_database WHERE datname = '#{database}';\"\n\n    describe sql.query(datacl_sql, [pg_db]) do\n      its('output') { should match database_acl_regex }\n    end\n\n    schemas_sql = \"SELECT n.nspname, FROM pg_catalog.pg_namespace n \"\\\n      \"WHERE n.nspname !~ '^pg_' AND n.nspname <> 'information_schema';\"\n    schemas_query = sql.query(schemas_query, [database])\n    # Handle connection disabled on database\n    if schemas_query.methods.include?(:output)\n      schemas = schemas_query.lines\n\n      schemas.each do |schema|\n        nspacl_sql = \"SELECT pg_catalog.array_to_string(n.nspacl, E','), \"\\\n          \"n.nspname FROM pg_catalog.pg_namespace n \"\\\n          \"WHERE n.nspname = '#{schema}';\"\n\n        describe sql.query(nspacl_sql) do\n          its('output') { should match schema_acl_regex }\n        end\n      end\n    end\n  end\nend\n","source_location":{"line":14,"ref":"controls/V-73017.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'pg_signal_backend'; output is expected not to eq \"t\"","run_time":0.000117353,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'bob'; output is expected not to eq \"t\"","run_time":9.04e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'fooaudit'; output is expected not to eq \"t\"","run_time":0.000127985,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'test'; output is expected not to eq \"t\"","run_time":9.5231e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT r.rolsuper FROM pg_catalog.pg_roles r WHERE r.rolname = 'user'; output is expected not to eq \"t\"","run_time":9.8657e-05,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"passed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(datacl, E','), datname FROM pg_catalog.pg_database WHERE datname = 'db'; output is expected to match /^((((postgres)=[CTc]+|=[c]+)\\/\\w+,?)+|)\\|/","run_time":0.000123045,"start_time":"2020-06-19T18:47:47+00:00"},{"status":"failed","code_desc":"PostgreSQL query: SELECT pg_catalog.array_to_string(datacl, E','), datname FROM pg_catalog.pg_database WHERE datname = 'postgres'; output is expected to match /^((((postgres)=[CTc]+|=[c]+)\\/\\w+,?)+|)\\|/","run_time":0.000342058,"start_time":"2020-06-19T18:47:47+00:00","message":"expected \"=Tc/postgres,postgres=CTc/postgres|postgres\" to match /^((((postgres)=[CTc]+|=[c]+)\\/\\w+,?)+|)\\|/\nDiff:\n@@ -1,2 +1,2 @@\n-/^((((postgres)=[CTc]+|=[c]+)\\/\\w+,?)+|)\\|/\n+\"=Tc/postgres,postgres=CTc/postgres|postgres\"\n"}]}],"status":"loaded"}],"statistics":{"duration":26.033658345},"version":"4.18.108"}